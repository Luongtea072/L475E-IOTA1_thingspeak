
Water_monitioring_system_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006654  08006654  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800665c  0800665c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800665c  0800665c  0001665c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  2000000c  08006670  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000898  08006670  00020898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d60a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398b  00000000  00000000  0003d689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  00041018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001486  00000000  00000000  00042a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029879  00000000  00000000  00043efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dbce  00000000  00000000  0006d777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103f12  00000000  00000000  0008b345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007260  00000000  00000000  0018f258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001964b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080065f4 	.word	0x080065f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080065f4 	.word	0x080065f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fffd 	bl	80014c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81a 	bl	8000504 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d0:	f000 f87a 	bl	80005c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 faae 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fa86 	bl	80009e8 <MX_DMA_Init>
  MX_ADC1_Init();
 80004dc:	f000 f8a2 	bl	8000624 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80004e0:	f000 f918 	bl	8000714 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004e4:	f000 f94e 	bl	8000784 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e8:	f000 f98c 	bl	8000804 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004ec:	f000 f9b0 	bl	8000850 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f9ec 	bl	80008cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004f4:	f000 fa1a 	bl	800092c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f8:	f000 fa48 	bl	800098c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USART1_UART_Init(); // Khởi động UART3
 80004fc:	f000 f9e6 	bl	80008cc <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x3c>
	...

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2244      	movs	r2, #68	; 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f006 f842 	bl	800659c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000526:	f44f 7000 	mov.w	r0, #512	; 0x200
 800052a:	f003 f88b 	bl	8003644 <HAL_PWREx_ControlVoltageScaling>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000534:	f000 fbc2 	bl	8000cbc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000538:	f003 f866 	bl	8003608 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800053c:	4b21      	ldr	r3, [pc, #132]	; (80005c4 <SystemClock_Config+0xc0>)
 800053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <SystemClock_Config+0xc0>)
 8000544:	f023 0318 	bic.w	r3, r3, #24
 8000548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800054c:	2314      	movs	r3, #20
 800054e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800055c:	2360      	movs	r3, #96	; 0x60
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000564:	2301      	movs	r3, #1
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800056c:	2328      	movs	r3, #40	; 0x28
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4618      	mov	r0, r3
 8000582:	f003 f981 	bl	8003888 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800058c:	f000 fb96 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a4:	463b      	mov	r3, r7
 80005a6:	2104      	movs	r1, #4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fd49 	bl	8004040 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b4:	f000 fb82 	bl	8000cbc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005b8:	f004 fa50 	bl	8004a5c <HAL_RCCEx_EnableMSIPLLMode>
}
 80005bc:	bf00      	nop
 80005be:	3758      	adds	r7, #88	; 0x58
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000

080005c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0a2      	sub	sp, #136	; 0x88
 80005cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2288      	movs	r2, #136	; 0x88
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 ffe1 	bl	800659c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80005da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80005de:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005ec:	2301      	movs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005f4:	2318      	movs	r3, #24
 80005f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8000604:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8000608:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f003 ff3b 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000618:	f000 fb50 	bl	8000cbc <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3788      	adds	r7, #136	; 0x88
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000648:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <MX_ADC1_Init+0xe4>)
 800064a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC1_Init+0xe0>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000666:	2204      	movs	r2, #4
 8000668:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <MX_ADC1_Init+0xe0>)
 800066c:	2200      	movs	r2, #0
 800066e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000678:	2201      	movs	r2, #1
 800067a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ADC1_Init+0xe0>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC1_Init+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC1_Init+0xe0>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006a8:	f001 f932 	bl	8001910 <HAL_ADC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006b2:	f000 fb03 	bl	8000cbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4619      	mov	r1, r3
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006c2:	f001 fe8d 	bl	80023e0 <HAL_ADCEx_MultiModeConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006cc:	f000 faf6 	bl	8000cbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_ADC1_Init+0xe8>)
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2306      	movs	r3, #6
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_ADC1_Init+0xec>)
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e0:	2304      	movs	r3, #4
 80006e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0xe0>)
 80006ee:	f001 fa5f 	bl	8001bb0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006f8:	f000 fae0 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	50040000 	.word	0x50040000
 800070c:	04300002 	.word	0x04300002
 8000710:	407f0000 	.word	0x407f0000

08000714 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_DFSDM1_Init+0x68>)
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MX_DFSDM1_Init+0x6c>)
 800071c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000720:	2201      	movs	r2, #1
 8000722:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_DFSDM1_Init+0x68>)
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_DFSDM1_Init+0x68>)
 800073e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000742:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_DFSDM1_Init+0x68>)
 800074c:	2204      	movs	r2, #4
 800074e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000758:	2201      	movs	r2, #1
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_DFSDM1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_DFSDM1_Init+0x68>)
 800076a:	f001 fffb 	bl	8002764 <HAL_DFSDM_ChannelInit>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000774:	f000 faa2 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2000008c 	.word	0x2000008c
 8000780:	40016020 	.word	0x40016020

08000784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C2_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C2_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C2_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C2_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C2_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007c0:	f002 fca7 	bl	8003112 <HAL_I2C_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007ca:	f000 fa77 	bl	8000cbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007d2:	f002 fd39 	bl	8003248 <HAL_I2CEx_ConfigAnalogFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 fa6e 	bl	8000cbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007e4:	f002 fd7b 	bl	80032de <HAL_I2CEx_ConfigDigitalFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 fa65 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000c4 	.word	0x200000c4
 80007fc:	40005800 	.word	0x40005800
 8000800:	10909cec 	.word	0x10909cec

08000804 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_QUADSPI_Init+0x44>)
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <MX_QUADSPI_Init+0x48>)
 800080c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000810:	2202      	movs	r2, #2
 8000812:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000816:	2204      	movs	r2, #4
 8000818:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_QUADSPI_Init+0x44>)
 800081c:	2210      	movs	r2, #16
 800081e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000822:	2217      	movs	r2, #23
 8000824:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_QUADSPI_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000834:	f002 ff6c 	bl	8003710 <HAL_QSPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800083e:	f000 fa3d 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000118 	.word	0x20000118
 800084c:	a0001000 	.word	0xa0001000

08000850 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_SPI3_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_SPI3_Init+0x74>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI3_Init+0x74>)
 800086a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800086e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI3_Init+0x74>)
 800087e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000882:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI3_Init+0x74>)
 800089e:	2207      	movs	r2, #7
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI3_Init+0x74>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_SPI3_Init+0x74>)
 80008b0:	f004 fab6 	bl	8004e20 <HAL_SPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f9ff 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000015c 	.word	0x2000015c
 80008c8:	40003c00 	.word	0x40003c00

080008cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART1_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000910:	f004 fb29 	bl	8004f66 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 f9cf 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001c0 	.word	0x200001c0
 8000928:	40013800 	.word	0x40013800

0800092c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART3_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000970:	f004 faf9 	bl	8004f66 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 f99f 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000248 	.word	0x20000248
 8000988:	40004800 	.word	0x40004800

0800098c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000996:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2206      	movs	r2, #6
 800099c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	f002 fcd1 	bl	8003376 <HAL_PCD_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f96f 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000360 	.word	0x20000360

080009e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_DMA_Init+0x48>)
 80009f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <MX_DMA_Init+0x48>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6493      	str	r3, [r2, #72]	; 0x48
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_DMA_Init+0x48>)
 80009fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f001 fe73 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a10:	200e      	movs	r0, #14
 8000a12:	f001 fe8c 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f001 fe6b 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a20:	200f      	movs	r0, #15
 8000a22:	f001 fe84 	bl	800272e <HAL_NVIC_EnableIRQ>

}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4a:	4b97      	ldr	r3, [pc, #604]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a96      	ldr	r2, [pc, #600]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b94      	ldr	r3, [pc, #592]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b91      	ldr	r3, [pc, #580]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a90      	ldr	r2, [pc, #576]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b8e      	ldr	r3, [pc, #568]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b8b      	ldr	r3, [pc, #556]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a8a      	ldr	r2, [pc, #552]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b88      	ldr	r3, [pc, #544]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b85      	ldr	r3, [pc, #532]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a84      	ldr	r2, [pc, #528]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b82      	ldr	r3, [pc, #520]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b7f      	ldr	r3, [pc, #508]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a7e      	ldr	r2, [pc, #504]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b7c      	ldr	r3, [pc, #496]	; (8000ca8 <MX_GPIO_Init+0x274>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ac8:	4878      	ldr	r0, [pc, #480]	; (8000cac <MX_GPIO_Init+0x278>)
 8000aca:	f002 fae7 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000ad4:	4876      	ldr	r0, [pc, #472]	; (8000cb0 <MX_GPIO_Init+0x27c>)
 8000ad6:	f002 fae1 	bl	800309c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ae0:	4874      	ldr	r0, [pc, #464]	; (8000cb4 <MX_GPIO_Init+0x280>)
 8000ae2:	f002 fadb 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	4871      	ldr	r0, [pc, #452]	; (8000cb4 <MX_GPIO_Init+0x280>)
 8000aee:	f002 fad5 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000af8:	486f      	ldr	r0, [pc, #444]	; (8000cb8 <MX_GPIO_Init+0x284>)
 8000afa:	f002 facf 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f002 fac8 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4866      	ldr	r0, [pc, #408]	; (8000cac <MX_GPIO_Init+0x278>)
 8000b12:	f002 fac3 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b16:	f240 1315 	movw	r3, #277	; 0x115
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	485f      	ldr	r0, [pc, #380]	; (8000cac <MX_GPIO_Init+0x278>)
 8000b30:	f002 f90a 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b34:	236a      	movs	r3, #106	; 0x6a
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4858      	ldr	r0, [pc, #352]	; (8000cac <MX_GPIO_Init+0x278>)
 8000b4a:	f002 f8fd 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4854      	ldr	r0, [pc, #336]	; (8000cb8 <MX_GPIO_Init+0x284>)
 8000b66:	f002 f8ef 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b6a:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000b6e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	484b      	ldr	r0, [pc, #300]	; (8000cb0 <MX_GPIO_Init+0x27c>)
 8000b84:	f002 f8e0 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b88:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b8c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4845      	ldr	r0, [pc, #276]	; (8000cb4 <MX_GPIO_Init+0x280>)
 8000ba0:	f002 f8d2 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ba4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	483d      	ldr	r0, [pc, #244]	; (8000cb4 <MX_GPIO_Init+0x280>)
 8000bbe:	f002 f8c3 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bc2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4837      	ldr	r0, [pc, #220]	; (8000cb8 <MX_GPIO_Init+0x284>)
 8000bdc:	f002 f8b4 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000be0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <MX_GPIO_Init+0x284>)
 8000bf8:	f002 f8a6 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000bfc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f002 f896 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	481f      	ldr	r0, [pc, #124]	; (8000cb4 <MX_GPIO_Init+0x280>)
 8000c38:	f002 f886 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c3c:	2378      	movs	r3, #120	; 0x78
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <MX_GPIO_Init+0x280>)
 8000c58:	f002 f876 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c62:	2312      	movs	r3, #18
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0x27c>)
 8000c7a:	f002 f865 	bl	8002d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2017      	movs	r0, #23
 8000c84:	f001 fd37 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c88:	2017      	movs	r0, #23
 8000c8a:	f001 fd50 	bl	800272e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2028      	movs	r0, #40	; 0x28
 8000c94:	f001 fd2f 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f001 fd48 	bl	800272e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	48001000 	.word	0x48001000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48000800 	.word	0x48000800

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <HAL_ADC_MspInit+0xd4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d154      	bne.n	8000ddc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d32:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a2c      	ldr	r2, [pc, #176]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d46:	61bb      	str	r3, [r7, #24]
 8000d48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_ADC_MspInit+0xd8>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d92:	233f      	movs	r3, #63	; 0x3f
 8000d94:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d96:	230b      	movs	r3, #11
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	4619      	mov	r1, r3
 8000da4:	4811      	ldr	r0, [pc, #68]	; (8000dec <HAL_ADC_MspInit+0xdc>)
 8000da6:	f001 ffcf 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ARD_D7_Pin;
 8000daa:	2313      	movs	r3, #19
 8000dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dae:	230b      	movs	r3, #11
 8000db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f001 ffc2 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dc8:	230b      	movs	r3, #11
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	; (8000df0 <HAL_ADC_MspInit+0xe0>)
 8000dd8:	f001 ffb6 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3730      	adds	r7, #48	; 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	50040000 	.word	0x50040000
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48000400 	.word	0x48000400

08000df4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ac      	sub	sp, #176	; 0xb0
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2288      	movs	r2, #136	; 0x88
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fbc1 	bl	800659c <memset>
  if(DFSDM1_Init == 0)
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d142      	bne.n	8000ea8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fb28 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000e3e:	f7ff ff3d 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e72:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000e9a:	f001 ff55 	bl	8002d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a02      	ldr	r2, [pc, #8]	; (8000eb0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ea6:	6013      	str	r3, [r2, #0]
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37b0      	adds	r7, #176	; 0xb0
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000086c 	.word	0x2000086c
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48001000 	.word	0x48001000

08000ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0ac      	sub	sp, #176	; 0xb0
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2288      	movs	r2, #136	; 0x88
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f005 fb5d 	bl	800659c <memset>
  if(hi2c->Instance==I2C2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <HAL_I2C_MspInit+0xb0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d13b      	bne.n	8000f64 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fac5 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f04:	f7ff feda 	bl	8000cbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_I2C_MspInit+0xb4>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0c:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <HAL_I2C_MspInit+0xb4>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_I2C_MspInit+0xb4>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f28:	2312      	movs	r3, #18
 8000f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f44:	4619      	mov	r1, r3
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <HAL_I2C_MspInit+0xb8>)
 8000f48:	f001 fefe 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_I2C_MspInit+0xb4>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_I2C_MspInit+0xb4>)
 8000f52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f56:	6593      	str	r3, [r2, #88]	; 0x58
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_I2C_MspInit+0xb4>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	37b0      	adds	r7, #176	; 0xb0
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40005800 	.word	0x40005800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_QSPI_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d128      	bne.n	8000fec <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_QSPI_MspInit+0x80>)
 8000f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <HAL_QSPI_MspInit+0x80>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6513      	str	r3, [r2, #80]	; 0x50
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_QSPI_MspInit+0x80>)
 8000fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_QSPI_MspInit+0x80>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_QSPI_MspInit+0x80>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_QSPI_MspInit+0x80>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000fca:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000fce:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_QSPI_MspInit+0x84>)
 8000fe8:	f001 feae 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	a0001000 	.word	0xa0001000
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	48001000 	.word	0x48001000

08001000 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_SPI_MspInit+0x7c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d128      	bne.n	8001074 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_SPI_MspInit+0x80>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <HAL_SPI_MspInit+0x80>)
 8001028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_SPI_MspInit+0x80>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_SPI_MspInit+0x80>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_SPI_MspInit+0x80>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_SPI_MspInit+0x80>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001052:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001064:	2306      	movs	r3, #6
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_SPI_MspInit+0x84>)
 8001070:	f001 fe6a 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40003c00 	.word	0x40003c00
 8001080:	40021000 	.word	0x40021000
 8001084:	48000800 	.word	0x48000800

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ae      	sub	sp, #184	; 0xb8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2288      	movs	r2, #136	; 0x88
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 fa77 	bl	800659c <memset>
  if(huart->Instance==USART1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a6f      	ldr	r2, [pc, #444]	; (8001270 <HAL_UART_MspInit+0x1e8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	f040 8096 	bne.w	80011e6 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010be:	2300      	movs	r3, #0
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 f9de 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010d2:	f7ff fdf3 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010d6:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010da:	4a66      	ldr	r2, [pc, #408]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6613      	str	r3, [r2, #96]	; 0x60
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b61      	ldr	r3, [pc, #388]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a60      	ldr	r2, [pc, #384]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111e:	2307      	movs	r3, #7
 8001120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001128:	4619      	mov	r1, r3
 800112a:	4853      	ldr	r0, [pc, #332]	; (8001278 <HAL_UART_MspInit+0x1f0>)
 800112c:	f001 fe0c 	bl	8002d48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001130:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001132:	4a53      	ldr	r2, [pc, #332]	; (8001280 <HAL_UART_MspInit+0x1f8>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001138:	2202      	movs	r2, #2
 800113a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <HAL_UART_MspInit+0x1f4>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001142:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <HAL_UART_MspInit+0x1f4>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800114e:	4b4b      	ldr	r3, [pc, #300]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001154:	4b49      	ldr	r3, [pc, #292]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <HAL_UART_MspInit+0x1f4>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001160:	4b46      	ldr	r3, [pc, #280]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001166:	4845      	ldr	r0, [pc, #276]	; (800127c <HAL_UART_MspInit+0x1f4>)
 8001168:	f001 fc08 	bl	800297c <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001172:	f7ff fda3 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a40      	ldr	r2, [pc, #256]	; (800127c <HAL_UART_MspInit+0x1f4>)
 800117a:	675a      	str	r2, [r3, #116]	; 0x74
 800117c:	4a3f      	ldr	r2, [pc, #252]	; (800127c <HAL_UART_MspInit+0x1f4>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001182:	4b40      	ldr	r3, [pc, #256]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 8001184:	4a40      	ldr	r2, [pc, #256]	; (8001288 <HAL_UART_MspInit+0x200>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 800118a:	2202      	movs	r2, #2
 800118c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 8001190:	2210      	movs	r2, #16
 8001192:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a6:	4b37      	ldr	r3, [pc, #220]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80011ac:	4b35      	ldr	r3, [pc, #212]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b2:	4b34      	ldr	r3, [pc, #208]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80011b8:	4832      	ldr	r0, [pc, #200]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011ba:	f001 fbdf 	bl	800297c <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 80011c4:	f7ff fd7a 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a2e      	ldr	r2, [pc, #184]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011cc:	671a      	str	r2, [r3, #112]	; 0x70
 80011ce:	4a2d      	ldr	r2, [pc, #180]	; (8001284 <HAL_UART_MspInit+0x1fc>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2025      	movs	r0, #37	; 0x25
 80011da:	f001 fa8c 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011de:	2025      	movs	r0, #37	; 0x25
 80011e0:	f001 faa5 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011e4:	e040      	b.n	8001268 <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a28      	ldr	r2, [pc, #160]	; (800128c <HAL_UART_MspInit+0x204>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d13b      	bne.n	8001268 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011f0:	2304      	movs	r3, #4
 80011f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 f943 	bl	8004488 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_UART_MspInit+0x184>
      Error_Handler();
 8001208:	f7ff fd58 	bl	8000cbc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001210:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 8001212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001216:	6593      	str	r3, [r2, #88]	; 0x58
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 800121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_UART_MspInit+0x1ec>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800123c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001250:	2303      	movs	r3, #3
 8001252:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001256:	2307      	movs	r3, #7
 8001258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001260:	4619      	mov	r1, r3
 8001262:	480b      	ldr	r0, [pc, #44]	; (8001290 <HAL_UART_MspInit+0x208>)
 8001264:	f001 fd70 	bl	8002d48 <HAL_GPIO_Init>
}
 8001268:	bf00      	nop
 800126a:	37b8      	adds	r7, #184	; 0xb8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	48000400 	.word	0x48000400
 800127c:	200002d0 	.word	0x200002d0
 8001280:	40020058 	.word	0x40020058
 8001284:	20000318 	.word	0x20000318
 8001288:	40020044 	.word	0x40020044
 800128c:	40004800 	.word	0x40004800
 8001290:	48000c00 	.word	0x48000c00

08001294 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b4:	d154      	bne.n	8001360 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 fd2f 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012fc:	230a      	movs	r3, #10
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f001 fd1d 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d114      	bne.n	800135c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800134a:	f002 f9d1 	bl	80036f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_PCD_MspInit+0xd4>)
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800135a:	e001      	b.n	8001360 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 800135c:	f002 f9c8 	bl	80036f0 <HAL_PWREx_EnableVddUSB>
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 f8da 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Channel4_IRQHandler+0x10>)
 80013c6:	f001 fc10 	bl	8002bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000318 	.word	0x20000318

080013d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Channel5_IRQHandler+0x10>)
 80013da:	f001 fc06 	bl	8002bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d0 	.word	0x200002d0

080013e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80013ec:	2020      	movs	r0, #32
 80013ee:	f001 fe6d 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80013f2:	2040      	movs	r0, #64	; 0x40
 80013f4:	f001 fe6a 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80013f8:	2080      	movs	r0, #128	; 0x80
 80013fa:	f001 fe67 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80013fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001402:	f001 fe63 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <USART1_IRQHandler+0x10>)
 8001412:	f003 fdf7 	bl	8005004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001c0 	.word	0x200001c0

08001420 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001424:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001428:	f001 fe50 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800142c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001430:	f001 fe4c 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001434:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001438:	f001 fe48 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800143c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001440:	f001 fe44 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001444:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001448:	f001 fe40 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001478:	f7ff ffea 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f005 f883 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a6:	f7ff f80d 	bl	80004c4 <main>

080014aa <LoopForever>:

LoopForever:
    b LoopForever
 80014aa:	e7fe      	b.n	80014aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014b8:	08006664 	.word	0x08006664
  ldr r2, =_sbss
 80014bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014c0:	20000898 	.word	0x20000898

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>

080014c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f001 f905 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f80e 	bl	80014f8 <HAL_InitTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	71fb      	strb	r3, [r7, #7]
 80014e6:	e001      	b.n	80014ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014e8:	f7ff fbee 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_InitTick+0x6c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_InitTick+0x70>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_InitTick+0x6c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	fbb3 f3f1 	udiv	r3, r3, r1
 800151e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f001 f911 	bl	800274a <HAL_SYSTICK_Config>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d809      	bhi.n	8001548 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153c:	f001 f8db 	bl	80026f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_InitTick+0x74>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e007      	b.n	8001558 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e004      	b.n	8001558 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e001      	b.n	8001558 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004

08001570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008
 8001594:	20000870 	.word	0x20000870

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000870 	.word	0x20000870

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff ffee 	bl	8001598 <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_Delay+0x44>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffde 	bl	8001598 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008

080015f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	609a      	str	r2, [r3, #8]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3360      	adds	r3, #96	; 0x60
 8001672:	461a      	mov	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <LL_ADC_SetOffset+0x44>)
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	4313      	orrs	r3, r2
 8001690:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	03fff000 	.word	0x03fff000

080016a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3360      	adds	r3, #96	; 0x60
 80016b6:	461a      	mov	r2, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3360      	adds	r3, #96	; 0x60
 80016e4:	461a      	mov	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016fe:	bf00      	nop
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800170a:	b480      	push	{r7}
 800170c:	b087      	sub	sp, #28
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3330      	adds	r3, #48	; 0x30
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f003 031f 	and.w	r3, r3, #31
 8001734:	211f      	movs	r1, #31
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	0e9b      	lsrs	r3, r3, #26
 8001742:	f003 011f 	and.w	r1, r3, #31
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	431a      	orrs	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001756:	bf00      	nop
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001762:	b480      	push	{r7}
 8001764:	b087      	sub	sp, #28
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3314      	adds	r3, #20
 8001772:	461a      	mov	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	0e5b      	lsrs	r3, r3, #25
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	4413      	add	r3, r2
 8001780:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0d1b      	lsrs	r3, r3, #20
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2107      	movs	r1, #7
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	401a      	ands	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	0d1b      	lsrs	r3, r3, #20
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	431a      	orrs	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d0:	43db      	mvns	r3, r3
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f003 0318 	and.w	r3, r3, #24
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80017dc:	40d9      	lsrs	r1, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	400b      	ands	r3, r1
 80017e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e6:	431a      	orrs	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	0007ffff 	.word	0x0007ffff

08001800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6093      	str	r3, [r2, #8]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800185c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001860:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <LL_ADC_IsEnabled+0x18>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <LL_ADC_IsEnabled+0x1a>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d101      	bne.n	80018da <LL_ADC_REG_IsConversionOngoing+0x18>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d101      	bne.n	8001900 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e130      	b.n	8001b8c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff f9e9 	bl	8000d10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff67 	bl	8001824 <LL_ADC_IsDeepPowerDownEnabled>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff4d 	bl	8001800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff82 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff66 	bl	800184c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001980:	4b84      	ldr	r3, [pc, #528]	; (8001b94 <HAL_ADC_Init+0x284>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	4a84      	ldr	r2, [pc, #528]	; (8001b98 <HAL_ADC_Init+0x288>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	3301      	adds	r3, #1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001994:	e002      	b.n	800199c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3b01      	subs	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff64 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10d      	bne.n	80019ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	f043 0210 	orr.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff75 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 80019d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 80c9 	bne.w	8001b7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80c5 	bne.w	8001b7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019f8:	f043 0202 	orr.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff49 	bl	800189c <LL_ADC_IsEnabled>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d115      	bne.n	8001a3c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a10:	4862      	ldr	r0, [pc, #392]	; (8001b9c <HAL_ADC_Init+0x28c>)
 8001a12:	f7ff ff43 	bl	800189c <LL_ADC_IsEnabled>
 8001a16:	4604      	mov	r4, r0
 8001a18:	4861      	ldr	r0, [pc, #388]	; (8001ba0 <HAL_ADC_Init+0x290>)
 8001a1a:	f7ff ff3f 	bl	800189c <LL_ADC_IsEnabled>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	431c      	orrs	r4, r3
 8001a22:	4860      	ldr	r0, [pc, #384]	; (8001ba4 <HAL_ADC_Init+0x294>)
 8001a24:	f7ff ff3a 	bl	800189c <LL_ADC_IsEnabled>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4619      	mov	r1, r3
 8001a36:	485c      	ldr	r0, [pc, #368]	; (8001ba8 <HAL_ADC_Init+0x298>)
 8001a38:	f7ff fdde 	bl	80015f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7e5b      	ldrb	r3, [r3, #25]
 8001a40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d106      	bne.n	8001a78 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	045b      	lsls	r3, r3, #17
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <HAL_ADC_Init+0x29c>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff1b 	bl	80018e8 <LL_ADC_INJ_IsConversionOngoing>
 8001ab2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d13d      	bne.n	8001b36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d13a      	bne.n	8001b36 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ac4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001acc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001adc:	f023 0302 	bic.w	r3, r3, #2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	69b9      	ldr	r1, [r7, #24]
 8001ae6:	430b      	orrs	r3, r1
 8001ae8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d118      	bne.n	8001b26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001afe:	f023 0304 	bic.w	r3, r3, #4
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b0a:	4311      	orrs	r1, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b16:	430a      	orrs	r2, r1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	e007      	b.n	8001b36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10c      	bne.n	8001b58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f023 010f 	bic.w	r1, r3, #15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
 8001b56:	e007      	b.n	8001b68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 020f 	bic.w	r2, r2, #15
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f023 0303 	bic.w	r3, r3, #3
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	655a      	str	r2, [r3, #84]	; 0x54
 8001b78:	e007      	b.n	8001b8a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f043 0210 	orr.w	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3724      	adds	r7, #36	; 0x24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	20000000 	.word	0x20000000
 8001b98:	053e2d63 	.word	0x053e2d63
 8001b9c:	50040000 	.word	0x50040000
 8001ba0:	50040100 	.word	0x50040100
 8001ba4:	50040200 	.word	0x50040200
 8001ba8:	50040300 	.word	0x50040300
 8001bac:	fff0c007 	.word	0xfff0c007

08001bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0b6      	sub	sp, #216	; 0xd8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x22>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e3c9      	b.n	8002366 <HAL_ADC_ConfigChannel+0x7b6>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe6f 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 83aa 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d824      	bhi.n	8001c46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	3b02      	subs	r3, #2
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d81b      	bhi.n	8001c3e <HAL_ADC_ConfigChannel+0x8e>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <HAL_ADC_ConfigChannel+0x5c>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c25 	.word	0x08001c25
 8001c14:	08001c2d 	.word	0x08001c2d
 8001c18:	08001c35 	.word	0x08001c35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c22:	e010      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001c24:	2312      	movs	r3, #18
 8001c26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c2a:	e00c      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001c2c:	2318      	movs	r3, #24
 8001c2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c32:	e008      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001c3e:	2306      	movs	r3, #6
 8001c40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001c54:	f7ff fd59 	bl	800170a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe30 	bl	80018c2 <LL_ADC_REG_IsConversionOngoing>
 8001c62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fe3c 	bl	80018e8 <LL_ADC_INJ_IsConversionOngoing>
 8001c70:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 81a4 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 819f 	bne.w	8001fc6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	461a      	mov	r2, r3
 8001c96:	f7ff fd64 	bl	8001762 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d00a      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	6919      	ldr	r1, [r3, #16]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ccc:	f7ff fcc8 	bl	8001660 <LL_ADC_SetOffset>
 8001cd0:	e179      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fce5 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10a      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x14e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fcda 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	0e9b      	lsrs	r3, r3, #26
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	e01e      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x18c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fccf 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	e004      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d105      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1a4>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0e9b      	lsrs	r3, r3, #26
 8001d4e:	f003 031f 	and.w	r3, r3, #31
 8001d52:	e018      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x1d6>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001d78:	2320      	movs	r3, #32
 8001d7a:	e004      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d106      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fc9e 	bl	80016d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fc82 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10a      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x214>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2101      	movs	r1, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc77 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	0e9b      	lsrs	r3, r3, #26
 8001dbe:	f003 021f 	and.w	r2, r3, #31
 8001dc2:	e01e      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x252>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fc6c 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001df2:	2320      	movs	r3, #32
 8001df4:	e004      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x26a>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	0e9b      	lsrs	r3, r3, #26
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	e018      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x29c>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001e3e:	2320      	movs	r3, #32
 8001e40:	e004      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d106      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	2101      	movs	r1, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fc3b 	bl	80016d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2102      	movs	r1, #2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fc1f 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x2da>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc14 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	e01e      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x318>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fc09 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e004      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x330>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	e014      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x35a>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001efc:	2320      	movs	r3, #32
 8001efe:	e004      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d106      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	2102      	movs	r1, #2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fbdc 	bl	80016d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2103      	movs	r1, #3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fbc0 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10a      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2103      	movs	r1, #3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fbb5 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	0e9b      	lsrs	r3, r3, #26
 8001f42:	f003 021f 	and.w	r2, r3, #31
 8001f46:	e017      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x3c8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fbaa 	bl	80016a8 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f62:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e003      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x3e0>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0e9b      	lsrs	r3, r3, #26
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	e011      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x404>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fa0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001fac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fb87 	bl	80016d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fc66 	bl	800189c <LL_ADC_IsEnabled>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 8140 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6819      	ldr	r1, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f7ff fbe7 	bl	80017b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a8f      	ldr	r2, [pc, #572]	; (800222c <HAL_ADC_ConfigChannel+0x67c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	f040 8131 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10b      	bne.n	800201e <HAL_ADC_ConfigChannel+0x46e>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0e9b      	lsrs	r3, r3, #26
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2b09      	cmp	r3, #9
 8002014:	bf94      	ite	ls
 8002016:	2301      	movls	r3, #1
 8002018:	2300      	movhi	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	e019      	b.n	8002052 <HAL_ADC_ConfigChannel+0x4a2>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800203a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	2b09      	cmp	r3, #9
 800204a:	bf94      	ite	ls
 800204c:	2301      	movls	r3, #1
 800204e:	2300      	movhi	r3, #0
 8002050:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002052:	2b00      	cmp	r3, #0
 8002054:	d079      	beq.n	800214a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_ADC_ConfigChannel+0x4c2>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	3301      	adds	r3, #1
 800206a:	069b      	lsls	r3, r3, #26
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002070:	e015      	b.n	800209e <HAL_ADC_ConfigChannel+0x4ee>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800208a:	2320      	movs	r3, #32
 800208c:	e003      	b.n	8002096 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3301      	adds	r3, #1
 8002098:	069b      	lsls	r3, r3, #26
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d109      	bne.n	80020be <HAL_ADC_ConfigChannel+0x50e>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	e017      	b.n	80020ee <HAL_ADC_ConfigChannel+0x53e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2101      	movs	r1, #1
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	ea42 0103 	orr.w	r1, r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x564>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	3301      	adds	r3, #1
 8002106:	f003 021f 	and.w	r2, r3, #31
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	051b      	lsls	r3, r3, #20
 8002112:	e018      	b.n	8002146 <HAL_ADC_ConfigChannel+0x596>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e003      	b.n	8002138 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3301      	adds	r3, #1
 800213a:	f003 021f 	and.w	r2, r3, #31
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002146:	430b      	orrs	r3, r1
 8002148:	e081      	b.n	800224e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x5b6>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0e9b      	lsrs	r3, r3, #26
 800215c:	3301      	adds	r3, #1
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002164:	e015      	b.n	8002192 <HAL_ADC_ConfigChannel+0x5e2>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800217e:	2320      	movs	r3, #32
 8002180:	e003      	b.n	800218a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	fab3 f383 	clz	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	069b      	lsls	r3, r3, #26
 800218e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x602>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	e017      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x632>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	61bb      	str	r3, [r7, #24]
  return result;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	ea42 0103 	orr.w	r1, r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_ADC_ConfigChannel+0x65e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	3b1e      	subs	r3, #30
 8002206:	051b      	lsls	r3, r3, #20
 8002208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800220c:	e01e      	b.n	800224c <HAL_ADC_ConfigChannel+0x69c>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	60fb      	str	r3, [r7, #12]
  return result;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d104      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e006      	b.n	8002238 <HAL_ADC_ConfigChannel+0x688>
 800222a:	bf00      	nop
 800222c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f003 021f 	and.w	r2, r3, #31
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	3b1e      	subs	r3, #30
 8002246:	051b      	lsls	r3, r3, #20
 8002248:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002252:	4619      	mov	r1, r3
 8002254:	f7ff fa85 	bl	8001762 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_ADC_ConfigChannel+0x7c0>)
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d07a      	beq.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002264:	4843      	ldr	r0, [pc, #268]	; (8002374 <HAL_ADC_ConfigChannel+0x7c4>)
 8002266:	f7ff f9ed 	bl	8001644 <LL_ADC_GetCommonPathInternalCh>
 800226a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_ADC_ConfigChannel+0x7c8>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d12c      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800227c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d126      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a3c      	ldr	r2, [pc, #240]	; (800237c <HAL_ADC_ConfigChannel+0x7cc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x6e8>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_ADC_ConfigChannel+0x7d0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d15d      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800229c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a0:	4619      	mov	r1, r3
 80022a2:	4834      	ldr	r0, [pc, #208]	; (8002374 <HAL_ADC_ConfigChannel+0x7c4>)
 80022a4:	f7ff f9bb 	bl	800161e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a8:	4b36      	ldr	r3, [pc, #216]	; (8002384 <HAL_ADC_ConfigChannel+0x7d4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	4a36      	ldr	r2, [pc, #216]	; (8002388 <HAL_ADC_ConfigChannel+0x7d8>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022c2:	e002      	b.n	80022ca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022d0:	e040      	b.n	8002354 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a2d      	ldr	r2, [pc, #180]	; (800238c <HAL_ADC_ConfigChannel+0x7dc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d118      	bne.n	800230e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d112      	bne.n	800230e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_ADC_ConfigChannel+0x7cc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_ADC_ConfigChannel+0x74c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <HAL_ADC_ConfigChannel+0x7d0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d12d      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002304:	4619      	mov	r1, r3
 8002306:	481b      	ldr	r0, [pc, #108]	; (8002374 <HAL_ADC_ConfigChannel+0x7c4>)
 8002308:	f7ff f989 	bl	800161e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800230c:	e024      	b.n	8002358 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_ADC_ConfigChannel+0x7e0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d120      	bne.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800231c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11a      	bne.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_ADC_ConfigChannel+0x7cc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d115      	bne.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800232e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002336:	4619      	mov	r1, r3
 8002338:	480e      	ldr	r0, [pc, #56]	; (8002374 <HAL_ADC_ConfigChannel+0x7c4>)
 800233a:	f7ff f970 	bl	800161e <LL_ADC_SetCommonPathInternalCh>
 800233e:	e00c      	b.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002352:	e002      	b.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002358:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002362:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002366:	4618      	mov	r0, r3
 8002368:	37d8      	adds	r7, #216	; 0xd8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	80080000 	.word	0x80080000
 8002374:	50040300 	.word	0x50040300
 8002378:	c7520000 	.word	0xc7520000
 800237c:	50040000 	.word	0x50040000
 8002380:	50040200 	.word	0x50040200
 8002384:	20000000 	.word	0x20000000
 8002388:	053e2d63 	.word	0x053e2d63
 800238c:	cb840000 	.word	0xcb840000
 8002390:	80000001 	.word	0x80000001

08002394 <LL_ADC_IsEnabled>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <LL_ADC_IsEnabled+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_IsEnabled+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_REG_IsConversionOngoing>:
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b09f      	sub	sp, #124	; 0x7c
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e093      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002406:	2300      	movs	r3, #0
 8002408:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800240a:	2300      	movs	r3, #0
 800240c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a47      	ldr	r2, [pc, #284]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d102      	bne.n	800241e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002418:	4b46      	ldr	r3, [pc, #280]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	e001      	b.n	8002422 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0220 	orr.w	r2, r3, #32
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e072      	b.n	8002526 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ffb9 	bl	80023ba <LL_ADC_REG_IsConversionOngoing>
 8002448:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ffb3 	bl	80023ba <LL_ADC_REG_IsConversionOngoing>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d154      	bne.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800245a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800245c:	2b00      	cmp	r3, #0
 800245e:	d151      	bne.n	8002504 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002462:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02c      	beq.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800247e:	035b      	lsls	r3, r3, #13
 8002480:	430b      	orrs	r3, r1
 8002482:	431a      	orrs	r2, r3
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002488:	4829      	ldr	r0, [pc, #164]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800248a:	f7ff ff83 	bl	8002394 <LL_ADC_IsEnabled>
 800248e:	4604      	mov	r4, r0
 8002490:	4828      	ldr	r0, [pc, #160]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002492:	f7ff ff7f 	bl	8002394 <LL_ADC_IsEnabled>
 8002496:	4603      	mov	r3, r0
 8002498:	431c      	orrs	r4, r3
 800249a:	4828      	ldr	r0, [pc, #160]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800249c:	f7ff ff7a 	bl	8002394 <LL_ADC_IsEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4323      	orrs	r3, r4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d137      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024b0:	f023 030f 	bic.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	6811      	ldr	r1, [r2, #0]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	6892      	ldr	r2, [r2, #8]
 80024bc:	430a      	orrs	r2, r1
 80024be:	431a      	orrs	r2, r3
 80024c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024c4:	e028      	b.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d2:	4817      	ldr	r0, [pc, #92]	; (8002530 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024d4:	f7ff ff5e 	bl	8002394 <LL_ADC_IsEnabled>
 80024d8:	4604      	mov	r4, r0
 80024da:	4816      	ldr	r0, [pc, #88]	; (8002534 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024dc:	f7ff ff5a 	bl	8002394 <LL_ADC_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	431c      	orrs	r4, r3
 80024e4:	4815      	ldr	r0, [pc, #84]	; (800253c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024e6:	f7ff ff55 	bl	8002394 <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4323      	orrs	r3, r4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d112      	bne.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024fa:	f023 030f 	bic.w	r3, r3, #15
 80024fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002500:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002502:	e009      	b.n	8002518 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f043 0220 	orr.w	r2, r3, #32
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002516:	e000      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002518:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002522:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002526:	4618      	mov	r0, r3
 8002528:	377c      	adds	r7, #124	; 0x7c
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	bf00      	nop
 8002530:	50040000 	.word	0x50040000
 8002534:	50040100 	.word	0x50040100
 8002538:	50040300 	.word	0x50040300
 800253c:	50040200 	.word	0x50040200

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	; (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	; (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	; 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	; 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c0:	f7ff ff8e 	bl	80025e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff29 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff3e 	bl	8002588 <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff8e 	bl	8002634 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5d 	bl	80025e0 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff31 	bl	80025a4 <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa2 	bl	800269c <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0ac      	b.n	80028d0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f8b2 	bl	80028e4 <DFSDM_GetChannelFromInstance>
 8002780:	4603      	mov	r3, r0
 8002782:	4a55      	ldr	r2, [pc, #340]	; (80028d8 <HAL_DFSDM_ChannelInit+0x174>)
 8002784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e09f      	b.n	80028d0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fb2f 	bl	8000df4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002796:	4b51      	ldr	r3, [pc, #324]	; (80028dc <HAL_DFSDM_ChannelInit+0x178>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_DFSDM_ChannelInit+0x178>)
 800279e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80027a0:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <HAL_DFSDM_ChannelInit+0x178>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d125      	bne.n	80027f4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4c      	ldr	r2, [pc, #304]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027b2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4948      	ldr	r1, [pc, #288]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80027c2:	4b47      	ldr	r3, [pc, #284]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027c8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80027cc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	791b      	ldrb	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d108      	bne.n	80027e8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80027d6:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	3b01      	subs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	493f      	ldr	r1, [pc, #252]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80027e8:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a3c      	ldr	r2, [pc, #240]	; (80028e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80027ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027f2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002802:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002812:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002818:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 020f 	bic.w	r2, r2, #15
 8002830:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002858:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f002 0207 	and.w	r2, r2, #7
 8002884:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f810 	bl	80028e4 <DFSDM_GetChannelFromInstance>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_DFSDM_ChannelInit+0x174>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000878 	.word	0x20000878
 80028dc:	20000874 	.word	0x20000874
 80028e0:	40016000 	.word	0x40016000

080028e4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <DFSDM_GetChannelFromInstance+0x7c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e02b      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <DFSDM_GetChannelFromInstance+0x80>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d102      	bne.n	8002908 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002902:	2301      	movs	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	e024      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <DFSDM_GetChannelFromInstance+0x84>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002910:	2302      	movs	r3, #2
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e01d      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a14      	ldr	r2, [pc, #80]	; (800296c <DFSDM_GetChannelFromInstance+0x88>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d102      	bne.n	8002924 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800291e:	2304      	movs	r3, #4
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e016      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <DFSDM_GetChannelFromInstance+0x8c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d102      	bne.n	8002932 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800292c:	2305      	movs	r3, #5
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e00f      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <DFSDM_GetChannelFromInstance+0x90>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d102      	bne.n	8002940 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800293a:	2306      	movs	r3, #6
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e008      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <DFSDM_GetChannelFromInstance+0x94>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d102      	bne.n	800294e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002948:	2307      	movs	r3, #7
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e001      	b.n	8002952 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800294e:	2303      	movs	r3, #3
 8002950:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40016000 	.word	0x40016000
 8002964:	40016020 	.word	0x40016020
 8002968:	40016040 	.word	0x40016040
 800296c:	40016080 	.word	0x40016080
 8002970:	400160a0 	.word	0x400160a0
 8002974:	400160c0 	.word	0x400160c0
 8002978:	400160e0 	.word	0x400160e0

0800297c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e098      	b.n	8002ac0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	4b4d      	ldr	r3, [pc, #308]	; (8002acc <HAL_DMA_Init+0x150>)
 8002996:	429a      	cmp	r2, r3
 8002998:	d80f      	bhi.n	80029ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <HAL_DMA_Init+0x154>)
 80029a2:	4413      	add	r3, r2
 80029a4:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <HAL_DMA_Init+0x158>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	009a      	lsls	r2, r3, #2
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a48      	ldr	r2, [pc, #288]	; (8002ad8 <HAL_DMA_Init+0x15c>)
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
 80029b8:	e00e      	b.n	80029d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_DMA_Init+0x160>)
 80029c2:	4413      	add	r3, r2
 80029c4:	4a43      	ldr	r2, [pc, #268]	; (8002ad4 <HAL_DMA_Init+0x158>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	009a      	lsls	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a42      	ldr	r2, [pc, #264]	; (8002ae0 <HAL_DMA_Init+0x164>)
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a32:	d039      	beq.n	8002aa8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	4a27      	ldr	r2, [pc, #156]	; (8002ad8 <HAL_DMA_Init+0x15c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11a      	bne.n	8002a74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_DMA_Init+0x168>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f003 031c 	and.w	r3, r3, #28
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4924      	ldr	r1, [pc, #144]	; (8002ae4 <HAL_DMA_Init+0x168>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_DMA_Init+0x168>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6859      	ldr	r1, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f003 031c 	and.w	r3, r3, #28
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	491d      	ldr	r1, [pc, #116]	; (8002ae4 <HAL_DMA_Init+0x168>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
 8002a72:	e019      	b.n	8002aa8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_DMA_Init+0x16c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f003 031c 	and.w	r3, r3, #28
 8002a80:	210f      	movs	r1, #15
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	4917      	ldr	r1, [pc, #92]	; (8002ae8 <HAL_DMA_Init+0x16c>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_DMA_Init+0x16c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 031c 	and.w	r3, r3, #28
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	4911      	ldr	r1, [pc, #68]	; (8002ae8 <HAL_DMA_Init+0x16c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40020407 	.word	0x40020407
 8002ad0:	bffdfff8 	.word	0xbffdfff8
 8002ad4:	cccccccd 	.word	0xcccccccd
 8002ad8:	40020000 	.word	0x40020000
 8002adc:	bffdfbf8 	.word	0xbffdfbf8
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	400200a8 	.word	0x400200a8
 8002ae8:	400204a8 	.word	0x400204a8

08002aec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2204      	movs	r2, #4
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e022      	b.n	8002b5c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 020e 	bic.w	r2, r2, #14
 8002b24:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f003 021c 	and.w	r2, r3, #28
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f202 	lsl.w	r2, r1, r2
 8002b48:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d005      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e029      	b.n	8002be0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 020e 	bic.w	r2, r2, #14
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	f003 021c 	and.w	r2, r3, #28
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f202 	lsl.w	r2, r1, r2
 8002bbe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
    }
  }
  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f003 031c 	and.w	r3, r3, #28
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d026      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x7a>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d021      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0204 	bic.w	r2, r2, #4
 8002c3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f003 021c 	and.w	r2, r3, #28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d071      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c62:	e06c      	b.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f003 031c 	and.w	r3, r3, #28
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02e      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xec>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d029      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 020a 	bic.w	r2, r2, #10
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cac:	f003 021c 	and.w	r2, r3, #28
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d038      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cd4:	e033      	b.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f003 031c 	and.w	r3, r3, #28
 8002cde:	2208      	movs	r2, #8
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x156>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d025      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 020e 	bic.w	r2, r2, #14
 8002d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	f003 021c 	and.w	r2, r3, #28
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
}
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d56:	e17f      	b.n	8003058 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8171 	beq.w	8003052 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d005      	beq.n	8002d88 <HAL_GPIO_Init+0x40>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d130      	bne.n	8002dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	091b      	lsrs	r3, r3, #4
 8002dd4:	f003 0201 	and.w	r2, r3, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d118      	bne.n	8002e28 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	08db      	lsrs	r3, r3, #3
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	6939      	ldr	r1, [r7, #16]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80ac 	beq.w	8003052 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6613      	str	r3, [r2, #96]	; 0x60
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f12:	4a5a      	ldr	r2, [pc, #360]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x242>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x338>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_GPIO_Init+0x33c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x340>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_GPIO_Init+0x344>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_GPIO_Init+0x348>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_GPIO_Init+0x34c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00c      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e00a      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e008      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e004      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <HAL_GPIO_Init+0x244>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	f002 0203 	and.w	r2, r2, #3
 8002f92:	0092      	lsls	r2, r2, #2
 8002f94:	4093      	lsls	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f9c:	4937      	ldr	r1, [pc, #220]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fce:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <HAL_GPIO_Init+0x350>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_GPIO_Init+0x350>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_GPIO_Init+0x350>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800304c:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_GPIO_Init+0x350>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	3301      	adds	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	f47f ae78 	bne.w	8002d58 <HAL_GPIO_Init+0x10>
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	40010000 	.word	0x40010000
 8003080:	48000400 	.word	0x48000400
 8003084:	48000800 	.word	0x48000800
 8003088:	48000c00 	.word	0x48000c00
 800308c:	48001000 	.word	0x48001000
 8003090:	48001400 	.word	0x48001400
 8003094:	48001800 	.word	0x48001800
 8003098:	40010400 	.word	0x40010400

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f806 	bl	80030fc <HAL_GPIO_EXTI_Callback>
  }
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40010400 	.word	0x40010400

080030fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e08d      	b.n	8003240 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fd febf 	bl	8000ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2224      	movs	r2, #36	; 0x24
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003162:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003172:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d107      	bne.n	800318c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	e006      	b.n	800319a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003198:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d108      	bne.n	80031b4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	e007      	b.n	80031c4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69d9      	ldr	r1, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b20      	cmp	r3, #32
 800325c:	d138      	bne.n	80032d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003268:	2302      	movs	r3, #2
 800326a:	e032      	b.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032de:	b480      	push	{r7}
 80032e0:	b085      	sub	sp, #20
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d139      	bne.n	8003368 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032fe:	2302      	movs	r3, #2
 8003300:	e033      	b.n	800336a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2224      	movs	r2, #36	; 0x24
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003330:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003378:	b08f      	sub	sp, #60	; 0x3c
 800337a:	af0a      	add	r7, sp, #40	; 0x28
 800337c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e116      	b.n	80035b6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd ff76 	bl	8001294 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2203      	movs	r2, #3
 80033ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fe69 	bl	800609e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	687e      	ldr	r6, [r7, #4]
 80033d4:	466d      	mov	r5, sp
 80033d6:	f106 0410 	add.w	r4, r6, #16
 80033da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033ea:	1d33      	adds	r3, r6, #4
 80033ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ee:	6838      	ldr	r0, [r7, #0]
 80033f0:	f002 fe29 	bl	8006046 <USB_CoreInit>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e0d7      	b.n	80035b6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f002 fe57 	bl	80060c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e04a      	b.n	80034ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	333d      	adds	r3, #61	; 0x3d
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	333c      	adds	r3, #60	; 0x3c
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	b298      	uxth	r0, r3
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3356      	adds	r3, #86	; 0x56
 8003454:	4602      	mov	r2, r0
 8003456:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3340      	adds	r3, #64	; 0x40
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	3344      	adds	r3, #68	; 0x44
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3348      	adds	r3, #72	; 0x48
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	334c      	adds	r3, #76	; 0x4c
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	3301      	adds	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3af      	bcc.n	8003418 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e044      	b.n	8003548 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	3301      	adds	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	429a      	cmp	r2, r3
 8003550:	d3b5      	bcc.n	80034be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	687e      	ldr	r6, [r7, #4]
 800355a:	466d      	mov	r5, sp
 800355c:	f106 0410 	add.w	r4, r6, #16
 8003560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003568:	e894 0003 	ldmia.w	r4, {r0, r1}
 800356c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003570:	1d33      	adds	r3, r6, #4
 8003572:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003574:	6838      	ldr	r0, [r7, #0]
 8003576:	f002 fdef 	bl	8006158 <USB_DevInit>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e014      	b.n	80035b6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d102      	bne.n	80035aa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f80a 	bl	80035be <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 ff91 	bl	80064d6 <USB_DevDisconnect>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f0:	f043 0303 	orr.w	r3, r3, #3
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_PWREx_GetVoltageRange+0x18>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40007000 	.word	0x40007000

08003644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003652:	d130      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003654:	4b23      	ldr	r3, [pc, #140]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d038      	beq.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800366a:	4a1e      	ldr	r2, [pc, #120]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003670:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2232      	movs	r2, #50	; 0x32
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0c9b      	lsrs	r3, r3, #18
 8003684:	3301      	adds	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003688:	e002      	b.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3b01      	subs	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369c:	d102      	bne.n	80036a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f2      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d110      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e00f      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d007      	beq.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036cc:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40007000 	.word	0x40007000
 80036e8:	20000000 	.word	0x20000000
 80036ec:	431bde83 	.word	0x431bde83

080036f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_PWREx_EnableVddUSB+0x1c>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <HAL_PWREx_EnableVddUSB+0x1c>)
 80036fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036fe:	6053      	str	r3, [r2, #4]
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000

08003710 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7fd ff3e 	bl	8001598 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e063      	b.n	80037f0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd fc1b 	bl	8000f78 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003742:	f241 3188 	movw	r1, #5000	; 0x1388
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f858 	bl	80037fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	3b01      	subs	r3, #1
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	2120      	movs	r1, #32
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f850 	bl	8003818 <QSPI_WaitFlagStateUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800377c:	7afb      	ldrb	r3, [r7, #11]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d131      	bne.n	80037e6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800378c:	f023 0310 	bic.w	r3, r3, #16
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6852      	ldr	r2, [r2, #4]
 8003794:	0611      	lsls	r1, r2, #24
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_QSPI_Init+0xe8>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6912      	ldr	r2, [r2, #16]
 80037b2:	0411      	lsls	r1, r2, #16
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6952      	ldr	r2, [r2, #20]
 80037b8:	4311      	orrs	r1, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6992      	ldr	r2, [r2, #24]
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80037ee:	7afb      	ldrb	r3, [r7, #11]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	ffe0f8fe 	.word	0xffe0f8fe

080037fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003828:	e01a      	b.n	8003860 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003830:	d016      	beq.n	8003860 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fd feb1 	bl	8001598 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2204      	movs	r2, #4
 800384c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e00e      	b.n	800387e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d1d6      	bne.n	800382a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e3ca      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800389a:	4b97      	ldr	r3, [pc, #604]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a4:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80e4 	beq.w	8003a84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_RCC_OscConfig+0x4a>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b0c      	cmp	r3, #12
 80038c6:	f040 808b 	bne.w	80039e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 8087 	bne.w	80039e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_RCC_OscConfig+0x62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e3a2      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	4b82      	ldr	r3, [pc, #520]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <HAL_RCC_OscConfig+0x7c>
 80038fa:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003902:	e005      	b.n	8003910 <HAL_RCC_OscConfig+0x88>
 8003904:	4b7c      	ldr	r3, [pc, #496]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003910:	4293      	cmp	r3, r2
 8003912:	d223      	bcs.n	800395c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fd55 	bl	80043c8 <RCC_SetFlashLatencyFromMSIRange>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e383      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003928:	4b73      	ldr	r3, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a72      	ldr	r2, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b70      	ldr	r3, [pc, #448]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	496d      	ldr	r1, [pc, #436]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003946:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	4968      	ldr	r1, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
 800395a:	e025      	b.n	80039a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800395c:	4b66      	ldr	r3, [pc, #408]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003962:	f043 0308 	orr.w	r3, r3, #8
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4960      	ldr	r1, [pc, #384]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800397a:	4b5f      	ldr	r3, [pc, #380]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	495b      	ldr	r1, [pc, #364]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fd15 	bl	80043c8 <RCC_SetFlashLatencyFromMSIRange>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e343      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a8:	f000 fc4a 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b52      	ldr	r3, [pc, #328]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	4950      	ldr	r1, [pc, #320]	; (8003afc <HAL_RCC_OscConfig+0x274>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	4a4e      	ldr	r2, [pc, #312]	; (8003b00 <HAL_RCC_OscConfig+0x278>)
 80039c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039c8:	4b4e      	ldr	r3, [pc, #312]	; (8003b04 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fd93 	bl	80014f8 <HAL_InitTick>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d052      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	e327      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d032      	beq.n	8003a4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e8:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a42      	ldr	r2, [pc, #264]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039f4:	f7fd fdd0 	bl	8001598 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fc:	f7fd fdcc 	bl	8001598 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e310      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a0e:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a36      	ldr	r2, [pc, #216]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4931      	ldr	r1, [pc, #196]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a38:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	492c      	ldr	r1, [pc, #176]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	e01a      	b.n	8003a84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a4e:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fd9d 	bl	8001598 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a62:	f7fd fd99 	bl	8001598 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e2dd      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f0      	bne.n	8003a62 <HAL_RCC_OscConfig+0x1da>
 8003a80:	e000      	b.n	8003a84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d074      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x21a>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d10e      	bne.n	8003aba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d10b      	bne.n	8003aba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d064      	beq.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d160      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e2ba      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac2:	d106      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x24a>
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	e026      	b.n	8003b20 <HAL_RCC_OscConfig+0x298>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ada:	d115      	bne.n	8003b08 <HAL_RCC_OscConfig+0x280>
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a05      	ldr	r2, [pc, #20]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a02      	ldr	r2, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0x270>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e014      	b.n	8003b20 <HAL_RCC_OscConfig+0x298>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800660c 	.word	0x0800660c
 8003b00:	20000000 	.word	0x20000000
 8003b04:	20000004 	.word	0x20000004
 8003b08:	4ba0      	ldr	r3, [pc, #640]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a9f      	ldr	r2, [pc, #636]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b9d      	ldr	r3, [pc, #628]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a9c      	ldr	r2, [pc, #624]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd fd36 	bl	8001598 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd fd32 	bl	8001598 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e276      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	4b92      	ldr	r3, [pc, #584]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x2a8>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd fd22 	bl	8001598 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fd1e 	bl	8001598 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e262      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6a:	4b88      	ldr	r3, [pc, #544]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x2d0>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d060      	beq.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_OscConfig+0x310>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	d119      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d116      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b98:	4b7c      	ldr	r3, [pc, #496]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x328>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e23f      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb0:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	061b      	lsls	r3, r3, #24
 8003bbe:	4973      	ldr	r1, [pc, #460]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc4:	e040      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d023      	beq.n	8003c16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bce:	4b6f      	ldr	r3, [pc, #444]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6e      	ldr	r2, [pc, #440]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fd fcdd 	bl	8001598 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fd fcd9 	bl	8001598 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e21d      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf4:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b62      	ldr	r3, [pc, #392]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	495f      	ldr	r1, [pc, #380]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
 8003c14:	e018      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b5d      	ldr	r3, [pc, #372]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5c      	ldr	r2, [pc, #368]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fd fcb9 	bl	8001598 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2a:	f7fd fcb5 	bl	8001598 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e1f9      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d03c      	beq.n	8003cce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01c      	beq.n	8003c96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5c:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fc94 	bl	8001598 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fd fc90 	bl	8001598 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1d4      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <HAL_RCC_OscConfig+0x3ec>
 8003c94:	e01b      	b.n	8003cce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c96:	4b3d      	ldr	r3, [pc, #244]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9c:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca6:	f7fd fc77 	bl	8001598 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cae:	f7fd fc73 	bl	8001598 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1b7      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ef      	bne.n	8003cae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 80a6 	beq.w	8003e28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d14:	4b1e      	ldr	r3, [pc, #120]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d20:	f7fd fc3a 	bl	8001598 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d28:	f7fd fc36 	bl	8001598 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e17a      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_RCC_OscConfig+0x508>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCC_OscConfig+0x4d8>
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d5e:	e029      	b.n	8003db4 <HAL_RCC_OscConfig+0x52c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b05      	cmp	r3, #5
 8003d66:	d115      	bne.n	8003d94 <HAL_RCC_OscConfig+0x50c>
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7e:	4a03      	ldr	r2, [pc, #12]	; (8003d8c <HAL_RCC_OscConfig+0x504>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d88:	e014      	b.n	8003db4 <HAL_RCC_OscConfig+0x52c>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	4b9c      	ldr	r3, [pc, #624]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	4a9b      	ldr	r2, [pc, #620]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003da4:	4b98      	ldr	r3, [pc, #608]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	4a97      	ldr	r2, [pc, #604]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003dac:	f023 0304 	bic.w	r3, r3, #4
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d016      	beq.n	8003dea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd fbec 	bl	8001598 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fbe8 	bl	8001598 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e12a      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dda:	4b8b      	ldr	r3, [pc, #556]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ed      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x53c>
 8003de8:	e015      	b.n	8003e16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fd fbd5 	bl	8001598 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fd fbd1 	bl	8001598 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e113      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e08:	4b7f      	ldr	r3, [pc, #508]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1ed      	bne.n	8003df2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1c:	4b7a      	ldr	r3, [pc, #488]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a79      	ldr	r2, [pc, #484]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80fe 	beq.w	800402e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	f040 80d0 	bne.w	8003fdc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e3c:	4b72      	ldr	r3, [pc, #456]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0203 	and.w	r2, r3, #3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d130      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d127      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11f      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e7c:	2a07      	cmp	r2, #7
 8003e7e:	bf14      	ite	ne
 8003e80:	2201      	movne	r2, #1
 8003e82:	2200      	moveq	r2, #0
 8003e84:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d113      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	3b01      	subs	r3, #1
 8003e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d06e      	beq.n	8003f90 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d069      	beq.n	8003f8c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d105      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ec4:	4b50      	ldr	r3, [pc, #320]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0ad      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b4c      	ldr	r3, [pc, #304]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a4b      	ldr	r2, [pc, #300]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ede:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ee0:	f7fd fb5a 	bl	8001598 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd fb56 	bl	8001598 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e09a      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efa:	4b43      	ldr	r3, [pc, #268]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f06:	4b40      	ldr	r3, [pc, #256]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <HAL_RCC_OscConfig+0x784>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f16:	3a01      	subs	r2, #1
 8003f18:	0112      	lsls	r2, r2, #4
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f20:	0212      	lsls	r2, r2, #8
 8003f22:	4311      	orrs	r1, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f28:	0852      	lsrs	r2, r2, #1
 8003f2a:	3a01      	subs	r2, #1
 8003f2c:	0552      	lsls	r2, r2, #21
 8003f2e:	4311      	orrs	r1, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f34:	0852      	lsrs	r2, r2, #1
 8003f36:	3a01      	subs	r2, #1
 8003f38:	0652      	lsls	r2, r2, #25
 8003f3a:	4311      	orrs	r1, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f40:	0912      	lsrs	r2, r2, #4
 8003f42:	0452      	lsls	r2, r2, #17
 8003f44:	430a      	orrs	r2, r1
 8003f46:	4930      	ldr	r1, [pc, #192]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f4c:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2d      	ldr	r2, [pc, #180]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f58:	4b2b      	ldr	r3, [pc, #172]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f64:	f7fd fb18 	bl	8001598 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fd fb14 	bl	8001598 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e058      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f8a:	e050      	b.n	800402e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e04f      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f90:	4b1d      	ldr	r3, [pc, #116]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d148      	bne.n	800402e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a16      	ldr	r2, [pc, #88]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fb4:	f7fd faf0 	bl	8001598 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd faec 	bl	8001598 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e030      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x734>
 8003fda:	e028      	b.n	800402e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d023      	beq.n	800402a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a08      	ldr	r2, [pc, #32]	; (8004008 <HAL_RCC_OscConfig+0x780>)
 8003fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd fad3 	bl	8001598 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff4:	e00c      	b.n	8004010 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd facf 	bl	8001598 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d905      	bls.n	8004010 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e013      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
 8004008:	40021000 	.word	0x40021000
 800400c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <HAL_RCC_OscConfig+0x7b0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ec      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_OscConfig+0x7b0>)
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	4905      	ldr	r1, [pc, #20]	; (8004038 <HAL_RCC_OscConfig+0x7b0>)
 8004022:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_RCC_OscConfig+0x7b4>)
 8004024:	4013      	ands	r3, r2
 8004026:	60cb      	str	r3, [r1, #12]
 8004028:	e001      	b.n	800402e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	feeefffc 	.word	0xfeeefffc

08004040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0e7      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004054:	4b75      	ldr	r3, [pc, #468]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d910      	bls.n	8004084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b72      	ldr	r3, [pc, #456]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 0207 	bic.w	r2, r3, #7
 800406a:	4970      	ldr	r1, [pc, #448]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b6e      	ldr	r3, [pc, #440]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0cf      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	4b66      	ldr	r3, [pc, #408]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409c:	429a      	cmp	r2, r3
 800409e:	d908      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4960      	ldr	r1, [pc, #384]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d04c      	beq.n	8004158 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c6:	4b5a      	ldr	r3, [pc, #360]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d121      	bne.n	8004116 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0a6      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040de:	4b54      	ldr	r3, [pc, #336]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d115      	bne.n	8004116 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e09a      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040f6:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e08e      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004106:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e086      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004116:	4b46      	ldr	r3, [pc, #280]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4943      	ldr	r1, [pc, #268]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004128:	f7fd fa36 	bl	8001598 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	e00a      	b.n	8004146 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f7fd fa32 	bl	8001598 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	; 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e06e      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	4b3a      	ldr	r3, [pc, #232]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 020c 	and.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	429a      	cmp	r2, r3
 8004156:	d1eb      	bne.n	8004130 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004170:	429a      	cmp	r2, r3
 8004172:	d208      	bcs.n	8004186 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	492b      	ldr	r1, [pc, #172]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d210      	bcs.n	80041b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 0207 	bic.w	r2, r3, #7
 800419c:	4923      	ldr	r1, [pc, #140]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a4:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_RCC_ClockConfig+0x1ec>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e036      	b.n	8004224 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c2:	4b1b      	ldr	r3, [pc, #108]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4918      	ldr	r1, [pc, #96]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041e0:	4b13      	ldr	r3, [pc, #76]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4910      	ldr	r1, [pc, #64]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041f4:	f000 f824 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041f8:	4602      	mov	r2, r0
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	490b      	ldr	r1, [pc, #44]	; (8004234 <HAL_RCC_ClockConfig+0x1f4>)
 8004206:	5ccb      	ldrb	r3, [r1, r3]
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	4a09      	ldr	r2, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1f8>)
 8004212:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1fc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7fd f96d 	bl	80014f8 <HAL_InitTick>
 800421e:	4603      	mov	r3, r0
 8004220:	72fb      	strb	r3, [r7, #11]

  return status;
 8004222:	7afb      	ldrb	r3, [r7, #11]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40022000 	.word	0x40022000
 8004230:	40021000 	.word	0x40021000
 8004234:	0800660c 	.word	0x0800660c
 8004238:	20000000 	.word	0x20000000
 800423c:	20000004 	.word	0x20000004

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	2300      	movs	r3, #0
 800424c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800424e:	4b3e      	ldr	r3, [pc, #248]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004258:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x34>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d121      	bne.n	80042b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d11e      	bne.n	80042b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004274:	4b34      	ldr	r3, [pc, #208]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e005      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004290:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <HAL_RCC_GetSysClockFreq+0x10c>)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d102      	bne.n	80042be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_RCC_GetSysClockFreq+0x110>)
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e004      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042c4:	4b23      	ldr	r3, [pc, #140]	; (8004354 <HAL_RCC_GetSysClockFreq+0x114>)
 80042c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d134      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ce:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d003      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d003      	beq.n	80042ec <HAL_RCC_GetSysClockFreq+0xac>
 80042e4:	e005      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_GetSysClockFreq+0x110>)
 80042e8:	617b      	str	r3, [r7, #20]
      break;
 80042ea:	e005      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_GetSysClockFreq+0x114>)
 80042ee:	617b      	str	r3, [r7, #20]
      break;
 80042f0:	e002      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	617b      	str	r3, [r7, #20]
      break;
 80042f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	3301      	adds	r3, #1
 8004304:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	fb03 f202 	mul.w	r2, r3, r2
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCC_GetSysClockFreq+0x108>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	0e5b      	lsrs	r3, r3, #25
 8004324:	f003 0303 	and.w	r3, r3, #3
 8004328:	3301      	adds	r3, #1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004338:	69bb      	ldr	r3, [r7, #24]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	08006624 	.word	0x08006624
 8004350:	00f42400 	.word	0x00f42400
 8004354:	007a1200 	.word	0x007a1200

08004358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <HAL_RCC_GetHCLKFreq+0x14>)
 800435e:	681b      	ldr	r3, [r3, #0]
}
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	20000000 	.word	0x20000000

08004370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004374:	f7ff fff0 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4904      	ldr	r1, [pc, #16]	; (8004398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	0800661c 	.word	0x0800661c

0800439c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043a0:	f7ff ffda 	bl	8004358 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0adb      	lsrs	r3, r3, #11
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	0800661c 	.word	0x0800661c

080043c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043e0:	f7ff f922 	bl	8003628 <HAL_PWREx_GetVoltageRange>
 80043e4:	6178      	str	r0, [r7, #20]
 80043e6:	e014      	b.n	8004412 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f2:	6593      	str	r3, [r2, #88]	; 0x58
 80043f4:	4b22      	ldr	r3, [pc, #136]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004400:	f7ff f912 	bl	8003628 <HAL_PWREx_GetVoltageRange>
 8004404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d10b      	bne.n	8004432 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d919      	bls.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2ba0      	cmp	r3, #160	; 0xa0
 8004424:	d902      	bls.n	800442c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004426:	2302      	movs	r3, #2
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e013      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800442c:	2301      	movs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	e010      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d902      	bls.n	800443e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004438:	2303      	movs	r3, #3
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	e00a      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d102      	bne.n	800444a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004444:	2302      	movs	r3, #2
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	e004      	b.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b70      	cmp	r3, #112	; 0x70
 800444e:	d101      	bne.n	8004454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004450:	2301      	movs	r3, #1
 8004452:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f023 0207 	bic.w	r2, r3, #7
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	40022000 	.word	0x40022000

08004488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004490:	2300      	movs	r3, #0
 8004492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004494:	2300      	movs	r3, #0
 8004496:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d041      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044ac:	d02a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80044b2:	d824      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044b8:	d008      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044be:	d81e      	bhi.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044c8:	d010      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044ca:	e018      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044cc:	4b86      	ldr	r3, [pc, #536]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a85      	ldr	r2, [pc, #532]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d8:	e015      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 facb 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044ea:	e00c      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3320      	adds	r3, #32
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fbb6 	bl	8004c64 <RCCEx_PLLSAI2_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044fc:	e003      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	74fb      	strb	r3, [r7, #19]
      break;
 8004502:	e000      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800450c:	4b76      	ldr	r3, [pc, #472]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	4973      	ldr	r1, [pc, #460]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004522:	e001      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d041      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004538:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800453c:	d02a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800453e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004542:	d824      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004548:	d008      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800454a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800454e:	d81e      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004558:	d010      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800455a:	e018      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800455c:	4b62      	ldr	r3, [pc, #392]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a61      	ldr	r2, [pc, #388]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004566:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004568:	e015      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa83 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800457a:	e00c      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3320      	adds	r3, #32
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb6e 	bl	8004c64 <RCCEx_PLLSAI2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	74fb      	strb	r3, [r7, #19]
      break;
 8004592:	e000      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800459c:	4b52      	ldr	r3, [pc, #328]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045aa:	494f      	ldr	r1, [pc, #316]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045b2:	e001      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a0 	beq.w	8004706 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e0:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	6593      	str	r3, [r2, #88]	; 0x58
 80045ec:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f8:	2301      	movs	r3, #1
 80045fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a3a      	ldr	r2, [pc, #232]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004608:	f7fc ffc6 	bl	8001598 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800460e:	e009      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fc ffc2 	bl	8001598 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d902      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	74fb      	strb	r3, [r7, #19]
        break;
 8004622:	e005      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004624:	4b31      	ldr	r3, [pc, #196]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ef      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004630:	7cfb      	ldrb	r3, [r7, #19]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d15c      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004640:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	d019      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004654:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800465a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004660:	4b21      	ldr	r3, [pc, #132]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004680:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004692:	f7fc ff81 	bl	8001598 <HAL_GetTick>
 8004696:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004698:	e00b      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fc ff7d 	bl	8001598 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d902      	bls.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	74fb      	strb	r3, [r7, #19]
            break;
 80046b0:	e006      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ec      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046c0:	7cfb      	ldrb	r3, [r7, #19]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d6:	4904      	ldr	r1, [pc, #16]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046de:	e009      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
 80046e4:	e006      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f4:	7c7b      	ldrb	r3, [r7, #17]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d105      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fa:	4b9e      	ldr	r3, [pc, #632]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fe:	4a9d      	ldr	r2, [pc, #628]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004704:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004712:	4b98      	ldr	r3, [pc, #608]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 0203 	bic.w	r2, r3, #3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	4994      	ldr	r1, [pc, #592]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004734:	4b8f      	ldr	r3, [pc, #572]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 020c 	bic.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	498c      	ldr	r1, [pc, #560]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004756:	4b87      	ldr	r3, [pc, #540]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	4983      	ldr	r1, [pc, #524]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004778:	4b7e      	ldr	r3, [pc, #504]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	497b      	ldr	r1, [pc, #492]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800479a:	4b76      	ldr	r3, [pc, #472]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	4972      	ldr	r1, [pc, #456]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047bc:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	496a      	ldr	r1, [pc, #424]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047de:	4b65      	ldr	r3, [pc, #404]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	4961      	ldr	r1, [pc, #388]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004800:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480e:	4959      	ldr	r1, [pc, #356]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004822:	4b54      	ldr	r3, [pc, #336]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004830:	4950      	ldr	r1, [pc, #320]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004844:	4b4b      	ldr	r3, [pc, #300]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	4948      	ldr	r1, [pc, #288]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004866:	4b43      	ldr	r3, [pc, #268]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004874:	493f      	ldr	r1, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d028      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004888:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004896:	4937      	ldr	r1, [pc, #220]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a6:	d106      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a31      	ldr	r2, [pc, #196]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048b2:	60d3      	str	r3, [r2, #12]
 80048b4:	e011      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048be:	d10c      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f8d8 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d028      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048e6:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f4:	491f      	ldr	r1, [pc, #124]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004904:	d106      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004906:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004910:	60d3      	str	r3, [r2, #12]
 8004912:	e011      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800491c:	d10c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3304      	adds	r3, #4
 8004922:	2101      	movs	r1, #1
 8004924:	4618      	mov	r0, r3
 8004926:	f000 f8a9 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02b      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	4908      	ldr	r1, [pc, #32]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004962:	d109      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a02      	ldr	r2, [pc, #8]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496e:	60d3      	str	r3, [r2, #12]
 8004970:	e014      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004980:	d10c      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	2101      	movs	r1, #1
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f877 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d02f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a8:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b6:	4928      	ldr	r1, [pc, #160]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c6:	d10d      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f854 	bl	8004a7c <RCCEx_PLLSAI1_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d014      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049de:	7cfb      	ldrb	r3, [r7, #19]
 80049e0:	74bb      	strb	r3, [r7, #18]
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3320      	adds	r3, #32
 80049f2:	2102      	movs	r1, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f935 	bl	8004c64 <RCCEx_PLLSAI2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a14:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a22:	490d      	ldr	r1, [pc, #52]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a46:	4904      	ldr	r1, [pc, #16]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40021000 	.word	0x40021000

08004a5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6013      	str	r3, [r2, #0]
}
 8004a6c:	bf00      	nop
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000

08004a7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8a:	4b75      	ldr	r3, [pc, #468]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a96:	4b72      	ldr	r3, [pc, #456]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f003 0203 	and.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d10d      	bne.n	8004ac2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004aae:	4b6c      	ldr	r3, [pc, #432]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
       ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d047      	beq.n	8004b52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
 8004ac6:	e044      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d018      	beq.n	8004b02 <RCCEx_PLLSAI1_Config+0x86>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d825      	bhi.n	8004b20 <RCCEx_PLLSAI1_Config+0xa4>
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <RCCEx_PLLSAI1_Config+0x62>
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d009      	beq.n	8004af0 <RCCEx_PLLSAI1_Config+0x74>
 8004adc:	e020      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ade:	4b60      	ldr	r3, [pc, #384]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11d      	bne.n	8004b26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aee:	e01a      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af0:	4b5b      	ldr	r3, [pc, #364]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d116      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b00:	e013      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b02:	4b57      	ldr	r3, [pc, #348]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b0e:	4b54      	ldr	r3, [pc, #336]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      break;
 8004b24:	e004      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b36:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	4944      	ldr	r1, [pc, #272]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d17d      	bne.n	8004c54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b58:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a40      	ldr	r2, [pc, #256]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fc fd18 	bl	8001598 <HAL_GetTick>
 8004b68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b6a:	e009      	b.n	8004b80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b6c:	f7fc fd14 	bl	8001598 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d902      	bls.n	8004b80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b7e:	e005      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b80:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ef      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d160      	bne.n	8004c54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d111      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6892      	ldr	r2, [r2, #8]
 8004ba8:	0211      	lsls	r1, r2, #8
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68d2      	ldr	r2, [r2, #12]
 8004bae:	0912      	lsrs	r2, r2, #4
 8004bb0:	0452      	lsls	r2, r2, #17
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	492a      	ldr	r1, [pc, #168]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
 8004bba:	e027      	b.n	8004c0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d112      	bne.n	8004be8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc2:	4b27      	ldr	r3, [pc, #156]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6892      	ldr	r2, [r2, #8]
 8004bd2:	0211      	lsls	r1, r2, #8
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6912      	ldr	r2, [r2, #16]
 8004bd8:	0852      	lsrs	r2, r2, #1
 8004bda:	3a01      	subs	r2, #1
 8004bdc:	0552      	lsls	r2, r2, #21
 8004bde:	430a      	orrs	r2, r1
 8004be0:	491f      	ldr	r1, [pc, #124]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	610b      	str	r3, [r1, #16]
 8004be6:	e011      	b.n	8004c0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6892      	ldr	r2, [r2, #8]
 8004bf8:	0211      	lsls	r1, r2, #8
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6952      	ldr	r2, [r2, #20]
 8004bfe:	0852      	lsrs	r2, r2, #1
 8004c00:	3a01      	subs	r2, #1
 8004c02:	0652      	lsls	r2, r2, #25
 8004c04:	430a      	orrs	r2, r1
 8004c06:	4916      	ldr	r1, [pc, #88]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fc fcbe 	bl	8001598 <HAL_GetTick>
 8004c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c1e:	e009      	b.n	8004c34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c20:	f7fc fcba 	bl	8001598 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d902      	bls.n	8004c34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	73fb      	strb	r3, [r7, #15]
          break;
 8004c32:	e005      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ef      	beq.n	8004c20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	4904      	ldr	r1, [pc, #16]	; (8004c60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000

08004c64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c72:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c7e:	4b67      	ldr	r3, [pc, #412]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0203 	and.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d10d      	bne.n	8004caa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
       ||
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c96:	4b61      	ldr	r3, [pc, #388]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d047      	beq.n	8004d3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e044      	b.n	8004d3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d018      	beq.n	8004cea <RCCEx_PLLSAI2_Config+0x86>
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d825      	bhi.n	8004d08 <RCCEx_PLLSAI2_Config+0xa4>
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d002      	beq.n	8004cc6 <RCCEx_PLLSAI2_Config+0x62>
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d009      	beq.n	8004cd8 <RCCEx_PLLSAI2_Config+0x74>
 8004cc4:	e020      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cc6:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d11d      	bne.n	8004d0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd6:	e01a      	b.n	8004d0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cd8:	4b50      	ldr	r3, [pc, #320]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d116      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce8:	e013      	b.n	8004d12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cea:	4b4c      	ldr	r3, [pc, #304]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10f      	bne.n	8004d16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cf6:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d06:	e006      	b.n	8004d16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0c:	e004      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d0e:	bf00      	nop
 8004d10:	e002      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	430b      	orrs	r3, r1
 8004d34:	4939      	ldr	r1, [pc, #228]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d167      	bne.n	8004e10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d40:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a35      	ldr	r2, [pc, #212]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fc fc24 	bl	8001598 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d54:	f7fc fc20 	bl	8001598 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
        break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d68:	4b2c      	ldr	r3, [pc, #176]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ef      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d14a      	bne.n	8004e10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d111      	bne.n	8004da4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d80:	4b26      	ldr	r3, [pc, #152]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6892      	ldr	r2, [r2, #8]
 8004d90:	0211      	lsls	r1, r2, #8
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68d2      	ldr	r2, [r2, #12]
 8004d96:	0912      	lsrs	r2, r2, #4
 8004d98:	0452      	lsls	r2, r2, #17
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	491f      	ldr	r1, [pc, #124]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	614b      	str	r3, [r1, #20]
 8004da2:	e011      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6892      	ldr	r2, [r2, #8]
 8004db4:	0211      	lsls	r1, r2, #8
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6912      	ldr	r2, [r2, #16]
 8004dba:	0852      	lsrs	r2, r2, #1
 8004dbc:	3a01      	subs	r2, #1
 8004dbe:	0652      	lsls	r2, r2, #25
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	4916      	ldr	r1, [pc, #88]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fc fbe0 	bl	8001598 <HAL_GetTick>
 8004dd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dda:	e009      	b.n	8004df0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ddc:	f7fc fbdc 	bl	8001598 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	73fb      	strb	r3, [r7, #15]
          break;
 8004dee:	e005      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ef      	beq.n	8004ddc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4904      	ldr	r1, [pc, #16]	; (8004e1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e095      	b.n	8004f5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e42:	d009      	beq.n	8004e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	61da      	str	r2, [r3, #28]
 8004e4a:	e005      	b.n	8004e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc f8c4 	bl	8001000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e98:	d902      	bls.n	8004ea0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e002      	b.n	8004ea6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004eae:	d007      	beq.n	8004ec0 <HAL_SPI_Init+0xa0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	ea42 0103 	orr.w	r1, r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	0c1b      	lsrs	r3, r3, #16
 8004f1c:	f003 0204 	and.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	431a      	orrs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f3c:	ea42 0103 	orr.w	r1, r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e040      	b.n	8004ffa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fc f87d 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2224      	movs	r2, #36	; 0x24
 8004f92:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fdeb 	bl	8005b88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fb30 	bl	8005618 <UART_SetConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e01b      	b.n	8004ffa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fe0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fe6a 	bl	8005ccc <UART_CheckIdleState>
 8004ff8:	4603      	mov	r3, r0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
	...

08005004 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b0ba      	sub	sp, #232	; 0xe8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800502a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800502e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005032:	4013      	ands	r3, r2
 8005034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005038:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d115      	bne.n	800506c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00f      	beq.n	800506c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800504c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 82ae 	beq.w	80055be <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
      }
      return;
 800506a:	e2a8      	b.n	80055be <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800506c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8117 	beq.w	80052a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005082:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005086:	4b85      	ldr	r3, [pc, #532]	; (800529c <HAL_UART_IRQHandler+0x298>)
 8005088:	4013      	ands	r3, r2
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 810a 	beq.w	80052a4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d011      	beq.n	80050c0 <HAL_UART_IRQHandler+0xbc>
 800509c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00b      	beq.n	80050c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d011      	beq.n	80050f0 <HAL_UART_IRQHandler+0xec>
 80050cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00b      	beq.n	80050f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2202      	movs	r2, #2
 80050de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e6:	f043 0204 	orr.w	r2, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d011      	beq.n	8005120 <HAL_UART_IRQHandler+0x11c>
 80050fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2204      	movs	r2, #4
 800510e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005116:	f043 0202 	orr.w	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d017      	beq.n	800515c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800513c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2208      	movs	r2, #8
 800514a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005152:	f043 0208 	orr.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005164:	2b00      	cmp	r3, #0
 8005166:	d012      	beq.n	800518e <HAL_UART_IRQHandler+0x18a>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800516c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8214 	beq.w	80055c2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d005      	beq.n	80051e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d04f      	beq.n	8005286 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fe7f 	bl	8005eea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d141      	bne.n	800527e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005226:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800522a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800523e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1d9      	bne.n	80051fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524a:	2b00      	cmp	r3, #0
 800524c:	d013      	beq.n	8005276 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <HAL_UART_IRQHandler+0x29c>)
 8005254:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800525a:	4618      	mov	r0, r3
 800525c:	f7fd fc84 	bl	8002b68 <HAL_DMA_Abort_IT>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d017      	beq.n	8005296 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005270:	4610      	mov	r0, r2
 8005272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005274:	e00f      	b.n	8005296 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9b8 	bl	80055ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	e00b      	b.n	8005296 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f9b4 	bl	80055ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	e007      	b.n	8005296 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f9b0 	bl	80055ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005294:	e195      	b.n	80055c2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005296:	bf00      	nop
    return;
 8005298:	e193      	b.n	80055c2 <HAL_UART_IRQHandler+0x5be>
 800529a:	bf00      	nop
 800529c:	04000120 	.word	0x04000120
 80052a0:	08005fb3 	.word	0x08005fb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f040 814e 	bne.w	800554a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8147 	beq.w	800554a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8140 	beq.w	800554a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	f040 80b8 	bne.w	8005452 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8167 	beq.w	80055c6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80052fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005302:	429a      	cmp	r2, r3
 8005304:	f080 815f 	bcs.w	80055c6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800530e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8086 	bne.w	8005430 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005338:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800533c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005340:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800534e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005352:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800535a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005366:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1da      	bne.n	8005324 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800537e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005392:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005396:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800539a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e1      	bne.n	800536e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e3      	bne.n	80053aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005400:	f023 0310 	bic.w	r3, r3, #16
 8005404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005412:	65bb      	str	r3, [r7, #88]	; 0x58
 8005414:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e4      	bne.n	80053f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542a:	4618      	mov	r0, r3
 800542c:	f7fd fb5e 	bl	8002aec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005442:	b29b      	uxth	r3, r3
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	b29b      	uxth	r3, r3
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8d8 	bl	8005600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005450:	e0b9      	b.n	80055c6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800545e:	b29b      	uxth	r3, r3
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80ab 	beq.w	80055ca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 80a6 	beq.w	80055ca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005492:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
 80054a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e4      	bne.n	800547e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3308      	adds	r3, #8
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	623b      	str	r3, [r7, #32]
   return(result);
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054d8:	633a      	str	r2, [r7, #48]	; 0x30
 80054da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e3      	bne.n	80054b4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	60fb      	str	r3, [r7, #12]
   return(result);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0310 	bic.w	r3, r3, #16
 8005514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	69b9      	ldr	r1, [r7, #24]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	617b      	str	r3, [r7, #20]
   return(result);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e4      	bne.n	8005500 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2202      	movs	r2, #2
 800553a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800553c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f85c 	bl	8005600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005548:	e03f      	b.n	80055ca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <HAL_UART_IRQHandler+0x570>
 8005556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d008      	beq.n	8005574 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800556a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fd60 	bl	8006032 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005572:	e02d      	b.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00e      	beq.n	800559e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d01c      	beq.n	80055ce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
    }
    return;
 800559c:	e017      	b.n	80055ce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800559e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d012      	beq.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
 80055aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fd11 	bl	8005fde <UART_EndTransmit_IT>
    return;
 80055bc:	e008      	b.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055be:	bf00      	nop
 80055c0:	e006      	b.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80055c2:	bf00      	nop
 80055c4:	e004      	b.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055c6:	bf00      	nop
 80055c8:	e002      	b.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055ca:	bf00      	nop
 80055cc:	e000      	b.n	80055d0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80055ce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80055d0:	37e8      	adds	r7, #232	; 0xe8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800561c:	b08a      	sub	sp, #40	; 0x28
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	431a      	orrs	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	4313      	orrs	r3, r2
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4ba4      	ldr	r3, [pc, #656]	; (80058d8 <UART_SetConfig+0x2c0>)
 8005648:	4013      	ands	r3, r2
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	6812      	ldr	r2, [r2, #0]
 800564e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005650:	430b      	orrs	r3, r1
 8005652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a99      	ldr	r2, [pc, #612]	; (80058dc <UART_SetConfig+0x2c4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d004      	beq.n	8005684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	4313      	orrs	r3, r2
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005694:	430a      	orrs	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a90      	ldr	r2, [pc, #576]	; (80058e0 <UART_SetConfig+0x2c8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d126      	bne.n	80056f0 <UART_SetConfig+0xd8>
 80056a2:	4b90      	ldr	r3, [pc, #576]	; (80058e4 <UART_SetConfig+0x2cc>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d81b      	bhi.n	80056e8 <UART_SetConfig+0xd0>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0xa0>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e116      	b.n	80058fe <UART_SetConfig+0x2e6>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e112      	b.n	80058fe <UART_SetConfig+0x2e6>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e10e      	b.n	80058fe <UART_SetConfig+0x2e6>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e10a      	b.n	80058fe <UART_SetConfig+0x2e6>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e106      	b.n	80058fe <UART_SetConfig+0x2e6>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a7c      	ldr	r2, [pc, #496]	; (80058e8 <UART_SetConfig+0x2d0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d138      	bne.n	800576c <UART_SetConfig+0x154>
 80056fa:	4b7a      	ldr	r3, [pc, #488]	; (80058e4 <UART_SetConfig+0x2cc>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f003 030c 	and.w	r3, r3, #12
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d82d      	bhi.n	8005764 <UART_SetConfig+0x14c>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0xf8>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005745 	.word	0x08005745
 8005714:	08005765 	.word	0x08005765
 8005718:	08005765 	.word	0x08005765
 800571c:	08005765 	.word	0x08005765
 8005720:	08005755 	.word	0x08005755
 8005724:	08005765 	.word	0x08005765
 8005728:	08005765 	.word	0x08005765
 800572c:	08005765 	.word	0x08005765
 8005730:	0800574d 	.word	0x0800574d
 8005734:	08005765 	.word	0x08005765
 8005738:	08005765 	.word	0x08005765
 800573c:	08005765 	.word	0x08005765
 8005740:	0800575d 	.word	0x0800575d
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574a:	e0d8      	b.n	80058fe <UART_SetConfig+0x2e6>
 800574c:	2302      	movs	r3, #2
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005752:	e0d4      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800575a:	e0d0      	b.n	80058fe <UART_SetConfig+0x2e6>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005762:	e0cc      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576a:	e0c8      	b.n	80058fe <UART_SetConfig+0x2e6>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a5e      	ldr	r2, [pc, #376]	; (80058ec <UART_SetConfig+0x2d4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d125      	bne.n	80057c2 <UART_SetConfig+0x1aa>
 8005776:	4b5b      	ldr	r3, [pc, #364]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005780:	2b30      	cmp	r3, #48	; 0x30
 8005782:	d016      	beq.n	80057b2 <UART_SetConfig+0x19a>
 8005784:	2b30      	cmp	r3, #48	; 0x30
 8005786:	d818      	bhi.n	80057ba <UART_SetConfig+0x1a2>
 8005788:	2b20      	cmp	r3, #32
 800578a:	d00a      	beq.n	80057a2 <UART_SetConfig+0x18a>
 800578c:	2b20      	cmp	r3, #32
 800578e:	d814      	bhi.n	80057ba <UART_SetConfig+0x1a2>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <UART_SetConfig+0x182>
 8005794:	2b10      	cmp	r3, #16
 8005796:	d008      	beq.n	80057aa <UART_SetConfig+0x192>
 8005798:	e00f      	b.n	80057ba <UART_SetConfig+0x1a2>
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a0:	e0ad      	b.n	80058fe <UART_SetConfig+0x2e6>
 80057a2:	2302      	movs	r3, #2
 80057a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a8:	e0a9      	b.n	80058fe <UART_SetConfig+0x2e6>
 80057aa:	2304      	movs	r3, #4
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b0:	e0a5      	b.n	80058fe <UART_SetConfig+0x2e6>
 80057b2:	2308      	movs	r3, #8
 80057b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057b8:	e0a1      	b.n	80058fe <UART_SetConfig+0x2e6>
 80057ba:	2310      	movs	r3, #16
 80057bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057c0:	e09d      	b.n	80058fe <UART_SetConfig+0x2e6>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a4a      	ldr	r2, [pc, #296]	; (80058f0 <UART_SetConfig+0x2d8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d125      	bne.n	8005818 <UART_SetConfig+0x200>
 80057cc:	4b45      	ldr	r3, [pc, #276]	; (80058e4 <UART_SetConfig+0x2cc>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057d6:	2bc0      	cmp	r3, #192	; 0xc0
 80057d8:	d016      	beq.n	8005808 <UART_SetConfig+0x1f0>
 80057da:	2bc0      	cmp	r3, #192	; 0xc0
 80057dc:	d818      	bhi.n	8005810 <UART_SetConfig+0x1f8>
 80057de:	2b80      	cmp	r3, #128	; 0x80
 80057e0:	d00a      	beq.n	80057f8 <UART_SetConfig+0x1e0>
 80057e2:	2b80      	cmp	r3, #128	; 0x80
 80057e4:	d814      	bhi.n	8005810 <UART_SetConfig+0x1f8>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <UART_SetConfig+0x1d8>
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d008      	beq.n	8005800 <UART_SetConfig+0x1e8>
 80057ee:	e00f      	b.n	8005810 <UART_SetConfig+0x1f8>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e082      	b.n	80058fe <UART_SetConfig+0x2e6>
 80057f8:	2302      	movs	r3, #2
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fe:	e07e      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005806:	e07a      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580e:	e076      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005816:	e072      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a35      	ldr	r2, [pc, #212]	; (80058f4 <UART_SetConfig+0x2dc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d12a      	bne.n	8005878 <UART_SetConfig+0x260>
 8005822:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005830:	d01a      	beq.n	8005868 <UART_SetConfig+0x250>
 8005832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005836:	d81b      	bhi.n	8005870 <UART_SetConfig+0x258>
 8005838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800583c:	d00c      	beq.n	8005858 <UART_SetConfig+0x240>
 800583e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005842:	d815      	bhi.n	8005870 <UART_SetConfig+0x258>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <UART_SetConfig+0x238>
 8005848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584c:	d008      	beq.n	8005860 <UART_SetConfig+0x248>
 800584e:	e00f      	b.n	8005870 <UART_SetConfig+0x258>
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e052      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e04e      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e04a      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586e:	e046      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005876:	e042      	b.n	80058fe <UART_SetConfig+0x2e6>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a17      	ldr	r2, [pc, #92]	; (80058dc <UART_SetConfig+0x2c4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d13a      	bne.n	80058f8 <UART_SetConfig+0x2e0>
 8005882:	4b18      	ldr	r3, [pc, #96]	; (80058e4 <UART_SetConfig+0x2cc>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800588c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005890:	d01a      	beq.n	80058c8 <UART_SetConfig+0x2b0>
 8005892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005896:	d81b      	bhi.n	80058d0 <UART_SetConfig+0x2b8>
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589c:	d00c      	beq.n	80058b8 <UART_SetConfig+0x2a0>
 800589e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a2:	d815      	bhi.n	80058d0 <UART_SetConfig+0x2b8>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <UART_SetConfig+0x298>
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d008      	beq.n	80058c0 <UART_SetConfig+0x2a8>
 80058ae:	e00f      	b.n	80058d0 <UART_SetConfig+0x2b8>
 80058b0:	2300      	movs	r3, #0
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b6:	e022      	b.n	80058fe <UART_SetConfig+0x2e6>
 80058b8:	2302      	movs	r3, #2
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058be:	e01e      	b.n	80058fe <UART_SetConfig+0x2e6>
 80058c0:	2304      	movs	r3, #4
 80058c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c6:	e01a      	b.n	80058fe <UART_SetConfig+0x2e6>
 80058c8:	2308      	movs	r3, #8
 80058ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ce:	e016      	b.n	80058fe <UART_SetConfig+0x2e6>
 80058d0:	2310      	movs	r3, #16
 80058d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d6:	e012      	b.n	80058fe <UART_SetConfig+0x2e6>
 80058d8:	efff69f3 	.word	0xefff69f3
 80058dc:	40008000 	.word	0x40008000
 80058e0:	40013800 	.word	0x40013800
 80058e4:	40021000 	.word	0x40021000
 80058e8:	40004400 	.word	0x40004400
 80058ec:	40004800 	.word	0x40004800
 80058f0:	40004c00 	.word	0x40004c00
 80058f4:	40005000 	.word	0x40005000
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a9f      	ldr	r2, [pc, #636]	; (8005b80 <UART_SetConfig+0x568>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d17a      	bne.n	80059fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800590c:	2b08      	cmp	r3, #8
 800590e:	d824      	bhi.n	800595a <UART_SetConfig+0x342>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x300>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800593d 	.word	0x0800593d
 800591c:	0800595b 	.word	0x0800595b
 8005920:	08005945 	.word	0x08005945
 8005924:	0800595b 	.word	0x0800595b
 8005928:	0800594b 	.word	0x0800594b
 800592c:	0800595b 	.word	0x0800595b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800595b 	.word	0x0800595b
 8005938:	08005953 	.word	0x08005953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800593c:	f7fe fd18 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005940:	61f8      	str	r0, [r7, #28]
        break;
 8005942:	e010      	b.n	8005966 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005944:	4b8f      	ldr	r3, [pc, #572]	; (8005b84 <UART_SetConfig+0x56c>)
 8005946:	61fb      	str	r3, [r7, #28]
        break;
 8005948:	e00d      	b.n	8005966 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800594a:	f7fe fc79 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 800594e:	61f8      	str	r0, [r7, #28]
        break;
 8005950:	e009      	b.n	8005966 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005956:	61fb      	str	r3, [r7, #28]
        break;
 8005958:	e005      	b.n	8005966 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005964:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80fb 	beq.w	8005b64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	429a      	cmp	r2, r3
 800597c:	d305      	bcc.n	800598a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	429a      	cmp	r2, r3
 8005988:	d903      	bls.n	8005992 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005990:	e0e8      	b.n	8005b64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2200      	movs	r2, #0
 8005996:	461c      	mov	r4, r3
 8005998:	4615      	mov	r5, r2
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	022b      	lsls	r3, r5, #8
 80059a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80059a8:	0222      	lsls	r2, r4, #8
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	6849      	ldr	r1, [r1, #4]
 80059ae:	0849      	lsrs	r1, r1, #1
 80059b0:	2000      	movs	r0, #0
 80059b2:	4688      	mov	r8, r1
 80059b4:	4681      	mov	r9, r0
 80059b6:	eb12 0a08 	adds.w	sl, r2, r8
 80059ba:	eb43 0b09 	adc.w	fp, r3, r9
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059cc:	4650      	mov	r0, sl
 80059ce:	4659      	mov	r1, fp
 80059d0:	f7fa fbfa 	bl	80001c8 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4613      	mov	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e2:	d308      	bcc.n	80059f6 <UART_SetConfig+0x3de>
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d204      	bcs.n	80059f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	e0b6      	b.n	8005b64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059fc:	e0b2      	b.n	8005b64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a06:	d15e      	bne.n	8005ac6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d828      	bhi.n	8005a62 <UART_SetConfig+0x44a>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0x400>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a63 	.word	0x08005a63
 8005a28:	08005a53 	.word	0x08005a53
 8005a2c:	08005a63 	.word	0x08005a63
 8005a30:	08005a63 	.word	0x08005a63
 8005a34:	08005a63 	.word	0x08005a63
 8005a38:	08005a5b 	.word	0x08005a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a3c:	f7fe fc98 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005a40:	61f8      	str	r0, [r7, #28]
        break;
 8005a42:	e014      	b.n	8005a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a44:	f7fe fcaa 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8005a48:	61f8      	str	r0, [r7, #28]
        break;
 8005a4a:	e010      	b.n	8005a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a4c:	4b4d      	ldr	r3, [pc, #308]	; (8005b84 <UART_SetConfig+0x56c>)
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e00d      	b.n	8005a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a52:	f7fe fbf5 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8005a56:	61f8      	str	r0, [r7, #28]
        break;
 8005a58:	e009      	b.n	8005a6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a5e:	61fb      	str	r3, [r7, #28]
        break;
 8005a60:	e005      	b.n	8005a6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d077      	beq.n	8005b64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	005a      	lsls	r2, r3, #1
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	441a      	add	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	2b0f      	cmp	r3, #15
 8005a8e:	d916      	bls.n	8005abe <UART_SetConfig+0x4a6>
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a96:	d212      	bcs.n	8005abe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f023 030f 	bic.w	r3, r3, #15
 8005aa0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	085b      	lsrs	r3, r3, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	8afb      	ldrh	r3, [r7, #22]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	8afa      	ldrh	r2, [r7, #22]
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	e052      	b.n	8005b64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ac4:	e04e      	b.n	8005b64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d827      	bhi.n	8005b1e <UART_SetConfig+0x506>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x4bc>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005af9 	.word	0x08005af9
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005b09 	.word	0x08005b09
 8005ae0:	08005b1f 	.word	0x08005b1f
 8005ae4:	08005b0f 	.word	0x08005b0f
 8005ae8:	08005b1f 	.word	0x08005b1f
 8005aec:	08005b1f 	.word	0x08005b1f
 8005af0:	08005b1f 	.word	0x08005b1f
 8005af4:	08005b17 	.word	0x08005b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fe fc3a 	bl	8004370 <HAL_RCC_GetPCLK1Freq>
 8005afc:	61f8      	str	r0, [r7, #28]
        break;
 8005afe:	e014      	b.n	8005b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b00:	f7fe fc4c 	bl	800439c <HAL_RCC_GetPCLK2Freq>
 8005b04:	61f8      	str	r0, [r7, #28]
        break;
 8005b06:	e010      	b.n	8005b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <UART_SetConfig+0x56c>)
 8005b0a:	61fb      	str	r3, [r7, #28]
        break;
 8005b0c:	e00d      	b.n	8005b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b0e:	f7fe fb97 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8005b12:	61f8      	str	r0, [r7, #28]
        break;
 8005b14:	e009      	b.n	8005b2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1a:	61fb      	str	r3, [r7, #28]
        break;
 8005b1c:	e005      	b.n	8005b2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b28:	bf00      	nop
    }

    if (pclk != 0U)
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	085a      	lsrs	r2, r3, #1
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	441a      	add	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b0f      	cmp	r3, #15
 8005b48:	d909      	bls.n	8005b5e <UART_SetConfig+0x546>
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b50:	d205      	bcs.n	8005b5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	e002      	b.n	8005b64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3728      	adds	r7, #40	; 0x28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7e:	bf00      	nop
 8005b80:	40008000 	.word	0x40008000
 8005b84:	00f42400 	.word	0x00f42400

08005b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01a      	beq.n	8005c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c86:	d10a      	bne.n	8005c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b098      	sub	sp, #96	; 0x60
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cdc:	f7fb fc5c 	bl	8001598 <HAL_GetTick>
 8005ce0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d12e      	bne.n	8005d4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f88c 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d28:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e6      	bne.n	8005d0a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e062      	b.n	8005e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d149      	bne.n	8005df0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d64:	2200      	movs	r2, #0
 8005d66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f856 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d03c      	beq.n	8005df0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	623b      	str	r3, [r7, #32]
   return(result);
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d94:	633b      	str	r3, [r7, #48]	; 0x30
 8005d96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc8:	61fa      	str	r2, [r7, #28]
 8005dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e5      	bne.n	8005da8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e011      	b.n	8005e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3758      	adds	r7, #88	; 0x58
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2c:	e049      	b.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e34:	d045      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7fb fbaf 	bl	8001598 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e048      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d031      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d110      	bne.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2208      	movs	r2, #8
 8005e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f838 	bl	8005eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e029      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9c:	d111      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f81e 	bl	8005eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e00f      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d0a6      	beq.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b095      	sub	sp, #84	; 0x54
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f10:	643b      	str	r3, [r7, #64]	; 0x40
 8005f12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f18:	e841 2300 	strex	r3, r2, [r1]
 8005f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1e6      	bne.n	8005ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	3308      	adds	r3, #8
 8005f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	6a3b      	ldr	r3, [r7, #32]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e5      	bne.n	8005f24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d118      	bne.n	8005f92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f023 0310 	bic.w	r3, r3, #16
 8005f74:	647b      	str	r3, [r7, #68]	; 0x44
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6979      	ldr	r1, [r7, #20]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e6      	bne.n	8005f60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fa6:	bf00      	nop
 8005fa8:	3754      	adds	r7, #84	; 0x54
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff fb0b 	bl	80055ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b088      	sub	sp, #32
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6979      	ldr	r1, [r7, #20]
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	613b      	str	r3, [r7, #16]
   return(result);
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e6      	bne.n	8005fe6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fad7 	bl	80055d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800602a:	bf00      	nop
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006046:	b084      	sub	sp, #16
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	f107 001c 	add.w	r0, r7, #28
 8006054:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa65 	bl	8006534 <USB_CoreReset>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800606e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
 8006080:	e005      	b.n	800608e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800609a:	b004      	add	sp, #16
 800609c:	4770      	bx	lr

0800609e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f023 0201 	bic.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d115      	bne.n	800610e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060ee:	2001      	movs	r0, #1
 80060f0:	f7fb fa5e 	bl	80015b0 <HAL_Delay>
      ms++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa0c 	bl	8006518 <USB_GetMode>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d01e      	beq.n	8006144 <USB_SetCurrentMode+0x84>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b31      	cmp	r3, #49	; 0x31
 800610a:	d9f0      	bls.n	80060ee <USB_SetCurrentMode+0x2e>
 800610c:	e01a      	b.n	8006144 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d115      	bne.n	8006140 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006120:	2001      	movs	r0, #1
 8006122:	f7fb fa45 	bl	80015b0 <HAL_Delay>
      ms++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f9f3 	bl	8006518 <USB_GetMode>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <USB_SetCurrentMode+0x84>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b31      	cmp	r3, #49	; 0x31
 800613c:	d9f0      	bls.n	8006120 <USB_SetCurrentMode+0x60>
 800613e:	e001      	b.n	8006144 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e005      	b.n	8006150 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b32      	cmp	r3, #50	; 0x32
 8006148:	d101      	bne.n	800614e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006158:	b084      	sub	sp, #16
 800615a:	b580      	push	{r7, lr}
 800615c:	b086      	sub	sp, #24
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	e009      	b.n	800618c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	3340      	adds	r3, #64	; 0x40
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	2200      	movs	r2, #0
 8006184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b0e      	cmp	r3, #14
 8006190:	d9f2      	bls.n	8006178 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11c      	bne.n	80061d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a6:	f043 0302 	orr.w	r3, r3, #2
 80061aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	e005      	b.n	80061de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061e4:	461a      	mov	r2, r3
 80061e6:	2300      	movs	r3, #0
 80061e8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061ea:	2103      	movs	r1, #3
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f959 	bl	80064a4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061f2:	2110      	movs	r1, #16
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8f1 	bl	80063dc <USB_FlushTxFifo>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 f91d 	bl	8006444 <USB_FlushRxFifo>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621a:	461a      	mov	r2, r3
 800621c:	2300      	movs	r3, #0
 800621e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	461a      	mov	r2, r3
 8006234:	2300      	movs	r3, #0
 8006236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
 800623c:	e043      	b.n	80062c6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006254:	d118      	bne.n	8006288 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	461a      	mov	r2, r3
 800626a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e013      	b.n	800629a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	461a      	mov	r2, r3
 8006280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	e008      	b.n	800629a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	461a      	mov	r2, r3
 80062ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3301      	adds	r3, #1
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d3b7      	bcc.n	800623e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	e043      	b.n	800635c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ea:	d118      	bne.n	800631e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	461a      	mov	r2, r3
 8006300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e013      	b.n	8006330 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e008      	b.n	8006330 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	461a      	mov	r2, r3
 8006350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	3301      	adds	r3, #1
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3b7      	bcc.n	80062d4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f043 0210 	orr.w	r2, r3, #16
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <USB_DevInit+0x280>)
 8006398:	4313      	orrs	r3, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800639e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f043 0208 	orr.w	r2, r3, #8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d107      	bne.n	80063c6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063be:	f043 0304 	orr.w	r3, r3, #4
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063d2:	b004      	add	sp, #16
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	803c3800 	.word	0x803c3800

080063dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3301      	adds	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a13      	ldr	r2, [pc, #76]	; (8006440 <USB_FlushTxFifo+0x64>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d901      	bls.n	80063fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e01b      	b.n	8006434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	daf2      	bge.n	80063ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	019b      	lsls	r3, r3, #6
 800640c:	f043 0220 	orr.w	r2, r3, #32
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a08      	ldr	r2, [pc, #32]	; (8006440 <USB_FlushTxFifo+0x64>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e006      	b.n	8006434 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0320 	and.w	r3, r3, #32
 800642e:	2b20      	cmp	r3, #32
 8006430:	d0f0      	beq.n	8006414 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	00030d40 	.word	0x00030d40

08006444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a11      	ldr	r2, [pc, #68]	; (80064a0 <USB_FlushRxFifo+0x5c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d901      	bls.n	8006462 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e018      	b.n	8006494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	daf2      	bge.n	8006450 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2210      	movs	r2, #16
 8006472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <USB_FlushRxFifo+0x5c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d901      	bls.n	8006486 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e006      	b.n	8006494 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0310 	and.w	r3, r3, #16
 800648e:	2b10      	cmp	r3, #16
 8006490:	d0f0      	beq.n	8006474 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	00030d40 	.word	0x00030d40

080064a4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	78fb      	ldrb	r3, [r7, #3]
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c4:	4313      	orrs	r3, r2
 80064c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064f0:	f023 0303 	bic.w	r3, r3, #3
 80064f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006504:	f043 0302 	orr.w	r3, r3, #2
 8006508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0301 	and.w	r3, r3, #1
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <USB_CoreReset+0x64>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e01b      	b.n	800658a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	daf2      	bge.n	8006540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f043 0201 	orr.w	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <USB_CoreReset+0x64>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d901      	bls.n	800657c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e006      	b.n	800658a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b01      	cmp	r3, #1
 8006586:	d0f0      	beq.n	800656a <USB_CoreReset+0x36>

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	00030d40 	.word	0x00030d40

0800659c <memset>:
 800659c:	4402      	add	r2, r0
 800659e:	4603      	mov	r3, r0
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d100      	bne.n	80065a6 <memset+0xa>
 80065a4:	4770      	bx	lr
 80065a6:	f803 1b01 	strb.w	r1, [r3], #1
 80065aa:	e7f9      	b.n	80065a0 <memset+0x4>

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4d0d      	ldr	r5, [pc, #52]	; (80065e4 <__libc_init_array+0x38>)
 80065b0:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	2600      	movs	r6, #0
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	4d0b      	ldr	r5, [pc, #44]	; (80065ec <__libc_init_array+0x40>)
 80065be:	4c0c      	ldr	r4, [pc, #48]	; (80065f0 <__libc_init_array+0x44>)
 80065c0:	f000 f818 	bl	80065f4 <_init>
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	2600      	movs	r6, #0
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	0800665c 	.word	0x0800665c
 80065e8:	0800665c 	.word	0x0800665c
 80065ec:	0800665c 	.word	0x0800665c
 80065f0:	08006660 	.word	0x08006660

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
