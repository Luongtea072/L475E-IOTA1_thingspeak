
L4_thingspeak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009694  08009694  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009694  08009694  00019694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800969c  0800969c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080096a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000117c  20000090  08009734  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000120c  08009734  0002120c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c337  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b1f  00000000  00000000  0003c43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  0003ff60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001468  00000000  00000000  000419d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a171  00000000  00000000  00042e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4f6  00000000  00000000  0006cfb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f942b  00000000  00000000  0008a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007bc0  00000000  00000000  001838d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0018b494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009334 	.word	0x08009334

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08009334 	.word	0x08009334

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8000584:	4b57      	ldr	r3, [pc, #348]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 8000586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000588:	4a56      	ldr	r2, [pc, #344]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6593      	str	r3, [r2, #88]	; 0x58
 8000590:	4b54      	ldr	r3, [pc, #336]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 8000592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000598:	61bb      	str	r3, [r7, #24]
 800059a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	4b51      	ldr	r3, [pc, #324]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 800059e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a0:	4a50      	ldr	r2, [pc, #320]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005a2:	f043 0302 	orr.w	r3, r3, #2
 80005a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a8:	4b4e      	ldr	r3, [pc, #312]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005b4:	4b4b      	ldr	r3, [pc, #300]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b8:	4a4a      	ldr	r2, [pc, #296]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c0:	4b48      	ldr	r3, [pc, #288]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005cc:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d0:	4a44      	ldr	r2, [pc, #272]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d8:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <SPI_WIFI_MspInit+0x168>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
  
  /* configure Wake up pin */
  HAL_GPIO_WritePin( GPIOB, GPIO_PIN_15, GPIO_PIN_RESET ); 
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	483f      	ldr	r0, [pc, #252]	; (80006e8 <SPI_WIFI_MspInit+0x16c>)
 80005ec:	f003 f99a 	bl	8003924 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_15;
 80005f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	4837      	ldr	r0, [pc, #220]	; (80006e8 <SPI_WIFI_MspInit+0x16c>)
 800060a:	f002 fed5 	bl	80033b8 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800060e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000612:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8000614:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000618:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4830      	ldr	r0, [pc, #192]	; (80006ec <SPI_WIFI_MspInit+0x170>)
 800062a:	f002 fec5 	bl	80033b8 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800062e:	2302      	movs	r3, #2
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOH, &GPIO_Init );
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	4829      	ldr	r0, [pc, #164]	; (80006f0 <SPI_WIFI_MspInit+0x174>)
 800064a:	f002 feb5 	bl	80033b8 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOG, GPIO_PIN_11, GPIO_PIN_SET ); 
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000654:	4825      	ldr	r0, [pc, #148]	; (80006ec <SPI_WIFI_MspInit+0x170>)
 8000656:	f003 f965 	bl	8003924 <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_11;
 800065a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8000668:	2301      	movs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOG, &GPIO_Init );
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	481e      	ldr	r0, [pc, #120]	; (80006ec <SPI_WIFI_MspInit+0x170>)
 8000674:	f002 fea0 	bl	80033b8 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8000686:	2301      	movs	r3, #1
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800068a:	2306      	movs	r3, #6
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <SPI_WIFI_MspInit+0x16c>)
 8000696:	f002 fe8f 	bl	80033b8 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_5;
 800069a:	2320      	movs	r3, #32
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80006aa:	2306      	movs	r3, #6
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <SPI_WIFI_MspInit+0x16c>)
 80006b6:	f002 fe7f 	bl	80033b8 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_4;
 80006ba:	2310      	movs	r3, #16
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80006c6:	2301      	movs	r3, #1
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80006ca:	2306      	movs	r3, #6
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOB, &GPIO_Init );
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <SPI_WIFI_MspInit+0x16c>)
 80006d6:	f002 fe6f 	bl	80033b8 <HAL_GPIO_Init>
}
 80006da:	bf00      	nop
 80006dc:	3730      	adds	r7, #48	; 0x30
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400
 80006ec:	48001800 	.word	0x48001800
 80006f0:	48001c00 	.word	0x48001c00

080006f4 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 80006fa:	f002 fc0f 	bl	8002f1c <HAL_GetTick>
 80006fe:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
  
  hspi.Instance               = SPI3;
 8000704:	4b50      	ldr	r3, [pc, #320]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000706:	4a51      	ldr	r2, [pc, #324]	; (800084c <SPI_WIFI_Init+0x158>)
 8000708:	601a      	str	r2, [r3, #0]
  SPI_WIFI_MspInit(&hspi);
 800070a:	484f      	ldr	r0, [pc, #316]	; (8000848 <SPI_WIFI_Init+0x154>)
 800070c:	f7ff ff36 	bl	800057c <SPI_WIFI_MspInit>
  
  hspi.Init.Mode              = SPI_MODE_MASTER;
 8000710:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000712:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000716:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <SPI_WIFI_Init+0x154>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800071e:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000720:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000724:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800072c:	4b46      	ldr	r3, [pc, #280]	; (8000848 <SPI_WIFI_Init+0x154>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS               = SPI_NSS_SOFT;
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000738:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;  /* 50/4= 12.5MHz (Inventek WIFI module supports up to 20MHz)*/
 800073a:	4b43      	ldr	r3, [pc, #268]	; (8000848 <SPI_WIFI_Init+0x154>)
 800073c:	2208      	movs	r2, #8
 800073e:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8000740:	4b41      	ldr	r3, [pc, #260]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000748:	2200      	movs	r2, #0
 800074a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800074c:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <SPI_WIFI_Init+0x154>)
 800074e:	2200      	movs	r2, #0
 8000750:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial     = 0;
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <SPI_WIFI_Init+0x154>)
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
  
  HAL_SPI_Init( &hspi );
 8000758:	483b      	ldr	r0, [pc, #236]	; (8000848 <SPI_WIFI_Init+0x154>)
 800075a:	f005 fcbb 	bl	80060d4 <HAL_SPI_Init>
  
  WIFI_RESET_MODULE();
 800075e:	2200      	movs	r2, #0
 8000760:	2102      	movs	r1, #2
 8000762:	483b      	ldr	r0, [pc, #236]	; (8000850 <SPI_WIFI_Init+0x15c>)
 8000764:	f003 f8de 	bl	8003924 <HAL_GPIO_WritePin>
 8000768:	200a      	movs	r0, #10
 800076a:	f002 fbe3 	bl	8002f34 <HAL_Delay>
 800076e:	2201      	movs	r2, #1
 8000770:	2102      	movs	r1, #2
 8000772:	4837      	ldr	r0, [pc, #220]	; (8000850 <SPI_WIFI_Init+0x15c>)
 8000774:	f003 f8d6 	bl	8003924 <HAL_GPIO_WritePin>
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f002 fbda 	bl	8002f34 <HAL_Delay>
  
  WIFI_ENABLE_NSS(); 
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000786:	4833      	ldr	r0, [pc, #204]	; (8000854 <SPI_WIFI_Init+0x160>)
 8000788:	f003 f8cc 	bl	8003924 <HAL_GPIO_WritePin>
 800078c:	200a      	movs	r0, #10
 800078e:	f002 fbd1 	bl	8002f34 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 8000792:	e024      	b.n	80007de <SPI_WIFI_Init+0xea>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	463a      	mov	r2, r7
 8000798:	18d1      	adds	r1, r2, r3
 800079a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079e:	2201      	movs	r2, #1
 80007a0:	4829      	ldr	r0, [pc, #164]	; (8000848 <SPI_WIFI_Init+0x154>)
 80007a2:	f005 fed7 	bl	8006554 <HAL_SPI_Receive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
    count += 2;
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3302      	adds	r3, #2
 80007ae:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80007b0:	f002 fbb4 	bl	8002f1c <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007be:	d202      	bcs.n	80007c6 <SPI_WIFI_Init+0xd2>
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00b      	beq.n	80007de <SPI_WIFI_Init+0xea>
    {
      WIFI_DISABLE_NSS(); 
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4821      	ldr	r0, [pc, #132]	; (8000854 <SPI_WIFI_Init+0x160>)
 80007ce:	f003 f8a9 	bl	8003924 <HAL_GPIO_WritePin>
 80007d2:	200a      	movs	r0, #10
 80007d4:	f002 fbae 	bl	8002f34 <HAL_Delay>
      return -1;
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007dc:	e02f      	b.n	800083e <SPI_WIFI_Init+0x14a>
  while (WIFI_IS_CMDDATA_READY())
 80007de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e2:	481c      	ldr	r0, [pc, #112]	; (8000854 <SPI_WIFI_Init+0x160>)
 80007e4:	f003 f886 	bl	80038f4 <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d0d2      	beq.n	8000794 <SPI_WIFI_Init+0xa0>
    }    
  }
  
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80007ee:	783b      	ldrb	r3, [r7, #0]
 80007f0:	2b15      	cmp	r3, #21
 80007f2:	d10e      	bne.n	8000812 <SPI_WIFI_Init+0x11e>
 80007f4:	787b      	ldrb	r3, [r7, #1]
 80007f6:	2b15      	cmp	r3, #21
 80007f8:	d10b      	bne.n	8000812 <SPI_WIFI_Init+0x11e>
 80007fa:	78bb      	ldrb	r3, [r7, #2]
 80007fc:	2b0d      	cmp	r3, #13
 80007fe:	d108      	bne.n	8000812 <SPI_WIFI_Init+0x11e>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8000800:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d105      	bne.n	8000812 <SPI_WIFI_Init+0x11e>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8000806:	793b      	ldrb	r3, [r7, #4]
 8000808:	2b3e      	cmp	r3, #62	; 0x3e
 800080a:	d102      	bne.n	8000812 <SPI_WIFI_Init+0x11e>
 800080c:	797b      	ldrb	r3, [r7, #5]
 800080e:	2b20      	cmp	r3, #32
 8000810:	d00b      	beq.n	800082a <SPI_WIFI_Init+0x136>
  {
    WIFI_DISABLE_NSS(); 
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	480e      	ldr	r0, [pc, #56]	; (8000854 <SPI_WIFI_Init+0x160>)
 800081a:	f003 f883 	bl	8003924 <HAL_GPIO_WritePin>
 800081e:	200a      	movs	r0, #10
 8000820:	f002 fb88 	bl	8002f34 <HAL_Delay>
    return -1;
 8000824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000828:	e009      	b.n	800083e <SPI_WIFI_Init+0x14a>
  }    
   
  WIFI_DISABLE_NSS(); 
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <SPI_WIFI_Init+0x160>)
 8000832:	f003 f877 	bl	8003924 <HAL_GPIO_WritePin>
 8000836:	200a      	movs	r0, #10
 8000838:	f002 fb7c 	bl	8002f34 <HAL_Delay>
  return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000ac 	.word	0x200000ac
 800084c:	40003c00 	.word	0x40003c00
 8000850:	48001c00 	.word	0x48001c00
 8000854:	48001800 	.word	0x48001800

08000858 <SPI_WIFI_DeInit>:
  * @brief  Initialize the UART1
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <SPI_WIFI_DeInit+0x10>)
 800085e:	f005 fcdc 	bl	800621a <HAL_SPI_DeInit>
  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000ac 	.word	0x200000ac

0800086c <SPI_WIFI_ReceiveData>:
  * @brief  Receive wifi Data from SPI
  * @param  Pdata : pointer to data
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	460b      	mov	r3, r1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800087a:	f002 fb4f 	bl	8002f1c <HAL_GetTick>
 800087e:	6138      	str	r0, [r7, #16]
  int16_t length = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	82fb      	strh	r3, [r7, #22]
   
  WIFI_DISABLE_NSS(); 
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088a:	4838      	ldr	r0, [pc, #224]	; (800096c <SPI_WIFI_ReceiveData+0x100>)
 800088c:	f003 f84a 	bl	8003924 <HAL_GPIO_WritePin>
 8000890:	200a      	movs	r0, #10
 8000892:	f002 fb4f 	bl	8002f34 <HAL_Delay>
  
  while (!WIFI_IS_CMDDATA_READY())
 8000896:	e00a      	b.n	80008ae <SPI_WIFI_ReceiveData+0x42>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8000898:	f002 fb40 	bl	8002f1c <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d202      	bcs.n	80008ae <SPI_WIFI_ReceiveData+0x42>
    {
      return -1;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ac:	e05a      	b.n	8000964 <SPI_WIFI_ReceiveData+0xf8>
  while (!WIFI_IS_CMDDATA_READY())
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	482e      	ldr	r0, [pc, #184]	; (800096c <SPI_WIFI_ReceiveData+0x100>)
 80008b4:	f003 f81e 	bl	80038f4 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d1ec      	bne.n	8000898 <SPI_WIFI_ReceiveData+0x2c>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c4:	4829      	ldr	r0, [pc, #164]	; (800096c <SPI_WIFI_ReceiveData+0x100>)
 80008c6:	f003 f82d 	bl	8003924 <HAL_GPIO_WritePin>
 80008ca:	200a      	movs	r0, #10
 80008cc:	f002 fb32 	bl	8002f34 <HAL_Delay>
  
  while (WIFI_IS_CMDDATA_READY())
 80008d0:	e028      	b.n	8000924 <SPI_WIFI_ReceiveData+0xb8>
  {
    if((length < len) || (!len))
 80008d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80008d6:	897b      	ldrh	r3, [r7, #10]
 80008d8:	429a      	cmp	r2, r3
 80008da:	db02      	blt.n	80008e2 <SPI_WIFI_ReceiveData+0x76>
 80008dc:	897b      	ldrh	r3, [r7, #10]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d128      	bne.n	8000934 <SPI_WIFI_ReceiveData+0xc8>
    {
      HAL_SPI_Receive(&hspi, pData, 1, timeout) ;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	68f9      	ldr	r1, [r7, #12]
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <SPI_WIFI_ReceiveData+0x104>)
 80008ea:	f005 fe33 	bl	8006554 <HAL_SPI_Receive>
      length += 2;
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	3302      	adds	r3, #2
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	3302      	adds	r3, #2
 80008fa:	60fb      	str	r3, [r7, #12]
      
      if((HAL_GetTick() - tickstart ) > timeout)
 80008fc:	f002 fb0e 	bl	8002f1c <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d20b      	bcs.n	8000924 <SPI_WIFI_ReceiveData+0xb8>
      {
        WIFI_DISABLE_NSS(); 
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000912:	4816      	ldr	r0, [pc, #88]	; (800096c <SPI_WIFI_ReceiveData+0x100>)
 8000914:	f003 f806 	bl	8003924 <HAL_GPIO_WritePin>
 8000918:	200a      	movs	r0, #10
 800091a:	f002 fb0b 	bl	8002f34 <HAL_Delay>
        return -1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000922:	e01f      	b.n	8000964 <SPI_WIFI_ReceiveData+0xf8>
  while (WIFI_IS_CMDDATA_READY())
 8000924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <SPI_WIFI_ReceiveData+0x100>)
 800092a:	f002 ffe3 	bl	80038f4 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b01      	cmp	r3, #1
 8000932:	d0ce      	beq.n	80008d2 <SPI_WIFI_ReceiveData+0x66>
    {
      break;
    }
  }
  
  if(*(--pData) == 0x15)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3b01      	subs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b15      	cmp	r3, #21
 8000940:	d105      	bne.n	800094e <SPI_WIFI_ReceiveData+0xe2>
  {
    length--;
 8000942:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	82fb      	strh	r3, [r7, #22]
  }
  
  WIFI_DISABLE_NSS(); 
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <SPI_WIFI_ReceiveData+0x100>)
 8000956:	f002 ffe5 	bl	8003924 <HAL_GPIO_WritePin>
 800095a:	200a      	movs	r0, #10
 800095c:	f002 faea 	bl	8002f34 <HAL_Delay>
  return length;
 8000960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	48001800 	.word	0x48001800
 8000970:	200000ac 	.word	0x200000ac

08000974 <SPI_WIFI_SendData>:
  * @brief  Send wifi Data thru SPI
  * @param  Pdata : pointer to data
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	460b      	mov	r3, r1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8000982:	f002 facb 	bl	8002f1c <HAL_GetTick>
 8000986:	6178      	str	r0, [r7, #20]
   
  while (!WIFI_IS_CMDDATA_READY())
 8000988:	e00a      	b.n	80009a0 <SPI_WIFI_SendData+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800098a:	f002 fac7 	bl	8002f1c <HAL_GetTick>
 800098e:	4602      	mov	r2, r0
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	429a      	cmp	r2, r3
 8000998:	d202      	bcs.n	80009a0 <SPI_WIFI_SendData+0x2c>
    {
      return -1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800099e:	e032      	b.n	8000a06 <SPI_WIFI_SendData+0x92>
  while (!WIFI_IS_CMDDATA_READY())
 80009a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a4:	481a      	ldr	r0, [pc, #104]	; (8000a10 <SPI_WIFI_SendData+0x9c>)
 80009a6:	f002 ffa5 	bl	80038f4 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d1ec      	bne.n	800098a <SPI_WIFI_SendData+0x16>
    }
  }
  
  WIFI_ENABLE_NSS(); 
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	4816      	ldr	r0, [pc, #88]	; (8000a10 <SPI_WIFI_SendData+0x9c>)
 80009b8:	f002 ffb4 	bl	8003924 <HAL_GPIO_WritePin>
 80009bc:	200a      	movs	r0, #10
 80009be:	f002 fab9 	bl	8002f34 <HAL_Delay>
  
  if(len & 0x1) 
 80009c2:	897b      	ldrh	r3, [r7, #10]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <SPI_WIFI_SendData+0x62>
  {
    pdata[len] = '\n';
 80009cc:	897b      	ldrh	r3, [r7, #10]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	220a      	movs	r2, #10
 80009d4:	701a      	strb	r2, [r3, #0]
  }
  if( HAL_SPI_Transmit(&hspi, (uint8_t *)pdata , (len+1)/2, timeout) != HAL_OK)
 80009d6:	897b      	ldrh	r3, [r7, #10]
 80009d8:	3301      	adds	r3, #1
 80009da:	0fda      	lsrs	r2, r3, #31
 80009dc:	4413      	add	r3, r2
 80009de:	105b      	asrs	r3, r3, #1
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68f9      	ldr	r1, [r7, #12]
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <SPI_WIFI_SendData+0xa0>)
 80009e8:	f005 fc3f 	bl	800626a <HAL_SPI_Transmit>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <SPI_WIFI_SendData+0x84>
  {
    return -1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f6:	e006      	b.n	8000a06 <SPI_WIFI_SendData+0x92>
  }
  pdata[len] = 0;  
 80009f8:	897b      	ldrh	r3, [r7, #10]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4413      	add	r3, r2
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
  return len;
 8000a02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	48001800 	.word	0x48001800
 8000a14:	200000ac 	.word	0x200000ac

08000a18 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f002 fa87 	bl	8002f34 <HAL_Delay>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt) 
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b085      	sub	sp, #20
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
    
    if (*ptr == '-') {                                		/* Check for minus character */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b2d      	cmp	r3, #45	; 0x2d
 8000a4a:	d119      	bne.n	8000a80 <ParseNumber+0x52>
        minus = 1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
        i++;
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a5c:	e010      	b.n	8000a80 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	461a      	mov	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3b30      	subs	r3, #48	; 0x30
 8000a70:	4413      	add	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
        i++;
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b2f      	cmp	r3, #47	; 0x2f
 8000a86:	d903      	bls.n	8000a90 <ParseNumber+0x62>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b39      	cmp	r3, #57	; 0x39
 8000a8e:	d9e6      	bls.n	8000a5e <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <ParseNumber+0x6e>
        *cnt = i;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	7bba      	ldrb	r2, [r7, #14]
 8000a9a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d002      	beq.n	8000aa8 <ParseNumber+0x7a>
        return 0 - sum;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	425b      	negs	r3, r3
 8000aa6:	e000      	b.n	8000aaa <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000aa8:	68bb      	ldr	r3, [r7, #8]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr) 
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b084      	sub	sp, #16
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
  
  while(* ptr) { 
 8000ac4:	e019      	b.n	8000afa <ParseIP+0x44>
    hexcnt = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b2e      	cmp	r3, #46	; 0x2e
 8000ad0:	d00e      	beq.n	8000af0 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8000ad2:	f107 030e 	add.w	r3, r7, #14
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ffa8 	bl	8000a2e <ParseNumber>
 8000ade:	4601      	mov	r1, r0
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	73fa      	strb	r2, [r7, #15]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	b2ca      	uxtb	r2, r1
 8000aee:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	461a      	mov	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	607b      	str	r3, [r7, #4]
  while(* ptr) { 
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d1e1      	bne.n	8000ac6 <ParseIP+0x10>
  }
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	72fb      	strb	r3, [r7, #11]
  
  ptr = strtok((char *)pdata + 2, ",");  
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	4934      	ldr	r1, [pc, #208]	; (8000bf0 <AT_ParseInfo+0xe4>)
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 fb43 	bl	80081ac <strtok>
 8000b26:	60f8      	str	r0, [r7, #12]
  
  while (ptr != NULL){
 8000b28:	e05a      	b.n	8000be0 <AT_ParseInfo+0xd4>
    switch (num++) { 
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	72fa      	strb	r2, [r7, #11]
 8000b30:	2b06      	cmp	r3, #6
 8000b32:	d84f      	bhi.n	8000bd4 <AT_ParseInfo+0xc8>
 8000b34:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <AT_ParseInfo+0x30>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b59 	.word	0x08000b59
 8000b40:	08000b67 	.word	0x08000b67
 8000b44:	08000b77 	.word	0x08000b77
 8000b48:	08000b87 	.word	0x08000b87
 8000b4c:	08000b97 	.word	0x08000b97
 8000b50:	08000ba7 	.word	0x08000ba7
 8000b54:	08000bbb 	.word	0x08000bbb
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	68f9      	ldr	r1, [r7, #12]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fb10 	bl	8008184 <strncpy>
      break;
 8000b64:	e037      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3320      	adds	r3, #32
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	68f9      	ldr	r1, [r7, #12]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f007 fb08 	bl	8008184 <strncpy>
      break;
 8000b74:	e02f      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);      
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3330      	adds	r3, #48	; 0x30
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	68f9      	ldr	r1, [r7, #12]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f007 fb00 	bl	8008184 <strncpy>
      break;
 8000b84:	e027      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);   
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3340      	adds	r3, #64	; 0x40
 8000b8a:	2210      	movs	r2, #16
 8000b8c:	68f9      	ldr	r1, [r7, #12]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f007 faf8 	bl	8008184 <strncpy>
      break;
 8000b94:	e01f      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);        
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3350      	adds	r3, #80	; 0x50
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 faf0 	bl	8008184 <strncpy>
      break;
 8000ba4:	e017      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff40 	bl	8000a2e <ParseNumber>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;      
 8000bb8:	e00d      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    case 6:
      ptr = strtok(ptr, "\r"); 
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <AT_ParseInfo+0xe8>)
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f007 faf5 	bl	80081ac <strtok>
 8000bc2:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);         
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3360      	adds	r3, #96	; 0x60
 8000bc8:	2220      	movs	r2, #32
 8000bca:	68f9      	ldr	r1, [r7, #12]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f007 fad9 	bl	8008184 <strncpy>
      break;
 8000bd2:	e000      	b.n	8000bd6 <AT_ParseInfo+0xca>
      
    default: break;
 8000bd4:	bf00      	nop
    }
    ptr = strtok(NULL, ","); 
 8000bd6:	4906      	ldr	r1, [pc, #24]	; (8000bf0 <AT_ParseInfo+0xe4>)
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f007 fae7 	bl	80081ac <strtok>
 8000bde:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1a1      	bne.n	8000b2a <AT_ParseInfo+0x1e>
  }
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	0800937c 	.word	0x0800937c
 8000bf4:	08009380 	.word	0x08009380

08000bf8 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
  char *ptr;
 
  ptr = strtok(pdata + 2, ",");   
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	494d      	ldr	r1, [pc, #308]	; (8000d40 <AT_ParseConnSettings+0x148>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f007 facd 	bl	80081ac <strtok>
 8000c12:	60b8      	str	r0, [r7, #8]
  
  while (ptr != NULL) {
 8000c14:	e08a      	b.n	8000d2c <AT_ParseConnSettings+0x134>
    switch (num++) {      
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	73fa      	strb	r2, [r7, #15]
 8000c1c:	2b0b      	cmp	r3, #11
 8000c1e:	d87f      	bhi.n	8000d20 <AT_ParseConnSettings+0x128>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <AT_ParseConnSettings+0x30>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c59 	.word	0x08000c59
 8000c2c:	08000c67 	.word	0x08000c67
 8000c30:	08000c77 	.word	0x08000c77
 8000c34:	08000c8b 	.word	0x08000c8b
 8000c38:	08000c9f 	.word	0x08000c9f
 8000c3c:	08000cb3 	.word	0x08000cb3
 8000c40:	08000cc1 	.word	0x08000cc1
 8000c44:	08000ccf 	.word	0x08000ccf
 8000c48:	08000cdd 	.word	0x08000cdd
 8000c4c:	08000ceb 	.word	0x08000ceb
 8000c50:	08000cf9 	.word	0x08000cf9
 8000c54:	08000d0d 	.word	0x08000d0d
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1); 
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2221      	movs	r2, #33	; 0x21
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f007 fa90 	bl	8008184 <strncpy>
      break;
 8000c64:	e05d      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 1: 
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1); 
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	3321      	adds	r3, #33	; 0x21
 8000c6a:	2221      	movs	r2, #33	; 0x21
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f007 fa88 	bl	8008184 <strncpy>
      break;
 8000c74:	e055      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 2: 
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000c76:	2100      	movs	r1, #0
 8000c78:	68b8      	ldr	r0, [r7, #8]
 8000c7a:	f7ff fed8 	bl	8000a2e <ParseNumber>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;   
 8000c88:	e04b      	b.n	8000d22 <AT_ParseConnSettings+0x12a>

    case 3: 
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	68b8      	ldr	r0, [r7, #8]
 8000c8e:	f7ff fece 	bl	8000a2e <ParseNumber>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8000c9c:	e041      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 4: 
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	68b8      	ldr	r0, [r7, #8]
 8000ca2:	f7ff fec4 	bl	8000a2e <ParseNumber>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;      
 8000cb0:	e037      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 5: 
      ParseIP(ptr, NetSettings->IP_Addr);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3348      	adds	r3, #72	; 0x48
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	68b8      	ldr	r0, [r7, #8]
 8000cba:	f7ff fefc 	bl	8000ab6 <ParseIP>
      break; 
 8000cbe:	e030      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 6: 
      ParseIP(ptr, NetSettings->IP_Mask);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	334c      	adds	r3, #76	; 0x4c
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	68b8      	ldr	r0, [r7, #8]
 8000cc8:	f7ff fef5 	bl	8000ab6 <ParseIP>
      break;      
 8000ccc:	e029      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 7: 
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3350      	adds	r3, #80	; 0x50
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	68b8      	ldr	r0, [r7, #8]
 8000cd6:	f7ff feee 	bl	8000ab6 <ParseIP>
      break; 
 8000cda:	e022      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 8: 
      ParseIP(ptr, NetSettings->DNS1);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	3354      	adds	r3, #84	; 0x54
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f7ff fee7 	bl	8000ab6 <ParseIP>
      break;      
 8000ce8:	e01b      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 9: 
      ParseIP(ptr, NetSettings->DNS2);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3358      	adds	r3, #88	; 0x58
 8000cee:	4619      	mov	r1, r3
 8000cf0:	68b8      	ldr	r0, [r7, #8]
 8000cf2:	f7ff fee0 	bl	8000ab6 <ParseIP>
      break; 
 8000cf6:	e014      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 10: 
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	68b8      	ldr	r0, [r7, #8]
 8000cfc:	f7ff fe97 	bl	8000a2e <ParseNumber>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;  
 8000d0a:	e00a      	b.n	8000d22 <AT_ParseConnSettings+0x12a>
      
    case 11: 
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f7ff fe8d 	bl	8000a2e <ParseNumber>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;  
 8000d1e:	e000      	b.n	8000d22 <AT_ParseConnSettings+0x12a>

    default: 
      break;
 8000d20:	bf00      	nop
    }
    ptr = strtok(NULL, ","); 
 8000d22:	4907      	ldr	r1, [pc, #28]	; (8000d40 <AT_ParseConnSettings+0x148>)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f007 fa41 	bl	80081ac <strtok>
 8000d2a:	60b8      	str	r0, [r7, #8]
  while (ptr != NULL) {
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f47f af71 	bne.w	8000c16 <AT_ParseConnSettings+0x1e>
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	0800937c 	.word	0x0800937c

08000d44 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 8000d56:	68b8      	ldr	r0, [r7, #8]
 8000d58:	f7ff fa3a 	bl	80001d0 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b299      	uxth	r1, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8000d66:	461a      	mov	r2, r3
 8000d68:	68b8      	ldr	r0, [r7, #8]
 8000d6a:	47a0      	blx	r4
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dd26      	ble.n	8000dc0 <AT_ExecuteCommand+0x7c>
  {
    int16_t n=Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8000d7e:	2100      	movs	r1, #0
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	82fb      	strh	r3, [r7, #22]
    if(n > 0)
 8000d88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dd17      	ble.n	8000dc0 <AT_ExecuteCommand+0x7c>
    {
      *(pdata+n)=0;
 8000d90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8000d9c:	490b      	ldr	r1, [pc, #44]	; (8000dcc <AT_ExecuteCommand+0x88>)
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f007 fa60 	bl	8008264 <strstr>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <AT_ExecuteCommand+0x6a>
      {
        return ES_WIFI_STATUS_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e009      	b.n	8000dc2 <AT_ExecuteCommand+0x7e>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <AT_ExecuteCommand+0x8c>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f007 fa57 	bl	8008264 <strstr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <AT_ExecuteCommand+0x7c>
      {
        return ES_WIFI_STATUS_ERROR;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e000      	b.n	8000dc2 <AT_ExecuteCommand+0x7e>
      }      
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000dc0:	2304      	movs	r3, #4
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	371c      	adds	r7, #28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	08009384 	.word	0x08009384
 8000dd0:	08009390 	.word	0x08009390

08000dd4 <AT_RequestSendData>:
  * @param  len: binary data length
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{      
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	807b      	strh	r3, [r7, #2]
  /* Can send only even number of byte on first send */
  uint16_t n=strlen((char*)cmd);
 8000de2:	68b8      	ldr	r0, [r7, #8]
 8000de4:	f7ff f9f4 	bl	80001d0 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	82fb      	strh	r3, [r7, #22]
  if (n &1 ) return ES_WIFI_STATUS_ERROR;
 8000dec:	8afb      	ldrh	r3, [r7, #22]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <AT_RequestSendData+0x26>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e047      	b.n	8000e8a <AT_RequestSendData+0xb6>
  if(Obj->fops.IO_Send(cmd, n, Obj->Timeout) == n)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8000e06:	8af9      	ldrh	r1, [r7, #22]
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	4798      	blx	r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	8afb      	ldrh	r3, [r7, #22]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d138      	bne.n	8000e88 <AT_RequestSendData+0xb4>
  {
    int16_t n=Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8000e22:	8879      	ldrh	r1, [r7, #2]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	82bb      	strh	r3, [r7, #20]
    if(n == len)
 8000e2c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e30:	887b      	ldrh	r3, [r7, #2]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d126      	bne.n	8000e84 <AT_RequestSendData+0xb0>
    {
      n = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	f8d2 2760 	ldr.w	r2, [r2, #1888]	; 0x760
 8000e42:	2100      	movs	r1, #0
 8000e44:	6a38      	ldr	r0, [r7, #32]
 8000e46:	4798      	blx	r3
 8000e48:	4603      	mov	r3, r0
 8000e4a:	82bb      	strh	r3, [r7, #20]
      if(n > 0)
 8000e4c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dd19      	ble.n	8000e88 <AT_RequestSendData+0xb4>
      {
        *(pdata+n)=0;
 8000e54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e58:	6a3a      	ldr	r2, [r7, #32]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <AT_RequestSendData+0xc0>)
 8000e62:	6a38      	ldr	r0, [r7, #32]
 8000e64:	f007 f9fe 	bl	8008264 <strstr>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <AT_RequestSendData+0x9e>
        {
          return ES_WIFI_STATUS_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e00b      	b.n	8000e8a <AT_RequestSendData+0xb6>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000e72:	4909      	ldr	r1, [pc, #36]	; (8000e98 <AT_RequestSendData+0xc4>)
 8000e74:	6a38      	ldr	r0, [r7, #32]
 8000e76:	f007 f9f5 	bl	8008264 <strstr>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d003      	beq.n	8000e88 <AT_RequestSendData+0xb4>
        {
          return ES_WIFI_STATUS_ERROR;
 8000e80:	2302      	movs	r3, #2
 8000e82:	e002      	b.n	8000e8a <AT_RequestSendData+0xb6>
        }      
      }
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8000e84:	2302      	movs	r3, #2
 8000e86:	e000      	b.n	8000e8a <AT_RequestSendData+0xb6>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8000e88:	2304      	movs	r3, #4
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	08009384 	.word	0x08009384
 8000e98:	08009390 	.word	0x08009390

08000e9c <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  
  if (Obj->fops.IO_Init() == 0)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000eb8:	4798      	blx	r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d113      	bne.n	8000ee8 <ES_WIFI_Init+0x4c>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <ES_WIFI_Init+0x58>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ff3a 	bl	8000d44 <AT_ExecuteCommand>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
    
    if(ret == ES_WIFI_STATUS_OK)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d106      	bne.n	8000ee8 <ES_WIFI_Init+0x4c>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff fe12 	bl	8000b0c <AT_ParseInfo>
    }
  }
  return ret;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08009398 	.word	0x08009398

08000ef8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,  
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
 8000f04:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <ES_WIFI_RegisterBusIO+0x2c>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d008      	beq.n	8000f24 <ES_WIFI_RegisterBusIO+0x2c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <ES_WIFI_RegisterBusIO+0x2c>
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <ES_WIFI_RegisterBusIO+0x2c>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8000f24:	2302      	movs	r3, #2
 8000f26:	e010      	b.n	8000f4a <ES_WIFI_RegisterBusIO+0x52>
  }

  Obj->fops.IO_Init = IO_Init;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  Obj->fops.IO_Send = IO_Send;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Receive = IO_Receive;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  Obj->fops.IO_Delay = IO_Delay;  
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  
  return ES_WIFI_STATUS_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID, 
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	4932      	ldr	r1, [pc, #200]	; (8001038 <ES_WIFI_Connect+0xe0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f007 f88d 	bl	8008090 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000f82:	461a      	mov	r2, r3
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f7ff fedd 	bl	8000d44 <AT_ExecuteCommand>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8000f8e:	7dfb      	ldrb	r3, [r7, #23]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d14b      	bne.n	800102c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	4927      	ldr	r1, [pc, #156]	; (800103c <ES_WIFI_Connect+0xe4>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f007 f876 	bl	8008090 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff fec6 	bl	8000d44 <AT_ExecuteCommand>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d134      	bne.n	800102c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	491b      	ldr	r1, [pc, #108]	; (8001040 <ES_WIFI_Connect+0xe8>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 f85b 	bl	8008090 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff feab 	bl	8000d44 <AT_ExecuteCommand>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
      
      if(ret == ES_WIFI_STATUS_OK)
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d119      	bne.n	800102c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8000ffe:	4911      	ldr	r1, [pc, #68]	; (8001044 <ES_WIFI_Connect+0xec>)
 8001000:	4618      	mov	r0, r3
 8001002:	f007 f845 	bl	8008090 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);  
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001012:	461a      	mov	r2, r3
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fe95 	bl	8000d44 <AT_ExecuteCommand>
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d103      	bne.n	800102c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
        }
      }    
    }
  }
  return ret;
 800102c:	7dfb      	ldrb	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	080093a4 	.word	0x080093a4
 800103c:	080093ac 	.word	0x080093ac
 8001040:	080093b4 	.word	0x080093b4
 8001044:	080093bc 	.word	0x080093bc

08001048 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  
  sprintf((char*)Obj->CmdData,"C?\r");
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001056:	4910      	ldr	r1, [pc, #64]	; (8001098 <ES_WIFI_GetNetworkSettings+0x50>)
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f819 	bl	8008090 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800106a:	461a      	mov	r2, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fe69 	bl	8000d44 <AT_ExecuteCommand>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3385      	adds	r3, #133	; 0x85
 8001086:	4619      	mov	r1, r3
 8001088:	4610      	mov	r0, r2
 800108a:	f7ff fdb5 	bl	8000bf8 <AT_ParseConnSettings>
  }  
  return ret;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	080093c4 	.word	0x080093c4

0800109c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b087      	sub	sp, #28
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	785b      	ldrb	r3, [r3, #1]
 80010b0:	461a      	mov	r2, r3
 80010b2:	494f      	ldr	r1, [pc, #316]	; (80011f0 <ES_WIFI_StartClientConnection+0x154>)
 80010b4:	f006 ffec 	bl	8008090 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80010c4:	461a      	mov	r2, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe3c 	bl	8000d44 <AT_ExecuteCommand>
 80010cc:	4603      	mov	r3, r0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  if(ret == ES_WIFI_STATUS_OK)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 8087 	bne.w	80011e6 <ES_WIFI_StartClientConnection+0x14a>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4943      	ldr	r1, [pc, #268]	; (80011f4 <ES_WIFI_StartClientConnection+0x158>)
 80010e6:	f006 ffd3 	bl	8008090 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80010f6:	461a      	mov	r2, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fe23 	bl	8000d44 <AT_ExecuteCommand>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
    if(ret == ES_WIFI_STATUS_OK)
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d16e      	bne.n	80011e6 <ES_WIFI_StartClientConnection+0x14a>
    {
      if ((conn->Type == ES_WIFI_UDP_CONNECTION) && (conn->LocalPort > 0)) 
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d11b      	bne.n	8001148 <ES_WIFI_StartClientConnection+0xac>
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	889b      	ldrh	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d017      	beq.n	8001148 <ES_WIFI_StartClientConnection+0xac>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->RemotePort);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	885b      	ldrh	r3, [r3, #2]
 8001122:	461a      	mov	r2, r3
 8001124:	4934      	ldr	r1, [pc, #208]	; (80011f8 <ES_WIFI_StartClientConnection+0x15c>)
 8001126:	f006 ffb3 	bl	8008090 <siprintf>
        if(AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData) == ES_WIFI_STATUS_ERROR)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001136:	461a      	mov	r2, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fe03 	bl	8000d44 <AT_ExecuteCommand>
 800113e:	4603      	mov	r3, r0
 8001140:	2b02      	cmp	r3, #2
 8001142:	d101      	bne.n	8001148 <ES_WIFI_StartClientConnection+0xac>
        {
          return ES_WIFI_STATUS_ERROR;
 8001144:	2302      	movs	r3, #2
 8001146:	e04f      	b.n	80011e8 <ES_WIFI_StartClientConnection+0x14c>
        }
      }
      sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	885b      	ldrh	r3, [r3, #2]
 8001152:	461a      	mov	r2, r3
 8001154:	4929      	ldr	r1, [pc, #164]	; (80011fc <ES_WIFI_StartClientConnection+0x160>)
 8001156:	f006 ff9b 	bl	8008090 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001166:	461a      	mov	r2, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fdeb 	bl	8000d44 <AT_ExecuteCommand>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
      
      if(ret == ES_WIFI_STATUS_OK)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d136      	bne.n	80011e6 <ES_WIFI_StartClientConnection+0x14a>
      {
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	799b      	ldrb	r3, [r3, #6]
 8001182:	4619      	mov	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	79db      	ldrb	r3, [r3, #7]
 8001188:	461c      	mov	r4, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	7a1b      	ldrb	r3, [r3, #8]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 800118e:	461a      	mov	r2, r3
                conn->RemoteIP[2],conn->RemoteIP[3]);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	7a5b      	ldrb	r3, [r3, #9]
        sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	4623      	mov	r3, r4
 800119a:	460a      	mov	r2, r1
 800119c:	4918      	ldr	r1, [pc, #96]	; (8001200 <ES_WIFI_StartClientConnection+0x164>)
 800119e:	f006 ff77 	bl	8008090 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData); 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80011ae:	461a      	mov	r2, r3
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fdc7 	bl	8000d44 <AT_ExecuteCommand>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
        if(ret == ES_WIFI_STATUS_OK)
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d112      	bne.n	80011e6 <ES_WIFI_StartClientConnection+0x14a>
        {
          sprintf((char*)Obj->CmdData,"P6=1\r");
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80011c6:	490f      	ldr	r1, [pc, #60]	; (8001204 <ES_WIFI_StartClientConnection+0x168>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f006 ff61 	bl	8008090 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);         
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80011da:	461a      	mov	r2, r3
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fdb1 	bl	8000d44 <AT_ExecuteCommand>
 80011e2:	4603      	mov	r3, r0
 80011e4:	73fb      	strb	r3, [r7, #15]
        }          
      }           
    }
  }
  return ret;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	08009430 	.word	0x08009430
 80011f4:	08009438 	.word	0x08009438
 80011f8:	08009440 	.word	0x08009440
 80011fc:	08009448 	.word	0x08009448
 8001200:	08009450 	.word	0x08009450
 8001204:	08009460 	.word	0x08009460

08001208 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	461a      	mov	r2, r3
 8001214:	460b      	mov	r3, r1
 8001216:	72fb      	strb	r3, [r7, #11]
 8001218:	4613      	mov	r3, r2
 800121a:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;  
 800121c:	2302      	movs	r3, #2
 800121e:	75fb      	strb	r3, [r7, #23]
  
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001220:	893b      	ldrh	r3, [r7, #8]
 8001222:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001226:	d302      	bcc.n	800122e <ES_WIFI_SendData+0x26>
 8001228:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800122c:	813b      	strh	r3, [r7, #8]
  
  *SentLen = Reqlen;
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	893a      	ldrh	r2, [r7, #8]
 8001232:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800123a:	7afa      	ldrb	r2, [r7, #11]
 800123c:	492d      	ldr	r1, [pc, #180]	; (80012f4 <ES_WIFI_SendData+0xec>)
 800123e:	4618      	mov	r0, r3
 8001240:	f006 ff26 	bl	8008090 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 7190 	add.w	r1, r3, #288	; 0x120
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001250:	461a      	mov	r2, r3
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff fd76 	bl	8000d44 <AT_ExecuteCommand>
 8001258:	4603      	mov	r3, r0
 800125a:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d13c      	bne.n	80012dc <ES_WIFI_SendData+0xd4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126a:	4923      	ldr	r1, [pc, #140]	; (80012f8 <ES_WIFI_SendData+0xf0>)
 800126c:	4618      	mov	r0, r3
 800126e:	f006 ff0f 	bl	8008090 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f503 7190 	add.w	r1, r3, #288	; 0x120
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800127e:	461a      	mov	r2, r3
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff fd5f 	bl	8000d44 <AT_ExecuteCommand>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]
    
    if(ret == ES_WIFI_STATUS_OK)
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d125      	bne.n	80012dc <ES_WIFI_SendData+0xd4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001296:	893a      	ldrh	r2, [r7, #8]
 8001298:	4918      	ldr	r1, [pc, #96]	; (80012fc <ES_WIFI_SendData+0xf4>)
 800129a:	4618      	mov	r0, r3
 800129c:	f006 fef8 	bl	8008090 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80012ac:	893a      	ldrh	r2, [r7, #8]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f7ff fd8d 	bl	8000dd4 <AT_RequestSendData>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]
      
      if(ret == ES_WIFI_STATUS_OK)
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10b      	bne.n	80012dc <ES_WIFI_SendData+0xd4>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80012ca:	490d      	ldr	r1, [pc, #52]	; (8001300 <ES_WIFI_SendData+0xf8>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f006 ffc9 	bl	8008264 <strstr>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <ES_WIFI_SendData+0xd4>
        {
          ret = ES_WIFI_STATUS_ERROR;
 80012d8:	2302      	movs	r3, #2
 80012da:	75fb      	strb	r3, [r7, #23]
        }
      }
    }
  }
  
  if (ret == ES_WIFI_STATUS_ERROR) *SentLen = 0;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d102      	bne.n	80012e8 <ES_WIFI_SendData+0xe0>
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	2200      	movs	r2, #0
 80012e6:	801a      	strh	r2, [r3, #0]
  return ret;  
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08009430 	.word	0x08009430
 80012f8:	080094d4 	.word	0x080094d4
 80012fc:	080094dc 	.word	0x080094dc
 8001300:	080094e8 	.word	0x080094e8

08001304 <WIFI_Init>:
  * @brief  Initialize the LL part of the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <WIFI_Init+0x40>)
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <WIFI_Init+0x44>)
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <WIFI_Init+0x48>)
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <WIFI_Init+0x4c>)
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <WIFI_Init+0x50>)
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <WIFI_Init+0x54>)
 800131e:	f7ff fdeb 	bl	8000ef8 <ES_WIFI_RegisterBusIO>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <WIFI_Init+0x54>)
 800132a:	f7ff fdb7 	bl	8000e9c <ES_WIFI_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8001338:	79fb      	ldrb	r3, [r7, #7]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800086d 	.word	0x0800086d
 8001348:	08000975 	.word	0x08000975
 800134c:	08000a19 	.word	0x08000a19
 8001350:	08000859 	.word	0x08000859
 8001354:	080006f5 	.word	0x080006f5
 8001358:	20000110 	.word	0x20000110

0800135c <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	4613      	mov	r3, r2
 8001368:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800136a:	2301      	movs	r3, #1
 800136c:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <WIFI_Connect+0x40>)
 8001376:	f7ff fdef 	bl	8000f58 <ES_WIFI_Connect>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d107      	bne.n	8001390 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001380:	4806      	ldr	r0, [pc, #24]	; (800139c <WIFI_Connect+0x40>)
 8001382:	f7ff fe61 	bl	8001048 <ES_WIFI_GetNetworkSettings>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000110 	.word	0x20000110

080013a0 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.NetSettings.IsConnected)
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <WIFI_GetIP_Address+0x34>)
 80013ae:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <WIFI_GetIP_Address+0x26>
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <WIFI_GetIP_Address+0x34>)
 80013b8:	f8d3 30cd 	ldr.w	r3, [r3, #205]	; 0xcd
 80013bc:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000110 	.word	0x20000110

080013d8 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char* name, char* location, uint16_t port, uint16_t local_port)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	460b      	mov	r3, r1
 80013e6:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	757b      	strb	r3, [r7, #21]
  conn.RemotePort = port;
 80013f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80013f6:	82fb      	strh	r3, [r7, #22]
  conn.LocalPort = local_port;
 80013f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80013fa:	833b      	strh	r3, [r7, #24]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80013fc:	7afb      	ldrb	r3, [r7, #11]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	bf14      	ite	ne
 8001402:	2301      	movne	r3, #1
 8001404:	2300      	moveq	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	753b      	strb	r3, [r7, #20]
  conn.RemoteIP[0] = location[0];
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	76bb      	strb	r3, [r7, #26]
  conn.RemoteIP[1] = location[1];
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	76fb      	strb	r3, [r7, #27]
  conn.RemoteIP[2] = location[2];
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3302      	adds	r3, #2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	773b      	strb	r3, [r7, #28]
  conn.RemoteIP[3] = location[3];
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	3303      	adds	r3, #3
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	777b      	strb	r3, [r7, #29]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <WIFI_OpenClientConnection+0x74>)
 8001430:	f7ff fe34 	bl	800109c <ES_WIFI_StartClientConnection>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <WIFI_OpenClientConnection+0x68>
  {
    ret = WIFI_STATUS_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8001440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001444:	4618      	mov	r0, r3
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000110 	.word	0x20000110

08001450 <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	4613      	mov	r3, r2
 8001460:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, 10000) == ES_WIFI_STATUS_OK)
 8001466:	89ba      	ldrh	r2, [r7, #12]
 8001468:	7bf9      	ldrb	r1, [r7, #15]
 800146a:	f242 7310 	movw	r3, #10000	; 0x2710
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <WIFI_SendData+0x44>)
 800147a:	f7ff fec5 	bl	8001208 <ES_WIFI_SendData>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <WIFI_SendData+0x38>
    {
      ret = WIFI_STATUS_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8001488:	7dfb      	ldrb	r3, [r7, #23]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000110 	.word	0x20000110

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149e:	f001 fcd4 	bl	8002e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a2:	f000 f891 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a6:	f000 fa5b 	bl	8001960 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80014aa:	f000 f8ef 	bl	800168c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80014ae:	f000 f925 	bl	80016fc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80014b2:	f000 f963 	bl	800177c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80014b6:	f000 f987 	bl	80017c8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80014ba:	f000 f9c3 	bl	8001844 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80014be:	f000 f9f1 	bl	80018a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014c2:	f000 fa1f 	bl	8001904 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  while(WIFI_Init() !=  WIFI_STATUS_OK)
 80014c6:	e003      	b.n	80014d0 <main+0x38>
  {
	  HAL_Delay(5000); //delay 5s sau đó thử kết nối lại wifi
 80014c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80014cc:	f001 fd32 	bl	8002f34 <HAL_Delay>
  while(WIFI_Init() !=  WIFI_STATUS_OK)
 80014d0:	f7ff ff18 	bl	8001304 <WIFI_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f6      	bne.n	80014c8 <main+0x30>
  };
  while(WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) != WIFI_STATUS_OK) {
 80014da:	e003      	b.n	80014e4 <main+0x4c>
	  HAL_Delay(5000); //delay 5s sau đó thử kết nối lại wifi
 80014dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e0:	f001 fd28 	bl	8002f34 <HAL_Delay>
  while(WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) != WIFI_STATUS_OK) {
 80014e4:	2203      	movs	r2, #3
 80014e6:	492e      	ldr	r1, [pc, #184]	; (80015a0 <main+0x108>)
 80014e8:	482e      	ldr	r0, [pc, #184]	; (80015a4 <main+0x10c>)
 80014ea:	f7ff ff37 	bl	800135c <WIFI_Connect>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f3      	bne.n	80014dc <main+0x44>
  }
  WIFI_GetIP_Address(IP_Addr); //Lấy địa chỉ IP
 80014f4:	482c      	ldr	r0, [pc, #176]	; (80015a8 <main+0x110>)
 80014f6:	f7ff ff53 	bl	80013a0 <WIFI_GetIP_Address>
  HAL_Delay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f001 fd1a 	bl	8002f34 <HAL_Delay>
  WIFI_OpenClientConnection(1, WIFI_TCP_PROTOCOL, "", "api.thingspeak.com", PORT, 3000);
 8001500:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2350      	movs	r3, #80	; 0x50
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <main+0x114>)
 800150c:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <main+0x118>)
 800150e:	2100      	movs	r1, #0
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff ff61 	bl	80013d8 <WIFI_OpenClientConnection>


  /* Init các cảm biến */
  BSP_TSENSOR_Init(); 	// cảm biến nhiệt độ
 8001516:	f001 fa1b 	bl	8002950 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();	// Cảm biến độ ẩm
 800151a:	f001 f9bd 	bl	8002898 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();	// Cảm biến áp suất
 800151e:	f001 f9e9 	bl	80028f4 <BSP_PSENSOR_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  temp_value = BSP_TSENSOR_ReadTemp();
 8001522:	f001 fa31 	bl	8002988 <BSP_TSENSOR_ReadTemp>
 8001526:	eef0 7a40 	vmov.f32	s15, s0
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <main+0x11c>)
 800152c:	edc3 7a00 	vstr	s15, [r3]
	  hum_value = BSP_HSENSOR_ReadHumidity();
 8001530:	f001 f9d2 	bl	80028d8 <BSP_HSENSOR_ReadHumidity>
 8001534:	ee07 0a90 	vmov	s15, r0
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <main+0x120>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
	  press_value = BSP_PSENSOR_ReadPressure();
 8001542:	f001 f9f7 	bl	8002934 <BSP_PSENSOR_ReadPressure>
 8001546:	ee07 0a90 	vmov	s15, r0
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <main+0x124>)
 8001550:	edc3 7a00 	vstr	s15, [r3]

	  data[0] = (int) temp_value;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <main+0x11c>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800155e:	ee17 3a90 	vmov	r3, s15
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <main+0x128>)
 8001566:	801a      	strh	r2, [r3, #0]
	  data[1] = (int) hum_value;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <main+0x120>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001572:	ee17 3a90 	vmov	r3, s15
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <main+0x128>)
 800157a:	805a      	strh	r2, [r3, #2]
	  data[2] = (int) press_value;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <main+0x124>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	ee17 3a90 	vmov	r3, s15
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <main+0x128>)
 800158e:	809a      	strh	r2, [r3, #4]
	  SendData(3, &data);
 8001590:	490b      	ldr	r1, [pc, #44]	; (80015c0 <main+0x128>)
 8001592:	2003      	movs	r0, #3
 8001594:	f000 fb80 	bl	8001c98 <SendData>
	  HAL_Delay(SampleTime); // Sau mỗi Sample time thì gửi data một lần.
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <main+0x12c>)
 800159a:	f001 fccb 	bl	8002f34 <HAL_Delay>
  {
 800159e:	e7c0      	b.n	8001522 <main+0x8a>
 80015a0:	08009508 	.word	0x08009508
 80015a4:	08009514 	.word	0x08009514
 80015a8:	20001018 	.word	0x20001018
 80015ac:	0800951c 	.word	0x0800951c
 80015b0:	08009530 	.word	0x08009530
 80015b4:	20001024 	.word	0x20001024
 80015b8:	20001028 	.word	0x20001028
 80015bc:	2000102c 	.word	0x2000102c
 80015c0:	2000101c 	.word	0x2000101c
 80015c4:	000493e0 	.word	0x000493e0

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b096      	sub	sp, #88	; 0x58
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2244      	movs	r2, #68	; 0x44
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 fdbd 	bl	8008156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ee:	f003 f983 	bl	80048f8 <HAL_PWREx_ControlVoltageScaling>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015f8:	f000 fbb4 	bl	8001d64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015fc:	f003 f95e 	bl	80048bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001600:	4b21      	ldr	r3, [pc, #132]	; (8001688 <SystemClock_Config+0xc0>)
 8001602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001606:	4a20      	ldr	r2, [pc, #128]	; (8001688 <SystemClock_Config+0xc0>)
 8001608:	f023 0318 	bic.w	r3, r3, #24
 800160c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001610:	2314      	movs	r3, #20
 8001612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001614:	2301      	movs	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001618:	2301      	movs	r3, #1
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001624:	2302      	movs	r3, #2
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001628:	2301      	movs	r3, #1
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001630:	2328      	movs	r3, #40	; 0x28
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001634:	2307      	movs	r3, #7
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001638:	2302      	movs	r3, #2
 800163a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800163c:	2302      	movs	r3, #2
 800163e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4618      	mov	r0, r3
 8001646:	f003 fa79 	bl	8004b3c <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001650:	f000 fb88 	bl	8001d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001654:	230f      	movs	r3, #15
 8001656:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001658:	2303      	movs	r3, #3
 800165a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	2104      	movs	r1, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fe41 	bl	80052f4 <HAL_RCC_ClockConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001678:	f000 fb74 	bl	8001d64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800167c:	f004 fb48 	bl	8005d10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001680:	bf00      	nop
 8001682:	3758      	adds	r7, #88	; 0x58
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000

0800168c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 8001692:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <MX_DFSDM1_Init+0x6c>)
 8001694:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 8001698:	2201      	movs	r2, #1
 800169a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ba:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016c4:	2204      	movs	r2, #4
 80016c6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016dc:	2200      	movs	r2, #0
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_DFSDM1_Init+0x68>)
 80016e2:	f001 fd5d 	bl	80031a0 <HAL_DFSDM_ChannelInit>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80016ec:	f000 fb3a 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000878 	.word	0x20000878
 80016f8:	40016020 	.word	0x40016020

080016fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <MX_I2C2_Init+0x74>)
 8001702:	4a1c      	ldr	r2, [pc, #112]	; (8001774 <MX_I2C2_Init+0x78>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MX_I2C2_Init+0x74>)
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <MX_I2C2_Init+0x7c>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_I2C2_Init+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <MX_I2C2_Init+0x74>)
 8001714:	2201      	movs	r2, #1
 8001716:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_I2C2_Init+0x74>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <MX_I2C2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <MX_I2C2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_I2C2_Init+0x74>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_I2C2_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001736:	480e      	ldr	r0, [pc, #56]	; (8001770 <MX_I2C2_Init+0x74>)
 8001738:	f002 f92f 	bl	800399a <HAL_I2C_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001742:	f000 fb0f 	bl	8001d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001746:	2100      	movs	r1, #0
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <MX_I2C2_Init+0x74>)
 800174a:	f002 fed7 	bl	80044fc <HAL_I2CEx_ConfigAnalogFilter>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001754:	f000 fb06 	bl	8001d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001758:	2100      	movs	r1, #0
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_I2C2_Init+0x74>)
 800175c:	f002 ff19 	bl	8004592 <HAL_I2CEx_ConfigDigitalFilter>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001766:	f000 fafd 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200008b0 	.word	0x200008b0
 8001774:	40005800 	.word	0x40005800
 8001778:	10909cec 	.word	0x10909cec

0800177c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <MX_QUADSPI_Init+0x48>)
 8001784:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 8001788:	2202      	movs	r2, #2
 800178a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 800178e:	2204      	movs	r2, #4
 8001790:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 8001794:	2210      	movs	r2, #16
 8001796:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 800179a:	2217      	movs	r2, #23
 800179c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_QUADSPI_Init+0x44>)
 80017ac:	f003 f90a 	bl	80049c4 <HAL_QSPI_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80017b6:	f000 fad5 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000904 	.word	0x20000904
 80017c4:	a0001000 	.word	0xa0001000

080017c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_SPI3_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_SPI3_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_SPI3_Init+0x74>)
 80017d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_SPI3_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_SPI3_Init+0x74>)
 80017e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017e6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_SPI3_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_SPI3_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_SPI3_Init+0x74>)
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_SPI3_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_SPI3_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_SPI3_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_SPI3_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_SPI3_Init+0x74>)
 8001816:	2207      	movs	r2, #7
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_SPI3_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_SPI3_Init+0x74>)
 8001822:	2208      	movs	r2, #8
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_SPI3_Init+0x74>)
 8001828:	f004 fc54 	bl	80060d4 <HAL_SPI_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001832:	f000 fa97 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000948 	.word	0x20000948
 8001840:	40003c00 	.word	0x40003c00

08001844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_USART1_UART_Init+0x58>)
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <MX_USART1_UART_Init+0x5c>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_USART1_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART1_UART_Init+0x58>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART1_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART1_UART_Init+0x58>)
 8001888:	f005 fb7a 	bl	8006f80 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001892:	f000 fa67 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200009ac 	.word	0x200009ac
 80018a0:	40013800 	.word	0x40013800

080018a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018aa:	4a15      	ldr	r2, [pc, #84]	; (8001900 <MX_USART3_UART_Init+0x5c>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USART3_UART_Init+0x58>)
 80018e8:	f005 fb4a 	bl	8006f80 <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018f2:	f000 fa37 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000a34 	.word	0x20000a34
 8001900:	40004800 	.word	0x40004800

08001904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800190a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800190e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001912:	2206      	movs	r2, #6
 8001914:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001918:	2202      	movs	r2, #2
 800191a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800191e:	2202      	movs	r2, #2
 8001920:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001948:	f002 fe6f 	bl	800462a <HAL_PCD_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001952:	f000 fa07 	bl	8001d64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000abc 	.word	0x20000abc

08001960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001976:	4bbc      	ldr	r3, [pc, #752]	; (8001c68 <MX_GPIO_Init+0x308>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4abb      	ldr	r2, [pc, #748]	; (8001c68 <MX_GPIO_Init+0x308>)
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4bb9      	ldr	r3, [pc, #740]	; (8001c68 <MX_GPIO_Init+0x308>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	4bb6      	ldr	r3, [pc, #728]	; (8001c68 <MX_GPIO_Init+0x308>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4ab5      	ldr	r2, [pc, #724]	; (8001c68 <MX_GPIO_Init+0x308>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4bb3      	ldr	r3, [pc, #716]	; (8001c68 <MX_GPIO_Init+0x308>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4bb0      	ldr	r3, [pc, #704]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4aaf      	ldr	r2, [pc, #700]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4bad      	ldr	r3, [pc, #692]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4aa9      	ldr	r2, [pc, #676]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4ba7      	ldr	r3, [pc, #668]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	4ba4      	ldr	r3, [pc, #656]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4aa3      	ldr	r2, [pc, #652]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4ba1      	ldr	r3, [pc, #644]	; (8001c68 <MX_GPIO_Init+0x308>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80019f4:	489d      	ldr	r0, [pc, #628]	; (8001c6c <MX_GPIO_Init+0x30c>)
 80019f6:	f001 ff95 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f248 1104 	movw	r1, #33028	; 0x8104
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f001 ff8e 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f24f 0104 	movw	r1, #61444	; 0xf004
 8001a0e:	4898      	ldr	r0, [pc, #608]	; (8001c70 <MX_GPIO_Init+0x310>)
 8001a10:	f001 ff88 	bl	8003924 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f241 0181 	movw	r1, #4225	; 0x1081
 8001a1a:	4896      	ldr	r0, [pc, #600]	; (8001c74 <MX_GPIO_Init+0x314>)
 8001a1c:	f001 ff82 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a26:	4893      	ldr	r0, [pc, #588]	; (8001c74 <MX_GPIO_Init+0x314>)
 8001a28:	f001 ff7c 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001a32:	4891      	ldr	r0, [pc, #580]	; (8001c78 <MX_GPIO_Init+0x318>)
 8001a34:	f001 ff76 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	488b      	ldr	r0, [pc, #556]	; (8001c6c <MX_GPIO_Init+0x30c>)
 8001a3e:	f001 ff71 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001a42:	f240 1315 	movw	r3, #277	; 0x115
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4884      	ldr	r0, [pc, #528]	; (8001c6c <MX_GPIO_Init+0x30c>)
 8001a5c:	f001 fcac 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001a60:	236a      	movs	r3, #106	; 0x6a
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	487d      	ldr	r0, [pc, #500]	; (8001c6c <MX_GPIO_Init+0x30c>)
 8001a76:	f001 fc9f 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4879      	ldr	r0, [pc, #484]	; (8001c78 <MX_GPIO_Init+0x318>)
 8001a92:	f001 fc91 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001a96:	233f      	movs	r3, #63	; 0x3f
 8001a98:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a9a:	230b      	movs	r3, #11
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4873      	ldr	r0, [pc, #460]	; (8001c78 <MX_GPIO_Init+0x318>)
 8001aaa:	f001 fc85 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001abe:	2308      	movs	r3, #8
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001acc:	f001 fc74 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001ad0:	f248 1304 	movw	r3, #33028	; 0x8104
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f001 fc64 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001af0:	2308      	movs	r3, #8
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b00:	2301      	movs	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b0e:	f001 fc53 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001b12:	23e0      	movs	r3, #224	; 0xe0
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b22:	2305      	movs	r3, #5
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b30:	f001 fc42 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001b34:	2301      	movs	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4849      	ldr	r0, [pc, #292]	; (8001c70 <MX_GPIO_Init+0x310>)
 8001b4a:	f001 fc35 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b52:	230b      	movs	r3, #11
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4843      	ldr	r0, [pc, #268]	; (8001c70 <MX_GPIO_Init+0x310>)
 8001b62:	f001 fc29 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001b66:	f24f 0304 	movw	r3, #61444	; 0xf004
 8001b6a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	483c      	ldr	r0, [pc, #240]	; (8001c70 <MX_GPIO_Init+0x310>)
 8001b80:	f001 fc1a 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001b84:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001b88:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4836      	ldr	r0, [pc, #216]	; (8001c74 <MX_GPIO_Init+0x314>)
 8001b9c:	f001 fc0c 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001ba0:	f243 0381 	movw	r3, #12417	; 0x3081
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	482e      	ldr	r0, [pc, #184]	; (8001c74 <MX_GPIO_Init+0x314>)
 8001bba:	f001 fbfd 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001bbe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4828      	ldr	r0, [pc, #160]	; (8001c78 <MX_GPIO_Init+0x318>)
 8001bd8:	f001 fbee 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001bdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001be2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <MX_GPIO_Init+0x318>)
 8001bf4:	f001 fbe0 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c08:	2305      	movs	r3, #5
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <MX_GPIO_Init+0x314>)
 8001c14:	f001 fbd0 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001c18:	2378      	movs	r3, #120	; 0x78
 8001c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4810      	ldr	r0, [pc, #64]	; (8001c74 <MX_GPIO_Init+0x314>)
 8001c34:	f001 fbc0 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3e:	2312      	movs	r3, #18
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_GPIO_Init+0x310>)
 8001c56:	f001 fbaf 	bl	80033b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2017      	movs	r0, #23
 8001c60:	f001 fa67 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c64:	2017      	movs	r0, #23
 8001c66:	e009      	b.n	8001c7c <MX_GPIO_Init+0x31c>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	48001000 	.word	0x48001000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000c00 	.word	0x48000c00
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	f001 fa75 	bl	800316a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	2028      	movs	r0, #40	; 0x28
 8001c86:	f001 fa54 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c8a:	2028      	movs	r0, #40	; 0x28
 8001c8c:	f001 fa6d 	bl	800316a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SendData>:

/* USER CODE BEGIN 4 */

void SendData(uint8_t numberOfField, uint16_t *value) {
 8001c98:	b5b0      	push	{r4, r5, r7, lr}
 8001c9a:	b0b6      	sub	sp, #216	; 0xd8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
	uint16_t SentDataLength;
	char field_buff[200] = {0};
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	22c4      	movs	r2, #196	; 0xc4
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f006 fa50 	bl	8008156 <memset>

	strcpy(http,"GET /update?api_key=");
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <SendData+0xbc>)
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <SendData+0xc0>)
 8001cba:	4614      	mov	r4, r2
 8001cbc:	461d      	mov	r5, r3
 8001cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc6:	6020      	str	r0, [r4, #0]
 8001cc8:	3404      	adds	r4, #4
 8001cca:	7021      	strb	r1, [r4, #0]
	strcat(http, THINGSPEAK_API_KEY);
 8001ccc:	4821      	ldr	r0, [pc, #132]	; (8001d54 <SendData+0xbc>)
 8001cce:	f7fe fa7f 	bl	80001d0 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <SendData+0xbc>)
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a20      	ldr	r2, [pc, #128]	; (8001d5c <SendData+0xc4>)
 8001cdc:	461d      	mov	r5, r3
 8001cde:	4614      	mov	r4, r2
 8001ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce2:	6028      	str	r0, [r5, #0]
 8001ce4:	6069      	str	r1, [r5, #4]
 8001ce6:	60aa      	str	r2, [r5, #8]
 8001ce8:	60eb      	str	r3, [r5, #12]
 8001cea:	7823      	ldrb	r3, [r4, #0]
 8001cec:	742b      	strb	r3, [r5, #16]

	for (int i = 0; i < numberOfField; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001cf4:	e019      	b.n	8001d2a <SendData+0x92>

		sprintf(field_buff, "&field%d=%u",i+1, value[i]);
 8001cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cfa:	1c59      	adds	r1, r3, #1
 8001cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	f107 0008 	add.w	r0, r7, #8
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	4914      	ldr	r1, [pc, #80]	; (8001d60 <SendData+0xc8>)
 8001d10:	f006 f9be 	bl	8008090 <siprintf>
		strcat(http, field_buff);
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	4619      	mov	r1, r3
 8001d1a:	480e      	ldr	r0, [pc, #56]	; (8001d54 <SendData+0xbc>)
 8001d1c:	f006 fa23 	bl	8008166 <strcat>
	for (int i = 0; i < numberOfField; i++) {
 8001d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001d24:	3301      	adds	r3, #1
 8001d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbe0      	blt.n	8001cf6 <SendData+0x5e>
	}
	WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength);
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <SendData+0xbc>)
 8001d36:	f7fe fa4b 	bl	80001d0 <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f107 03d2 	add.w	r3, r7, #210	; 0xd2
 8001d42:	4904      	ldr	r1, [pc, #16]	; (8001d54 <SendData+0xbc>)
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fb83 	bl	8001450 <WIFI_SendData>
}
 8001d4a:	bf00      	nop
 8001d4c:	37d8      	adds	r7, #216	; 0xd8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000fc8 	.word	0x20000fc8
 8001d58:	08009534 	.word	0x08009534
 8001d5c:	0800954c 	.word	0x0800954c
 8001d60:	08009560 	.word	0x08009560

08001d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <Error_Handler+0x8>
	...

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <HAL_MspInit+0x44>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_MspInit+0x44>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6613      	str	r3, [r2, #96]	; 0x60
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_MspInit+0x44>)
 8001d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_MspInit+0x44>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_MspInit+0x44>)
 8001d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d98:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_MspInit+0x44>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b0ac      	sub	sp, #176	; 0xb0
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2288      	movs	r2, #136	; 0x88
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f006 f9bc 	bl	8008156 <memset>
  if(DFSDM1_Init == 0)
 8001dde:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d142      	bne.n	8001e6c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fca0 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001e02:	f7ff ffaf 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001e36:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001e50:	2306      	movs	r3, #6
 8001e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4807      	ldr	r0, [pc, #28]	; (8001e7c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001e5e:	f001 faab 	bl	80033b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a02      	ldr	r2, [pc, #8]	; (8001e74 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001e6a:	6013      	str	r3, [r2, #0]
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	37b0      	adds	r7, #176	; 0xb0
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20001030 	.word	0x20001030
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	48001000 	.word	0x48001000

08001e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0ac      	sub	sp, #176	; 0xb0
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2288      	movs	r2, #136	; 0x88
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f006 f958 	bl	8008156 <memset>
  if(hi2c->Instance==I2C2)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a21      	ldr	r2, [pc, #132]	; (8001f30 <HAL_I2C_MspInit+0xb0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d13b      	bne.n	8001f28 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fc3d 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ec8:	f7ff ff4c 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_I2C_MspInit+0xb4>)
 8001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed0:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_I2C_MspInit+0xb4>)
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_I2C_MspInit+0xb4>)
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ee4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eec:	2312      	movs	r3, #18
 8001eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001efe:	2304      	movs	r3, #4
 8001f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	480b      	ldr	r0, [pc, #44]	; (8001f38 <HAL_I2C_MspInit+0xb8>)
 8001f0c:	f001 fa54 	bl	80033b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_I2C_MspInit+0xb4>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <HAL_I2C_MspInit+0xb4>)
 8001f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_I2C_MspInit+0xb4>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	37b0      	adds	r7, #176	; 0xb0
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40005800 	.word	0x40005800
 8001f34:	40021000 	.word	0x40021000
 8001f38:	48000400 	.word	0x48000400

08001f3c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_I2C_MspDeInit+0x3c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10f      	bne.n	8001f6e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_I2C_MspDeInit+0x40>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_I2C_MspDeInit+0x40>)
 8001f54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f58:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001f5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5e:	4808      	ldr	r0, [pc, #32]	; (8001f80 <HAL_I2C_MspDeInit+0x44>)
 8001f60:	f001 fbd4 	bl	800370c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_I2C_MspDeInit+0x44>)
 8001f6a:	f001 fbcf 	bl	800370c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005800 	.word	0x40005800
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	48000400 	.word	0x48000400

08001f84 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_QSPI_MspInit+0x7c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d128      	bne.n	8001ff8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_QSPI_MspInit+0x80>)
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001faa:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_QSPI_MspInit+0x80>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6513      	str	r3, [r2, #80]	; 0x50
 8001fb2:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_QSPI_MspInit+0x80>)
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_QSPI_MspInit+0x80>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_QSPI_MspInit+0x80>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_QSPI_MspInit+0x80>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001fd6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001fda:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001fe8:	230a      	movs	r3, #10
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <HAL_QSPI_MspInit+0x84>)
 8001ff4:	f001 f9e0 	bl	80033b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	a0001000 	.word	0xa0001000
 8002004:	40021000 	.word	0x40021000
 8002008:	48001000 	.word	0x48001000

0800200c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_SPI_MspInit+0x7c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d128      	bne.n	8002080 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	4a16      	ldr	r2, [pc, #88]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002038:	6593      	str	r3, [r2, #88]	; 0x58
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_SPI_MspInit+0x80>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <HAL_SPI_MspInit+0x80>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <HAL_SPI_MspInit+0x80>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800205e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800206c:	2303      	movs	r3, #3
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002070:	2306      	movs	r3, #6
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <HAL_SPI_MspInit+0x84>)
 800207c:	f001 f99c 	bl	80033b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40003c00 	.word	0x40003c00
 800208c:	40021000 	.word	0x40021000
 8002090:	48000800 	.word	0x48000800

08002094 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a08      	ldr	r2, [pc, #32]	; (80020c4 <HAL_SPI_MspDeInit+0x30>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10a      	bne.n	80020bc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_SPI_MspDeInit+0x34>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_SPI_MspDeInit+0x34>)
 80020ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80020b2:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <HAL_SPI_MspDeInit+0x38>)
 80020b8:	f001 fb28 	bl	800370c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40003c00 	.word	0x40003c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000800 	.word	0x48000800

080020d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0ae      	sub	sp, #184	; 0xb8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	2288      	movs	r2, #136	; 0x88
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 f830 	bl	8008156 <memset>
  if(huart->Instance==USART1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_UART_MspInit+0x134>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d13b      	bne.n	8002178 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002100:	2301      	movs	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002104:	2300      	movs	r3, #0
 8002106:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002108:	f107 031c 	add.w	r3, r7, #28
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fb15 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002118:	f7ff fe24 	bl	8001d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_UART_MspInit+0x138>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	4a39      	ldr	r2, [pc, #228]	; (8002208 <HAL_UART_MspInit+0x138>)
 8002122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002126:	6613      	str	r3, [r2, #96]	; 0x60
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_UART_MspInit+0x138>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b34      	ldr	r3, [pc, #208]	; (8002208 <HAL_UART_MspInit+0x138>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	4a33      	ldr	r2, [pc, #204]	; (8002208 <HAL_UART_MspInit+0x138>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_UART_MspInit+0x138>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002164:	2307      	movs	r3, #7
 8002166:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800216e:	4619      	mov	r1, r3
 8002170:	4826      	ldr	r0, [pc, #152]	; (800220c <HAL_UART_MspInit+0x13c>)
 8002172:	f001 f921 	bl	80033b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002176:	e040      	b.n	80021fa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_UART_MspInit+0x140>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d13b      	bne.n	80021fa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002182:	2304      	movs	r3, #4
 8002184:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002186:	2300      	movs	r3, #0
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4618      	mov	r0, r3
 8002190:	f003 fad4 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800219a:	f7ff fde3 	bl	8001d64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_UART_MspInit+0x138>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_UART_MspInit+0x138>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_UART_MspInit+0x138>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_UART_MspInit+0x138>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <HAL_UART_MspInit+0x138>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_UART_MspInit+0x138>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021e8:	2307      	movs	r3, #7
 80021ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <HAL_UART_MspInit+0x144>)
 80021f6:	f001 f8df 	bl	80033b8 <HAL_GPIO_Init>
}
 80021fa:	bf00      	nop
 80021fc:	37b8      	adds	r7, #184	; 0xb8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40013800 	.word	0x40013800
 8002208:	40021000 	.word	0x40021000
 800220c:	48000400 	.word	0x48000400
 8002210:	40004800 	.word	0x40004800
 8002214:	48000c00 	.word	0x48000c00

08002218 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b0ac      	sub	sp, #176	; 0xb0
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2288      	movs	r2, #136	; 0x88
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f005 ff8c 	bl	8008156 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002246:	d17c      	bne.n	8002342 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800224e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800225e:	2318      	movs	r3, #24
 8002260:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002262:	2307      	movs	r3, #7
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002266:	2302      	movs	r3, #2
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800226a:	2302      	movs	r3, #2
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800226e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4618      	mov	r0, r3
 800227a:	f003 fa5f 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002284:	f7ff fd6e 	bl	8001d64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_PCD_MspInit+0x134>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <HAL_PCD_MspInit+0x134>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_PCD_MspInit+0x134>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80022a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f001 f87b 	bl	80033b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80022c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022dc:	230a      	movs	r3, #10
 80022de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ec:	f001 f864 	bl	80033b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_PCD_MspInit+0x134>)
 80022f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_PCD_MspInit+0x134>)
 80022f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_PCD_MspInit+0x134>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_PCD_MspInit+0x134>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d114      	bne.n	800233e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_PCD_MspInit+0x134>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_PCD_MspInit+0x134>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	; 0x58
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_PCD_MspInit+0x134>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800232c:	f002 fb3a 	bl	80049a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_PCD_MspInit+0x134>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_PCD_MspInit+0x134>)
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800233c:	e001      	b.n	8002342 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800233e:	f002 fb31 	bl	80049a4 <HAL_PWREx_EnableVddUSB>
}
 8002342:	bf00      	nop
 8002344:	37b0      	adds	r7, #176	; 0xb0
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <NMI_Handler+0x4>

08002356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <MemManage_Handler+0x4>

08002362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <UsageFault_Handler+0x4>

0800236e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f000 fdaa 	bl	8002ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80023a8:	2020      	movs	r0, #32
 80023aa:	f001 fad3 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80023ae:	2040      	movs	r0, #64	; 0x40
 80023b0:	f001 fad0 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80023b4:	2080      	movs	r0, #128	; 0x80
 80023b6:	f001 facd 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80023ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023be:	f001 fac9 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80023ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023ce:	f001 fac1 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80023d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023d6:	f001 fabd 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80023da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023de:	f001 fab9 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80023e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023e6:	f001 fab5 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80023ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023ee:	f001 fab1 	bl	8003954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  return 1;
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_kill>:

int _kill(int pid, int sig)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002410:	f005 ff84 	bl	800831c <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	2216      	movs	r2, #22
 8002418:	601a      	str	r2, [r3, #0]
  return -1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_exit>:

void _exit (int status)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800242e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffe7 	bl	8002406 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002438:	e7fe      	b.n	8002438 <_exit+0x12>

0800243a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e00a      	b.n	8002462 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800244c:	f3af 8000 	nop.w
 8002450:	4601      	mov	r1, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	60ba      	str	r2, [r7, #8]
 8002458:	b2ca      	uxtb	r2, r1
 800245a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3301      	adds	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	dbf0      	blt.n	800244c <_read+0x12>
  }

  return len;
 800246a:	687b      	ldr	r3, [r7, #4]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e009      	b.n	800249a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	60ba      	str	r2, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	dbf1      	blt.n	8002486 <_write+0x12>
  }
  return len;
 80024a2:	687b      	ldr	r3, [r7, #4]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_close>:

int _close(int file)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024d4:	605a      	str	r2, [r3, #4]
  return 0;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_isatty>:

int _isatty(int file)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800251c:	4a14      	ldr	r2, [pc, #80]	; (8002570 <_sbrk+0x5c>)
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_sbrk+0x60>)
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <_sbrk+0x64>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <_sbrk+0x64>)
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <_sbrk+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <_sbrk+0x64>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d207      	bcs.n	8002554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002544:	f005 feea 	bl	800831c <__errno>
 8002548:	4603      	mov	r3, r0
 800254a:	220c      	movs	r2, #12
 800254c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800254e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002552:	e009      	b.n	8002568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255a:	4b07      	ldr	r3, [pc, #28]	; (8002578 <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <_sbrk+0x64>)
 8002564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20018000 	.word	0x20018000
 8002574:	00000400 	.word	0x00000400
 8002578:	20001034 	.word	0x20001034
 800257c:	20001210 	.word	0x20001210

08002580 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a8:	f7ff ffea 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <LoopForever+0xe>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	; (80025f0 <LoopForever+0x16>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f005 fea9 	bl	8008328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025d6:	f7fe ff5f 	bl	8001498 <main>

080025da <LoopForever>:

LoopForever:
    b LoopForever
 80025da:	e7fe      	b.n	80025da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80025e8:	080096a4 	.word	0x080096a4
  ldr r2, =_sbss
 80025ec:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80025f0:	2000120c 	.word	0x2000120c

080025f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC1_2_IRQHandler>
	...

080025f8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <I2Cx_MspInit+0xa8>)
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002618:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800261c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800261e:	2312      	movs	r3, #18
 8002620:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002622:	2301      	movs	r3, #1
 8002624:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800262a:	2304      	movs	r3, #4
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800262e:	f107 0314 	add.w	r3, r7, #20
 8002632:	4619      	mov	r1, r3
 8002634:	481b      	ldr	r0, [pc, #108]	; (80026a4 <I2Cx_MspInit+0xac>)
 8002636:	f000 febf 	bl	80033b8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4619      	mov	r1, r3
 8002640:	4818      	ldr	r0, [pc, #96]	; (80026a4 <I2Cx_MspInit+0xac>)
 8002642:	f000 feb9 	bl	80033b8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <I2Cx_MspInit+0xa8>)
 800264c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
 8002652:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002668:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800266a:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <I2Cx_MspInit+0xa8>)
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <I2Cx_MspInit+0xa8>)
 8002670:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002674:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	210f      	movs	r1, #15
 800267a:	2021      	movs	r0, #33	; 0x21
 800267c:	f000 fd59 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002680:	2021      	movs	r0, #33	; 0x21
 8002682:	f000 fd72 	bl	800316a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	210f      	movs	r1, #15
 800268a:	2022      	movs	r0, #34	; 0x22
 800268c:	f000 fd51 	bl	8003132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002690:	2022      	movs	r0, #34	; 0x22
 8002692:	f000 fd6a 	bl	800316a <HAL_NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	; 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000
 80026a4:	48000400 	.word	0x48000400

080026a8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a12      	ldr	r2, [pc, #72]	; (80026fc <I2Cx_Init+0x54>)
 80026b4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <I2Cx_Init+0x58>)
 80026ba:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff89 	bl	80025f8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f001 f957 	bl	800399a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80026ec:	2100      	movs	r1, #0
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f001 ff04 	bl	80044fc <HAL_I2CEx_ConfigAnalogFilter>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40005800 	.word	0x40005800
 8002700:	00702681 	.word	0x00702681

08002704 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af04      	add	r7, sp, #16
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	72fb      	strb	r3, [r7, #11]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	b299      	uxth	r1, r3
 8002726:	88f8      	ldrh	r0, [r7, #6]
 8002728:	893a      	ldrh	r2, [r7, #8]
 800272a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4603      	mov	r3, r0
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f001 fb0c 	bl	8003d58 <HAL_I2C_Mem_Read>
 8002740:	4603      	mov	r3, r0
 8002742:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002744:	7dfb      	ldrb	r3, [r7, #23]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	4619      	mov	r1, r3
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f832 	bl	80027b8 <I2Cx_Error>
  }
  return status;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b08a      	sub	sp, #40	; 0x28
 8002762:	af04      	add	r7, sp, #16
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	4608      	mov	r0, r1
 8002768:	4611      	mov	r1, r2
 800276a:	461a      	mov	r2, r3
 800276c:	4603      	mov	r3, r0
 800276e:	72fb      	strb	r3, [r7, #11]
 8002770:	460b      	mov	r3, r1
 8002772:	813b      	strh	r3, [r7, #8]
 8002774:	4613      	mov	r3, r2
 8002776:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800277c:	7afb      	ldrb	r3, [r7, #11]
 800277e:	b299      	uxth	r1, r3
 8002780:	88f8      	ldrh	r0, [r7, #6]
 8002782:	893a      	ldrh	r2, [r7, #8]
 8002784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	4603      	mov	r3, r0
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f001 f9cb 	bl	8003b30 <HAL_I2C_Mem_Write>
 800279a:	4603      	mov	r3, r0
 800279c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80027a4:	7afb      	ldrb	r3, [r7, #11]
 80027a6:	4619      	mov	r1, r3
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 f805 	bl	80027b8 <I2Cx_Error>
  }
  return status;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f001 f983 	bl	8003ad0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff ff6c 	bl	80026a8 <I2Cx_Init>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <SENSOR_IO_Init+0x10>)
 80027de:	f7ff ff63 	bl	80026a8 <I2Cx_Init>
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20001038 	.word	0x20001038

080027ec <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	460b      	mov	r3, r1
 80027f8:	71bb      	strb	r3, [r7, #6]
 80027fa:	4613      	mov	r3, r2
 80027fc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027fe:	79bb      	ldrb	r3, [r7, #6]
 8002800:	b29a      	uxth	r2, r3
 8002802:	79f9      	ldrb	r1, [r7, #7]
 8002804:	2301      	movs	r3, #1
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	1d7b      	adds	r3, r7, #5
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	4803      	ldr	r0, [pc, #12]	; (800281c <SENSOR_IO_Write+0x30>)
 8002810:	f7ff ffa5 	bl	800275e <I2Cx_WriteMultiple>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20001038 	.word	0x20001038

08002820 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	4603      	mov	r3, r0
 8002828:	460a      	mov	r2, r1
 800282a:	71fb      	strb	r3, [r7, #7]
 800282c:	4613      	mov	r3, r2
 800282e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002834:	79bb      	ldrb	r3, [r7, #6]
 8002836:	b29a      	uxth	r2, r3
 8002838:	79f9      	ldrb	r1, [r7, #7]
 800283a:	2301      	movs	r3, #1
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	f107 030f 	add.w	r3, r7, #15
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2301      	movs	r3, #1
 8002846:	4804      	ldr	r0, [pc, #16]	; (8002858 <SENSOR_IO_Read+0x38>)
 8002848:	f7ff ff5c 	bl	8002704 <I2Cx_ReadMultiple>

  return read_value;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20001038 	.word	0x20001038

0800285c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af02      	add	r7, sp, #8
 8002862:	603a      	str	r2, [r7, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	460b      	mov	r3, r1
 800286c:	71bb      	strb	r3, [r7, #6]
 800286e:	4613      	mov	r3, r2
 8002870:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002872:	79bb      	ldrb	r3, [r7, #6]
 8002874:	b29a      	uxth	r2, r3
 8002876:	79f9      	ldrb	r1, [r7, #7]
 8002878:	88bb      	ldrh	r3, [r7, #4]
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2301      	movs	r3, #1
 8002882:	4804      	ldr	r0, [pc, #16]	; (8002894 <SENSOR_IO_ReadMultiple+0x38>)
 8002884:	f7ff ff3e 	bl	8002704 <I2Cx_ReadMultiple>
 8002888:	4603      	mov	r3, r0
 800288a:	b29b      	uxth	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20001038 	.word	0x20001038

08002898 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <BSP_HSENSOR_Init+0x38>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	20be      	movs	r0, #190	; 0xbe
 80028a4:	4798      	blx	r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	2bbc      	cmp	r3, #188	; 0xbc
 80028aa:	d002      	beq.n	80028b2 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e009      	b.n	80028c6 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <BSP_HSENSOR_Init+0x3c>)
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <BSP_HSENSOR_Init+0x38>)
 80028b6:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <BSP_HSENSOR_Init+0x3c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	20be      	movs	r0, #190	; 0xbe
 80028c0:	4798      	blx	r3
    ret = HSENSOR_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80028c6:	687b      	ldr	r3, [r7, #4]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000004 	.word	0x20000004
 80028d4:	2000108c 	.word	0x2000108c

080028d8 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <BSP_HSENSOR_ReadHumidity+0x18>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	20be      	movs	r0, #190	; 0xbe
 80028e4:	4798      	blx	r3
 80028e6:	eef0 7a40 	vmov.f32	s15, s0
}
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000108c 	.word	0x2000108c

080028f4 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <BSP_PSENSOR_Init+0x38>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	20ba      	movs	r0, #186	; 0xba
 8002900:	4798      	blx	r3
 8002902:	4603      	mov	r3, r0
 8002904:	2bb1      	cmp	r3, #177	; 0xb1
 8002906:	d002      	beq.n	800290e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	e009      	b.n	8002922 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <BSP_PSENSOR_Init+0x3c>)
 8002910:	4a06      	ldr	r2, [pc, #24]	; (800292c <BSP_PSENSOR_Init+0x38>)
 8002912:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <BSP_PSENSOR_Init+0x3c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	20ba      	movs	r0, #186	; 0xba
 800291c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002922:	687b      	ldr	r3, [r7, #4]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000020 	.word	0x20000020
 8002930:	20001090 	.word	0x20001090

08002934 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <BSP_PSENSOR_ReadPressure+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	20ba      	movs	r0, #186	; 0xba
 8002940:	4798      	blx	r3
 8002942:	eef0 7a40 	vmov.f32	s15, s0
}
 8002946:	eeb0 0a67 	vmov.f32	s0, s15
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20001090 	.word	0x20001090

08002950 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <BSP_TSENSOR_Init+0x30>)
 800295c:	4a09      	ldr	r2, [pc, #36]	; (8002984 <BSP_TSENSOR_Init+0x34>)
 800295e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002960:	f7ff ff3a 	bl	80027d8 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <BSP_TSENSOR_Init+0x30>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2100      	movs	r1, #0
 800296c:	20be      	movs	r0, #190	; 0xbe
 800296e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002974:	79fb      	ldrb	r3, [r7, #7]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20001094 	.word	0x20001094
 8002984:	20000010 	.word	0x20000010

08002988 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <BSP_TSENSOR_ReadTemp+0x18>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	20be      	movs	r0, #190	; 0xbe
 8002994:	4798      	blx	r3
 8002996:	eef0 7a40 	vmov.f32	s15, s0
}
 800299a:	eeb0 0a67 	vmov.f32	s0, s15
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20001094 	.word	0x20001094

080029a4 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2120      	movs	r1, #32
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff33 	bl	8002820 <SENSOR_IO_Read>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f023 0303 	bic.w	r3, r3, #3
 80029d4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029e4:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	2120      	movs	r1, #32
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fefc 	bl	80027ec <SENSOR_IO_Write>
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002a0a:	f7ff fee5 	bl	80027d8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	210f      	movs	r1, #15
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff03 	bl	8002820 <SENSOR_IO_Read>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	b2d8      	uxtb	r0, r3
 8002a36:	f107 020c 	add.w	r2, r7, #12
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	21b0      	movs	r1, #176	; 0xb0
 8002a3e:	f7ff ff0d 	bl	800285c <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002a42:	7b3b      	ldrb	r3, [r7, #12]
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002a4a:	7b7b      	ldrb	r3, [r7, #13]
 8002a4c:	085b      	lsrs	r3, r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	b2d8      	uxtb	r0, r3
 8002a56:	f107 020c 	add.w	r2, r7, #12
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	21b6      	movs	r1, #182	; 0xb6
 8002a5e:	f7ff fefd 	bl	800285c <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a62:	7b7b      	ldrb	r3, [r7, #13]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	b21a      	sxth	r2, r3
 8002a68:	7b3b      	ldrb	r3, [r7, #12]
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	b2d8      	uxtb	r0, r3
 8002a74:	f107 020c 	add.w	r2, r7, #12
 8002a78:	2302      	movs	r3, #2
 8002a7a:	21ba      	movs	r1, #186	; 0xba
 8002a7c:	f7ff feee 	bl	800285c <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a80:	7b7b      	ldrb	r3, [r7, #13]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	b21a      	sxth	r2, r3
 8002a86:	7b3b      	ldrb	r3, [r7, #12]
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	b2d8      	uxtb	r0, r3
 8002a92:	f107 020c 	add.w	r2, r7, #12
 8002a96:	2302      	movs	r3, #2
 8002a98:	21a8      	movs	r1, #168	; 0xa8
 8002a9a:	f7ff fedf 	bl	800285c <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002a9e:	7b7b      	ldrb	r3, [r7, #13]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	7b3b      	ldrb	r3, [r7, #12]
 8002aa6:	b21b      	sxth	r3, r3
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002aac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ab0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002abe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002ac2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ad4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002ad8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afa:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002afe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b0a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002b0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b12:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b58 <HTS221_H_ReadHumidity+0x130>
 8002b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	dd01      	ble.n	8002b24 <HTS221_H_ReadHumidity+0xfc>
 8002b20:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <HTS221_H_ReadHumidity+0x134>)
 8002b22:	e00a      	b.n	8002b3a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b30:	d502      	bpl.n	8002b38 <HTS221_H_ReadHumidity+0x110>
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e000      	b.n	8002b3a <HTS221_H_ReadHumidity+0x112>
 8002b38:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002b3a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b40:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b48:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	447a0000 	.word	0x447a0000
 8002b5c:	447a0000 	.word	0x447a0000

08002b60 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	6039      	str	r1, [r7, #0]
 8002b6a:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2120      	movs	r1, #32
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fe54 	bl	8002820 <SENSOR_IO_Read>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
 8002b7e:	f023 0304 	bic.w	r3, r3, #4
 8002b82:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	2120      	movs	r1, #32
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fe1d 	bl	80027ec <SENSOR_IO_Write>
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b088      	sub	sp, #32
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	b2d8      	uxtb	r0, r3
 8002bc8:	f107 0208 	add.w	r2, r7, #8
 8002bcc:	2302      	movs	r3, #2
 8002bce:	21b2      	movs	r1, #178	; 0xb2
 8002bd0:	f7ff fe44 	bl	800285c <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2135      	movs	r1, #53	; 0x35
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fe20 	bl	8002820 <SENSOR_IO_Read>
 8002be0:	4603      	mov	r3, r0
 8002be2:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002be4:	7ffb      	ldrb	r3, [r7, #31]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	b21b      	sxth	r3, r3
 8002bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	7a3b      	ldrb	r3, [r7, #8]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002bf8:	7ffb      	ldrb	r3, [r7, #31]
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	b21a      	sxth	r2, r3
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002c0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c10:	10db      	asrs	r3, r3, #3
 8002c12:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002c14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c18:	10db      	asrs	r3, r3, #3
 8002c1a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	b2d8      	uxtb	r0, r3
 8002c20:	f107 0208 	add.w	r2, r7, #8
 8002c24:	2304      	movs	r3, #4
 8002c26:	21bc      	movs	r1, #188	; 0xbc
 8002c28:	f7ff fe18 	bl	800285c <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c2c:	7a7b      	ldrb	r3, [r7, #9]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	b21a      	sxth	r2, r3
 8002c32:	7a3b      	ldrb	r3, [r7, #8]
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	4313      	orrs	r3, r2
 8002c38:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b21a      	sxth	r2, r3
 8002c40:	7abb      	ldrb	r3, [r7, #10]
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	4313      	orrs	r3, r2
 8002c46:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	b2d8      	uxtb	r0, r3
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	2302      	movs	r3, #2
 8002c52:	21aa      	movs	r1, #170	; 0xaa
 8002c54:	f7ff fe02 	bl	800285c <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c58:	7a7b      	ldrb	r3, [r7, #9]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	7a3b      	ldrb	r3, [r7, #8]
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002c66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c7c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c8e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	ee07 3a90 	vmov	s15, r3
}
 8002cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f879 	bl	8002dcc <LPS22HB_Init>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002cf0:	f7ff fd72 	bl	80027d8 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	210f      	movs	r1, #15
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fd90 	bl	8002820 <SENSOR_IO_Read>
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	74fb      	strb	r3, [r7, #19]
 8002d22:	e013      	b.n	8002d4c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002d24:	88fb      	ldrh	r3, [r7, #6]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	3328      	adds	r3, #40	; 0x28
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	7cfc      	ldrb	r4, [r7, #19]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f7ff fd74 	bl	8002820 <SENSOR_IO_Read>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f104 0318 	add.w	r3, r4, #24
 8002d40:	443b      	add	r3, r7
 8002d42:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	74fb      	strb	r3, [r7, #19]
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d9e8      	bls.n	8002d24 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	74fb      	strb	r3, [r7, #19]
 8002d56:	e00f      	b.n	8002d78 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	443b      	add	r3, r7
 8002d5e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002d62:	461a      	mov	r2, r3
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	3301      	adds	r3, #1
 8002d76:	74fb      	strb	r3, [r7, #19]
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d9ec      	bls.n	8002d58 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d8e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2264      	movs	r2, #100	; 0x64
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da01      	bge.n	8002da4 <LPS22HB_P_ReadPressure+0x94>
 8002da0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002da4:	131b      	asrs	r3, r3, #12
 8002da6:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002dc8 <LPS22HB_P_ReadPressure+0xb8>
 8002db6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002dba:	eef0 7a66 	vmov.f32	s15, s13
}
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	42c80000 	.word	0x42c80000

08002dcc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	211a      	movs	r1, #26
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fd1f 	bl	8002820 <SENSOR_IO_Read>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	7bfa      	ldrb	r2, [r7, #15]
 8002dfc:	211a      	movs	r1, #26
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fcf4 	bl	80027ec <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fd08 	bl	8002820 <SENSOR_IO_Read>
 8002e10:	4603      	mov	r3, r0
 8002e12:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e22:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	f023 0302 	bic.w	r3, r3, #2
 8002e2a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	2110      	movs	r1, #16
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fcd5 	bl	80027ec <SENSOR_IO_Write>
}  
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 f961 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 f80e 	bl	8002e7c <HAL_InitTick>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	e001      	b.n	8002e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e6c:	f7fe ff80 	bl	8001d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e70:	79fb      	ldrb	r3, [r7, #7]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_InitTick+0x6c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d023      	beq.n	8002ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_InitTick+0x70>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_InitTick+0x6c>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f96d 	bl	8003186 <HAL_SYSTICK_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d809      	bhi.n	8002ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec0:	f000 f937 	bl	8003132 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	; (8002ef0 <HAL_InitTick+0x74>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e007      	b.n	8002edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e004      	b.n	8002edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e001      	b.n	8002edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000030 	.word	0x20000030
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	2000002c 	.word	0x2000002c

08002ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_IncTick+0x20>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x24>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_IncTick+0x24>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000030 	.word	0x20000030
 8002f18:	20001098 	.word	0x20001098

08002f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_GetTick+0x14>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20001098 	.word	0x20001098

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff ffee 	bl	8002f1c <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffde 	bl	8002f1c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000030 	.word	0x20000030

08002f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fae:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	60d3      	str	r3, [r2, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <__NVIC_GetPriorityGrouping+0x18>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	f003 0307 	and.w	r3, r3, #7
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db0b      	blt.n	800300a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	f003 021f 	and.w	r2, r3, #31
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <__NVIC_EnableIRQ+0x38>)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2001      	movs	r0, #1
 8003002:	fa00 f202 	lsl.w	r2, r0, r2
 8003006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000e100 	.word	0xe000e100

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff29 	bl	8002f7c <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003144:	f7ff ff3e 	bl	8002fc4 <__NVIC_GetPriorityGrouping>
 8003148:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	6978      	ldr	r0, [r7, #20]
 8003150:	f7ff ff8e 	bl	8003070 <NVIC_EncodePriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff5d 	bl	800301c <__NVIC_SetPriority>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff31 	bl	8002fe0 <__NVIC_EnableIRQ>
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa2 	bl	80030d8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0ac      	b.n	800330c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f8b2 	bl	8003320 <DFSDM_GetChannelFromInstance>
 80031bc:	4603      	mov	r3, r0
 80031be:	4a55      	ldr	r2, [pc, #340]	; (8003314 <HAL_DFSDM_ChannelInit+0x174>)
 80031c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e09f      	b.n	800330c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fe fdf3 	bl	8001db8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_DFSDM_ChannelInit+0x178>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	4a4f      	ldr	r2, [pc, #316]	; (8003318 <HAL_DFSDM_ChannelInit+0x178>)
 80031da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80031dc:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <HAL_DFSDM_ChannelInit+0x178>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d125      	bne.n	8003230 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80031e4:	4b4d      	ldr	r3, [pc, #308]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a4c      	ldr	r2, [pc, #304]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 80031ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80031f0:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	4948      	ldr	r1, [pc, #288]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a46      	ldr	r2, [pc, #280]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 8003204:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003208:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	791b      	ldrb	r3, [r3, #4]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003212:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	493f      	ldr	r1, [pc, #252]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a3c      	ldr	r2, [pc, #240]	; (800331c <HAL_DFSDM_ChannelInit+0x17c>)
 800322a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800322e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800323e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800324e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003254:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 020f 	bic.w	r2, r2, #15
 800326c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003294:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f002 0207 	and.w	r2, r2, #7
 80032c0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f810 	bl	8003320 <DFSDM_GetChannelFromInstance>
 8003300:	4602      	mov	r2, r0
 8003302:	4904      	ldr	r1, [pc, #16]	; (8003314 <HAL_DFSDM_ChannelInit+0x174>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200010a0 	.word	0x200010a0
 8003318:	2000109c 	.word	0x2000109c
 800331c:	40016000 	.word	0x40016000

08003320 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <DFSDM_GetChannelFromInstance+0x7c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d102      	bne.n	8003336 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e02b      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <DFSDM_GetChannelFromInstance+0x80>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d102      	bne.n	8003344 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800333e:	2301      	movs	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	e024      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <DFSDM_GetChannelFromInstance+0x84>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800334c:	2302      	movs	r3, #2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e01d      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <DFSDM_GetChannelFromInstance+0x88>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d102      	bne.n	8003360 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800335a:	2304      	movs	r3, #4
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	e016      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <DFSDM_GetChannelFromInstance+0x8c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003368:	2305      	movs	r3, #5
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e00f      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <DFSDM_GetChannelFromInstance+0x90>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d102      	bne.n	800337c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003376:	2306      	movs	r3, #6
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	e008      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <DFSDM_GetChannelFromInstance+0x94>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d102      	bne.n	800338a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003384:	2307      	movs	r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e001      	b.n	800338e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800338a:	2303      	movs	r3, #3
 800338c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40016000 	.word	0x40016000
 80033a0:	40016020 	.word	0x40016020
 80033a4:	40016040 	.word	0x40016040
 80033a8:	40016080 	.word	0x40016080
 80033ac:	400160a0 	.word	0x400160a0
 80033b0:	400160c0 	.word	0x400160c0
 80033b4:	400160e0 	.word	0x400160e0

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033c6:	e17f      	b.n	80036c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8171 	beq.w	80036c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d005      	beq.n	80033f8 <HAL_GPIO_Init+0x40>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d130      	bne.n	800345a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800342e:	2201      	movs	r2, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f003 0201 	and.w	r2, r3, #1
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b03      	cmp	r3, #3
 8003464:	d118      	bne.n	8003498 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800346c:	2201      	movs	r2, #1
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4013      	ands	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	08db      	lsrs	r3, r3, #3
 8003482:	f003 0201 	and.w	r2, r3, #1
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d017      	beq.n	80034d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d123      	bne.n	8003528 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	08da      	lsrs	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3208      	adds	r2, #8
 80034e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	220f      	movs	r2, #15
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	08da      	lsrs	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3208      	adds	r2, #8
 8003522:	6939      	ldr	r1, [r7, #16]
 8003524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2203      	movs	r2, #3
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80ac 	beq.w	80036c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356a:	4b5f      	ldr	r3, [pc, #380]	; (80036e8 <HAL_GPIO_Init+0x330>)
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <HAL_GPIO_Init+0x330>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6613      	str	r3, [r2, #96]	; 0x60
 8003576:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_GPIO_Init+0x330>)
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003582:	4a5a      	ldr	r2, [pc, #360]	; (80036ec <HAL_GPIO_Init+0x334>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035ac:	d025      	beq.n	80035fa <HAL_GPIO_Init+0x242>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4f      	ldr	r2, [pc, #316]	; (80036f0 <HAL_GPIO_Init+0x338>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01f      	beq.n	80035f6 <HAL_GPIO_Init+0x23e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4e      	ldr	r2, [pc, #312]	; (80036f4 <HAL_GPIO_Init+0x33c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d019      	beq.n	80035f2 <HAL_GPIO_Init+0x23a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4d      	ldr	r2, [pc, #308]	; (80036f8 <HAL_GPIO_Init+0x340>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0x236>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4c      	ldr	r2, [pc, #304]	; (80036fc <HAL_GPIO_Init+0x344>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00d      	beq.n	80035ea <HAL_GPIO_Init+0x232>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4b      	ldr	r2, [pc, #300]	; (8003700 <HAL_GPIO_Init+0x348>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <HAL_GPIO_Init+0x22e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4a      	ldr	r2, [pc, #296]	; (8003704 <HAL_GPIO_Init+0x34c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_GPIO_Init+0x22a>
 80035de:	2306      	movs	r3, #6
 80035e0:	e00c      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e00a      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035e6:	2305      	movs	r3, #5
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x244>
 80035fa:	2300      	movs	r3, #0
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800360c:	4937      	ldr	r1, [pc, #220]	; (80036ec <HAL_GPIO_Init+0x334>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_GPIO_Init+0x350>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_GPIO_Init+0x350>)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_GPIO_Init+0x350>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003668:	4a27      	ldr	r2, [pc, #156]	; (8003708 <HAL_GPIO_Init+0x350>)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800366e:	4b26      	ldr	r3, [pc, #152]	; (8003708 <HAL_GPIO_Init+0x350>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003692:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_GPIO_Init+0x350>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_GPIO_Init+0x350>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_GPIO_Init+0x350>)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3301      	adds	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa22 f303 	lsr.w	r3, r2, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f47f ae78 	bne.w	80033c8 <HAL_GPIO_Init+0x10>
  }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40010000 	.word	0x40010000
 80036f0:	48000400 	.word	0x48000400
 80036f4:	48000800 	.word	0x48000800
 80036f8:	48000c00 	.word	0x48000c00
 80036fc:	48001000 	.word	0x48001000
 8003700:	48001400 	.word	0x48001400
 8003704:	48001800 	.word	0x48001800
 8003708:	40010400 	.word	0x40010400

0800370c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800371a:	e0cd      	b.n	80038b8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800371c:	2201      	movs	r2, #1
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80c0 	beq.w	80038b2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003732:	4a68      	ldr	r2, [pc, #416]	; (80038d4 <HAL_GPIO_DeInit+0x1c8>)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3302      	adds	r3, #2
 800373a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	220f      	movs	r2, #15
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800375a:	d025      	beq.n	80037a8 <HAL_GPIO_DeInit+0x9c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a5e      	ldr	r2, [pc, #376]	; (80038d8 <HAL_GPIO_DeInit+0x1cc>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d01f      	beq.n	80037a4 <HAL_GPIO_DeInit+0x98>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a5d      	ldr	r2, [pc, #372]	; (80038dc <HAL_GPIO_DeInit+0x1d0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d019      	beq.n	80037a0 <HAL_GPIO_DeInit+0x94>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a5c      	ldr	r2, [pc, #368]	; (80038e0 <HAL_GPIO_DeInit+0x1d4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_GPIO_DeInit+0x90>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a5b      	ldr	r2, [pc, #364]	; (80038e4 <HAL_GPIO_DeInit+0x1d8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00d      	beq.n	8003798 <HAL_GPIO_DeInit+0x8c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a5a      	ldr	r2, [pc, #360]	; (80038e8 <HAL_GPIO_DeInit+0x1dc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <HAL_GPIO_DeInit+0x88>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a59      	ldr	r2, [pc, #356]	; (80038ec <HAL_GPIO_DeInit+0x1e0>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_GPIO_DeInit+0x84>
 800378c:	2306      	movs	r3, #6
 800378e:	e00c      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 8003790:	2307      	movs	r3, #7
 8003792:	e00a      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 8003794:	2305      	movs	r3, #5
 8003796:	e008      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 8003798:	2304      	movs	r3, #4
 800379a:	e006      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 800379c:	2303      	movs	r3, #3
 800379e:	e004      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_GPIO_DeInit+0x9e>
 80037a8:	2300      	movs	r3, #0
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	f002 0203 	and.w	r2, r2, #3
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	4093      	lsls	r3, r2
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d132      	bne.n	8003820 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80037ba:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	494b      	ldr	r1, [pc, #300]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80037c8:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4947      	ldr	r1, [pc, #284]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80037d6:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	4944      	ldr	r1, [pc, #272]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80037e4:	4b42      	ldr	r3, [pc, #264]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	4940      	ldr	r1, [pc, #256]	; (80038f0 <HAL_GPIO_DeInit+0x1e4>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_GPIO_DeInit+0x1c8>)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	43da      	mvns	r2, r3
 8003812:	4830      	ldr	r0, [pc, #192]	; (80038d4 <HAL_GPIO_DeInit+0x1c8>)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	400a      	ands	r2, r1
 800381a:	3302      	adds	r3, #2
 800381c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	2103      	movs	r1, #3
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	220f      	movs	r2, #15
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	08d2      	lsrs	r2, r2, #3
 8003854:	4019      	ands	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2103      	movs	r1, #3
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	401a      	ands	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	2101      	movs	r1, #1
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2103      	movs	r1, #3
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	401a      	ands	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a2:	2101      	movs	r1, #1
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	401a      	ands	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f af2b 	bne.w	800371c <HAL_GPIO_DeInit+0x10>
  }
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40010000 	.word	0x40010000
 80038d8:	48000400 	.word	0x48000400
 80038dc:	48000800 	.word	0x48000800
 80038e0:	48000c00 	.word	0x48000c00
 80038e4:	48001000 	.word	0x48001000
 80038e8:	48001400 	.word	0x48001400
 80038ec:	48001800 	.word	0x48001800
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e001      	b.n	8003916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003934:	787b      	ldrb	r3, [r7, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003940:	e002      	b.n	8003948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800396a:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f806 	bl	8003984 <HAL_GPIO_EXTI_Callback>
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40010400 	.word	0x40010400

08003984 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e08d      	b.n	8003ac8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fe fa5d 	bl	8001e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2224      	movs	r2, #36	; 0x24
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d107      	bne.n	8003a14 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e006      	b.n	8003a22 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d108      	bne.n	8003a3c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e007      	b.n	8003a4c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69d9      	ldr	r1, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e021      	b.n	8003b26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2224      	movs	r2, #36	; 0x24
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe fa1e 	bl	8001f3c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af02      	add	r7, sp, #8
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	817b      	strh	r3, [r7, #10]
 8003b42:	460b      	mov	r3, r1
 8003b44:	813b      	strh	r3, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	f040 80f9 	bne.w	8003d4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_I2C_Mem_Write+0x34>
 8003b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0ed      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Mem_Write+0x4e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0e6      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b86:	f7ff f9c9 	bl	8002f1c <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2319      	movs	r3, #25
 8003b92:	2201      	movs	r2, #1
 8003b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fac3 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0d1      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2221      	movs	r2, #33	; 0x21
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2240      	movs	r2, #64	; 0x40
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bd0:	88f8      	ldrh	r0, [r7, #6]
 8003bd2:	893a      	ldrh	r2, [r7, #8]
 8003bd4:	8979      	ldrh	r1, [r7, #10]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4603      	mov	r3, r0
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f9d3 	bl	8003f8c <I2C_RequestMemoryWrite>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0a9      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2bff      	cmp	r3, #255	; 0xff
 8003c00:	d90e      	bls.n	8003c20 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	22ff      	movs	r2, #255	; 0xff
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	2300      	movs	r3, #0
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fc3d 	bl	8004498 <I2C_TransferConfig>
 8003c1e:	e00f      	b.n	8003c40 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	8979      	ldrh	r1, [r7, #10]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fc2c 	bl	8004498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fabc 	bl	80041c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e07b      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d034      	beq.n	8003cf8 <HAL_I2C_Mem_Write+0x1c8>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d130      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fa3f 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04d      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2bff      	cmp	r3, #255	; 0xff
 8003cb8:	d90e      	bls.n	8003cd8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fbe1 	bl	8004498 <I2C_TransferConfig>
 8003cd6:	e00f      	b.n	8003cf8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fbd0 	bl	8004498 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d19e      	bne.n	8003c40 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 faa2 	bl	8004250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e01a      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6859      	ldr	r1, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <HAL_I2C_Mem_Write+0x224>)
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	fe00e800 	.word	0xfe00e800

08003d58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	f040 80fd 	bne.w	8003f7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_I2C_Mem_Read+0x34>
 8003d86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0f1      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_I2C_Mem_Read+0x4e>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e0ea      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dae:	f7ff f8b5 	bl	8002f1c <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2319      	movs	r3, #25
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f9af 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0d5      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2222      	movs	r2, #34	; 0x22
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003df8:	88f8      	ldrh	r0, [r7, #6]
 8003dfa:	893a      	ldrh	r2, [r7, #8]
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4603      	mov	r3, r0
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f913 	bl	8004034 <I2C_RequestMemoryRead>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0ad      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d90e      	bls.n	8003e48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	22ff      	movs	r2, #255	; 0xff
 8003e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	8979      	ldrh	r1, [r7, #10]
 8003e38:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <HAL_I2C_Mem_Read+0x22c>)
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fb29 	bl	8004498 <I2C_TransferConfig>
 8003e46:	e00f      	b.n	8003e68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	8979      	ldrh	r1, [r7, #10]
 8003e5a:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_I2C_Mem_Read+0x22c>)
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fb18 	bl	8004498 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2104      	movs	r1, #4
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f956 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e07c      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d034      	beq.n	8003f28 <HAL_I2C_Mem_Read+0x1d0>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d130      	bne.n	8003f28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f927 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e04d      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2bff      	cmp	r3, #255	; 0xff
 8003ee8:	d90e      	bls.n	8003f08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	8979      	ldrh	r1, [r7, #10]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fac9 	bl	8004498 <I2C_TransferConfig>
 8003f06:	e00f      	b.n	8003f28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	8979      	ldrh	r1, [r7, #10]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fab8 	bl	8004498 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d19a      	bne.n	8003e68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f98a 	bl	8004250 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e01a      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_I2C_Mem_Read+0x230>)
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e000      	b.n	8003f7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f7a:	2302      	movs	r3, #2
  }
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	80002400 	.word	0x80002400
 8003f88:	fe00e800 	.word	0xfe00e800

08003f8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	4608      	mov	r0, r1
 8003f96:	4611      	mov	r1, r2
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	813b      	strh	r3, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <I2C_RequestMemoryWrite+0xa4>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fa6f 	bl	8004498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f8ff 	bl	80041c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e02c      	b.n	8004028 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8003fde:	e015      	b.n	800400c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f8e5 	bl	80041c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e012      	b.n	8004028 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004002:	893b      	ldrh	r3, [r7, #8]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2200      	movs	r2, #0
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f884 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	80002000 	.word	0x80002000

08004034 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	460b      	mov	r3, r1
 8004048:	813b      	strh	r3, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	8979      	ldrh	r1, [r7, #10]
 8004054:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <I2C_RequestMemoryRead+0xa4>)
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	2300      	movs	r3, #0
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fa1c 	bl	8004498 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	69b9      	ldr	r1, [r7, #24]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f8ac 	bl	80041c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e02c      	b.n	80040ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800407a:	893b      	ldrh	r3, [r7, #8]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
 8004084:	e015      	b.n	80040b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004086:	893b      	ldrh	r3, [r7, #8]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	b29b      	uxth	r3, r3
 800408c:	b2da      	uxtb	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	69b9      	ldr	r1, [r7, #24]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f892 	bl	80041c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e012      	b.n	80040ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040a8:	893b      	ldrh	r3, [r7, #8]
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2140      	movs	r1, #64	; 0x40
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f831 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	80002000 	.word	0x80002000

080040dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d103      	bne.n	80040fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d007      	beq.n	8004118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	619a      	str	r2, [r3, #24]
  }
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004134:	e031      	b.n	800419a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800413c:	d02d      	beq.n	800419a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe feed 	bl	8002f1c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d122      	bne.n	800419a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	429a      	cmp	r2, r3
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	429a      	cmp	r2, r3
 8004170:	d113      	bne.n	800419a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e00f      	b.n	80041ba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4013      	ands	r3, r2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	bf0c      	ite	eq
 80041aa:	2301      	moveq	r3, #1
 80041ac:	2300      	movne	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d0be      	beq.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041ce:	e033      	b.n	8004238 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f87f 	bl	80042d8 <I2C_IsErrorOccurred>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e031      	b.n	8004248 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ea:	d025      	beq.n	8004238 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fe fe96 	bl	8002f1c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11a      	bne.n	8004238 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d013      	beq.n	8004238 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e007      	b.n	8004248 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d1c4      	bne.n	80041d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800425c:	e02f      	b.n	80042be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f838 	bl	80042d8 <I2C_IsErrorOccurred>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e02d      	b.n	80042ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004272:	f7fe fe53 	bl	8002f1c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	d302      	bcc.n	8004288 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11a      	bne.n	80042be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d013      	beq.n	80042be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e007      	b.n	80042ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d1c8      	bne.n	800425e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	d068      	beq.n	80043d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2210      	movs	r2, #16
 800430a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800430c:	e049      	b.n	80043a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004314:	d045      	beq.n	80043a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe fe01 	bl	8002f1c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_IsErrorOccurred+0x54>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13a      	bne.n	80043a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004336:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800433e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800434a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434e:	d121      	bne.n	8004394 <I2C_IsErrorOccurred+0xbc>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004356:	d01d      	beq.n	8004394 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b20      	cmp	r3, #32
 800435c:	d01a      	beq.n	8004394 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800436e:	f7fe fdd5 	bl	8002f1c <HAL_GetTick>
 8004372:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004374:	e00e      	b.n	8004394 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004376:	f7fe fdd1 	bl	8002f1c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b19      	cmp	r3, #25
 8004382:	d907      	bls.n	8004394 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f043 0320 	orr.w	r3, r3, #32
 800438a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004392:	e006      	b.n	80043a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d1e9      	bne.n	8004376 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d003      	beq.n	80043b8 <I2C_IsErrorOccurred+0xe0>
 80043b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0aa      	beq.n	800430e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2220      	movs	r2, #32
 80043c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800441a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f043 0302 	orr.w	r3, r3, #2
 8004432:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fe45 	bl	80040dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6859      	ldr	r1, [r3, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <I2C_IsErrorOccurred+0x1bc>)
 800445e:	400b      	ands	r3, r1
 8004460:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	431a      	orrs	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800448a:	4618      	mov	r0, r3
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	fe00e800 	.word	0xfe00e800

08004498 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	4613      	mov	r3, r2
 80044a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044b0:	7a7b      	ldrb	r3, [r7, #9]
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	0d5b      	lsrs	r3, r3, #21
 80044d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80044d6:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <I2C_TransferConfig+0x60>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	43db      	mvns	r3, r3
 80044dc:	ea02 0103 	and.w	r1, r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	03ff63ff 	.word	0x03ff63ff

080044fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b20      	cmp	r3, #32
 8004510:	d138      	bne.n	8004584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800451c:	2302      	movs	r3, #2
 800451e:	e032      	b.n	8004586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800454e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d139      	bne.n	800461c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e033      	b.n	800461e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2224      	movs	r2, #36	; 0x24
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800462a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462c:	b08f      	sub	sp, #60	; 0x3c
 800462e:	af0a      	add	r7, sp, #40	; 0x28
 8004630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e116      	b.n	800486a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd fdde 	bl	8002218 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2203      	movs	r2, #3
 8004660:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f003 f9c7 	bl	8007a0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	687e      	ldr	r6, [r7, #4]
 8004688:	466d      	mov	r5, sp
 800468a:	f106 0410 	add.w	r4, r6, #16
 800468e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800469a:	e885 0003 	stmia.w	r5, {r0, r1}
 800469e:	1d33      	adds	r3, r6, #4
 80046a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046a2:	6838      	ldr	r0, [r7, #0]
 80046a4:	f003 f987 	bl	80079b6 <USB_CoreInit>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0d7      	b.n	800486a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2100      	movs	r1, #0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f003 f9b5 	bl	8007a30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	e04a      	b.n	8004762 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	333d      	adds	r3, #61	; 0x3d
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	333c      	adds	r3, #60	; 0x3c
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	b298      	uxth	r0, r3
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3356      	adds	r3, #86	; 0x56
 8004708:	4602      	mov	r2, r0
 800470a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3340      	adds	r3, #64	; 0x40
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3344      	adds	r3, #68	; 0x44
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3348      	adds	r3, #72	; 0x48
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	334c      	adds	r3, #76	; 0x4c
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	3301      	adds	r3, #1
 8004760:	73fb      	strb	r3, [r7, #15]
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d3af      	bcc.n	80046cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e044      	b.n	80047fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004772:	7bfa      	ldrb	r2, [r7, #15]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	4413      	add	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
 80047f8:	3301      	adds	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3b5      	bcc.n	8004772 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	687e      	ldr	r6, [r7, #4]
 800480e:	466d      	mov	r5, sp
 8004810:	f106 0410 	add.w	r4, r6, #16
 8004814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800481a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004820:	e885 0003 	stmia.w	r5, {r0, r1}
 8004824:	1d33      	adds	r3, r6, #4
 8004826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	f003 f94d 	bl	8007ac8 <USB_DevInit>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e014      	b.n	800486a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f80a 	bl	8004872 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f003 faef 	bl	8007e46 <USB_DevDisconnect>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004872 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a4:	f043 0303 	orr.w	r3, r3, #3
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40007000 	.word	0x40007000

080048dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40007000 	.word	0x40007000

080048f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004906:	d130      	bne.n	800496a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004908:	4b23      	ldr	r3, [pc, #140]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004914:	d038      	beq.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004916:	4b20      	ldr	r3, [pc, #128]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2232      	movs	r2, #50	; 0x32
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	0c9b      	lsrs	r3, r3, #18
 8004938:	3301      	adds	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800493c:	e002      	b.n	8004944 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3b01      	subs	r3, #1
 8004942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004944:	4b14      	ldr	r3, [pc, #80]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d102      	bne.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f2      	bne.n	800493e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004964:	d110      	bne.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e00f      	b.n	800498a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800496a:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004976:	d007      	beq.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004980:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004986:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40007000 	.word	0x40007000
 800499c:	20000000 	.word	0x20000000
 80049a0:	431bde83 	.word	0x431bde83

080049a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049b2:	6053      	str	r3, [r2, #4]
}
 80049b4:	bf00      	nop
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40007000 	.word	0x40007000

080049c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80049cc:	f7fe faa6 	bl	8002f1c <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e063      	b.n	8004aa4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fd fac7 	bl	8001f84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80049f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f858 	bl	8004ab0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	021a      	lsls	r2, r3, #8
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	2120      	movs	r1, #32
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f850 	bl	8004acc <QSPI_WaitFlagStateUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d131      	bne.n	8004a9a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f023 0310 	bic.w	r3, r3, #16
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	0611      	lsls	r1, r2, #24
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	4311      	orrs	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	430b      	orrs	r3, r1
 8004a56:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <HAL_QSPI_Init+0xe8>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6912      	ldr	r2, [r2, #16]
 8004a66:	0411      	lsls	r1, r2, #16
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6952      	ldr	r2, [r2, #20]
 8004a6c:	4311      	orrs	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6992      	ldr	r2, [r2, #24]
 8004a72:	4311      	orrs	r1, r2
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	ffe0f8fe 	.word	0xffe0f8fe

08004ab0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004adc:	e01a      	b.n	8004b14 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae4:	d016      	beq.n	8004b14 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fe fa19 	bl	8002f1c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2204      	movs	r2, #4
 8004b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e00e      	b.n	8004b32 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bf14      	ite	ne
 8004b22:	2301      	movne	r3, #1
 8004b24:	2300      	moveq	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d1d6      	bne.n	8004ade <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e3ca      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b4e:	4b97      	ldr	r3, [pc, #604]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b58:	4b94      	ldr	r3, [pc, #592]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80e4 	beq.w	8004d38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_RCC_OscConfig+0x4a>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b0c      	cmp	r3, #12
 8004b7a:	f040 808b 	bne.w	8004c94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	f040 8087 	bne.w	8004c94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b86:	4b89      	ldr	r3, [pc, #548]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_RCC_OscConfig+0x62>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e3a2      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	4b82      	ldr	r3, [pc, #520]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x7c>
 8004bae:	4b7f      	ldr	r3, [pc, #508]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb6:	e005      	b.n	8004bc4 <HAL_RCC_OscConfig+0x88>
 8004bb8:	4b7c      	ldr	r3, [pc, #496]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d223      	bcs.n	8004c10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fd55 	bl	800567c <RCC_SetFlashLatencyFromMSIRange>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e383      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bdc:	4b73      	ldr	r3, [pc, #460]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a72      	ldr	r2, [pc, #456]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004be2:	f043 0308 	orr.w	r3, r3, #8
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b70      	ldr	r3, [pc, #448]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	496d      	ldr	r1, [pc, #436]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bfa:	4b6c      	ldr	r3, [pc, #432]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	4968      	ldr	r1, [pc, #416]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	604b      	str	r3, [r1, #4]
 8004c0e:	e025      	b.n	8004c5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c10:	4b66      	ldr	r3, [pc, #408]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a65      	ldr	r2, [pc, #404]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c16:	f043 0308 	orr.w	r3, r3, #8
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	4b63      	ldr	r3, [pc, #396]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4960      	ldr	r1, [pc, #384]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	495b      	ldr	r1, [pc, #364]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fd15 	bl	800567c <RCC_SetFlashLatencyFromMSIRange>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e343      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c5c:	f000 fc4a 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b52      	ldr	r3, [pc, #328]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	4950      	ldr	r1, [pc, #320]	; (8004db0 <HAL_RCC_OscConfig+0x274>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	4a4e      	ldr	r2, [pc, #312]	; (8004db4 <HAL_RCC_OscConfig+0x278>)
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c7c:	4b4e      	ldr	r3, [pc, #312]	; (8004db8 <HAL_RCC_OscConfig+0x27c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe f8fb 	bl	8002e7c <HAL_InitTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d052      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	e327      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d032      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c9c:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a42      	ldr	r2, [pc, #264]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ca8:	f7fe f938 	bl	8002f1c <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cb0:	f7fe f934 	bl	8002f1c <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e310      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a36      	ldr	r2, [pc, #216]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cd4:	f043 0308 	orr.w	r3, r3, #8
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	4b34      	ldr	r3, [pc, #208]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4931      	ldr	r1, [pc, #196]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cec:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	492c      	ldr	r1, [pc, #176]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
 8004d00:	e01a      	b.n	8004d38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a29      	ldr	r2, [pc, #164]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d0e:	f7fe f905 	bl	8002f1c <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d16:	f7fe f901 	bl	8002f1c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e2dd      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCC_OscConfig+0x1da>
 8004d34:	e000      	b.n	8004d38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d074      	beq.n	8004e2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b08      	cmp	r3, #8
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x21a>
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b0c      	cmp	r3, #12
 8004d4e:	d10e      	bne.n	8004d6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d064      	beq.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d160      	bne.n	8004e2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e2ba      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x24a>
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e026      	b.n	8004dd4 <HAL_RCC_OscConfig+0x298>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8e:	d115      	bne.n	8004dbc <HAL_RCC_OscConfig+0x280>
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a05      	ldr	r2, [pc, #20]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a02      	ldr	r2, [pc, #8]	; (8004dac <HAL_RCC_OscConfig+0x270>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e014      	b.n	8004dd4 <HAL_RCC_OscConfig+0x298>
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	0800956c 	.word	0x0800956c
 8004db4:	20000000 	.word	0x20000000
 8004db8:	2000002c 	.word	0x2000002c
 8004dbc:	4ba0      	ldr	r3, [pc, #640]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a9f      	ldr	r2, [pc, #636]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b9d      	ldr	r3, [pc, #628]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a9c      	ldr	r2, [pc, #624]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d013      	beq.n	8004e04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fe f89e 	bl	8002f1c <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004de4:	f7fe f89a 	bl	8002f1c <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b64      	cmp	r3, #100	; 0x64
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e276      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004df6:	4b92      	ldr	r3, [pc, #584]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x2a8>
 8004e02:	e014      	b.n	8004e2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fe f88a 	bl	8002f1c <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e0c:	f7fe f886 	bl	8002f1c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e262      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e1e:	4b88      	ldr	r3, [pc, #544]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2d0>
 8004e2a:	e000      	b.n	8004e2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d060      	beq.n	8004efc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_OscConfig+0x310>
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	d119      	bne.n	8004e7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d116      	bne.n	8004e7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4c:	4b7c      	ldr	r3, [pc, #496]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x328>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e23f      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e64:	4b76      	ldr	r3, [pc, #472]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	061b      	lsls	r3, r3, #24
 8004e72:	4973      	ldr	r1, [pc, #460]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e78:	e040      	b.n	8004efc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d023      	beq.n	8004eca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e82:	4b6f      	ldr	r3, [pc, #444]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6e      	ldr	r2, [pc, #440]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fe f845 	bl	8002f1c <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e96:	f7fe f841 	bl	8002f1c <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e21d      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ea8:	4b65      	ldr	r3, [pc, #404]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb4:	4b62      	ldr	r3, [pc, #392]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	061b      	lsls	r3, r3, #24
 8004ec2:	495f      	ldr	r1, [pc, #380]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
 8004ec8:	e018      	b.n	8004efc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eca:	4b5d      	ldr	r3, [pc, #372]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a5c      	ldr	r2, [pc, #368]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fe f821 	bl	8002f1c <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ede:	f7fe f81d 	bl	8002f1c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1f9      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1f0      	bne.n	8004ede <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d03c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01c      	beq.n	8004f4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f10:	4b4b      	ldr	r3, [pc, #300]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f16:	4a4a      	ldr	r2, [pc, #296]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fd fffc 	bl	8002f1c <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f28:	f7fd fff8 	bl	8002f1c <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e1d4      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3a:	4b41      	ldr	r3, [pc, #260]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0ef      	beq.n	8004f28 <HAL_RCC_OscConfig+0x3ec>
 8004f48:	e01b      	b.n	8004f82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f4a:	4b3d      	ldr	r3, [pc, #244]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f50:	4a3b      	ldr	r2, [pc, #236]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fd ffdf 	bl	8002f1c <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f62:	f7fd ffdb 	bl	8002f1c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1b7      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f74:	4b32      	ldr	r3, [pc, #200]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1ef      	bne.n	8004f62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80a6 	beq.w	80050dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f90:	2300      	movs	r3, #0
 8004f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f94:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	4a26      	ldr	r2, [pc, #152]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004faa:	6593      	str	r3, [r2, #88]	; 0x58
 8004fac:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbc:	4b21      	ldr	r3, [pc, #132]	; (8005044 <HAL_RCC_OscConfig+0x508>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d118      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fc8:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <HAL_RCC_OscConfig+0x508>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_RCC_OscConfig+0x508>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd4:	f7fd ffa2 	bl	8002f1c <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fdc:	f7fd ff9e 	bl	8002f1c <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e17a      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_RCC_OscConfig+0x508>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d108      	bne.n	8005014 <HAL_RCC_OscConfig+0x4d8>
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005012:	e029      	b.n	8005068 <HAL_RCC_OscConfig+0x52c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b05      	cmp	r3, #5
 800501a:	d115      	bne.n	8005048 <HAL_RCC_OscConfig+0x50c>
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	4a07      	ldr	r2, [pc, #28]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8005024:	f043 0304 	orr.w	r3, r3, #4
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	4a03      	ldr	r2, [pc, #12]	; (8005040 <HAL_RCC_OscConfig+0x504>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800503c:	e014      	b.n	8005068 <HAL_RCC_OscConfig+0x52c>
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000
 8005044:	40007000 	.word	0x40007000
 8005048:	4b9c      	ldr	r3, [pc, #624]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	4a9b      	ldr	r2, [pc, #620]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005058:	4b98      	ldr	r3, [pc, #608]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	4a97      	ldr	r2, [pc, #604]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005060:	f023 0304 	bic.w	r3, r3, #4
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d016      	beq.n	800509e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fd ff54 	bl	8002f1c <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005076:	e00a      	b.n	800508e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fd ff50 	bl	8002f1c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e12a      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ed      	beq.n	8005078 <HAL_RCC_OscConfig+0x53c>
 800509c:	e015      	b.n	80050ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fd ff3d 	bl	8002f1c <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd ff39 	bl	8002f1c <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e113      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050bc:	4b7f      	ldr	r3, [pc, #508]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1ed      	bne.n	80050a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ca:	7ffb      	ldrb	r3, [r7, #31]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d105      	bne.n	80050dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d0:	4b7a      	ldr	r3, [pc, #488]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	4a79      	ldr	r2, [pc, #484]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80050d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 80fe 	beq.w	80052e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	f040 80d0 	bne.w	8005290 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050f0:	4b72      	ldr	r3, [pc, #456]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f003 0203 	and.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	429a      	cmp	r2, r3
 8005102:	d130      	bne.n	8005166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	3b01      	subs	r3, #1
 8005110:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d127      	bne.n	8005166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11f      	bne.n	8005166 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005130:	2a07      	cmp	r2, #7
 8005132:	bf14      	ite	ne
 8005134:	2201      	movne	r2, #1
 8005136:	2200      	moveq	r2, #0
 8005138:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513a:	4293      	cmp	r3, r2
 800513c:	d113      	bne.n	8005166 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	3b01      	subs	r3, #1
 800514c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d109      	bne.n	8005166 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	3b01      	subs	r3, #1
 8005160:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d06e      	beq.n	8005244 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d069      	beq.n	8005240 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800516c:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005178:	4b50      	ldr	r3, [pc, #320]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0ad      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005188:	4b4c      	ldr	r3, [pc, #304]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a4b      	ldr	r2, [pc, #300]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800518e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005192:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005194:	f7fd fec2 	bl	8002f1c <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800519c:	f7fd febe 	bl	8002f1c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e09a      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ba:	4b40      	ldr	r3, [pc, #256]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	4b40      	ldr	r3, [pc, #256]	; (80052c0 <HAL_RCC_OscConfig+0x784>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ca:	3a01      	subs	r2, #1
 80051cc:	0112      	lsls	r2, r2, #4
 80051ce:	4311      	orrs	r1, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051d4:	0212      	lsls	r2, r2, #8
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051dc:	0852      	lsrs	r2, r2, #1
 80051de:	3a01      	subs	r2, #1
 80051e0:	0552      	lsls	r2, r2, #21
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051e8:	0852      	lsrs	r2, r2, #1
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0652      	lsls	r2, r2, #25
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051f4:	0912      	lsrs	r2, r2, #4
 80051f6:	0452      	lsls	r2, r2, #17
 80051f8:	430a      	orrs	r2, r1
 80051fa:	4930      	ldr	r1, [pc, #192]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005200:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2d      	ldr	r2, [pc, #180]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800520c:	4b2b      	ldr	r3, [pc, #172]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005216:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005218:	f7fd fe80 	bl	8002f1c <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd fe7c 	bl	8002f1c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e058      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005232:	4b22      	ldr	r3, [pc, #136]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f0      	beq.n	8005220 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800523e:	e050      	b.n	80052e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e04f      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005244:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d148      	bne.n	80052e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005250:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800525a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800525c:	4b17      	ldr	r3, [pc, #92]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a16      	ldr	r2, [pc, #88]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005268:	f7fd fe58 	bl	8002f1c <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fd fe54 	bl	8002f1c <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e030      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	4b0e      	ldr	r3, [pc, #56]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x734>
 800528e:	e028      	b.n	80052e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d023      	beq.n	80052de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005296:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a08      	ldr	r2, [pc, #32]	; (80052bc <HAL_RCC_OscConfig+0x780>)
 800529c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fd fe3b 	bl	8002f1c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a8:	e00c      	b.n	80052c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fd fe37 	bl	8002f1c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d905      	bls.n	80052c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e013      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
 80052bc:	40021000 	.word	0x40021000
 80052c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c4:	4b09      	ldr	r3, [pc, #36]	; (80052ec <HAL_RCC_OscConfig+0x7b0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ec      	bne.n	80052aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052d0:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCC_OscConfig+0x7b0>)
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	4905      	ldr	r1, [pc, #20]	; (80052ec <HAL_RCC_OscConfig+0x7b0>)
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <HAL_RCC_OscConfig+0x7b4>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60cb      	str	r3, [r1, #12]
 80052dc:	e001      	b.n	80052e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000
 80052f0:	feeefffc 	.word	0xfeeefffc

080052f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0e7      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005308:	4b75      	ldr	r3, [pc, #468]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d910      	bls.n	8005338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005316:	4b72      	ldr	r3, [pc, #456]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f023 0207 	bic.w	r2, r3, #7
 800531e:	4970      	ldr	r1, [pc, #448]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005326:	4b6e      	ldr	r3, [pc, #440]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0cf      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d010      	beq.n	8005366 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	4b66      	ldr	r3, [pc, #408]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005350:	429a      	cmp	r2, r3
 8005352:	d908      	bls.n	8005366 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b63      	ldr	r3, [pc, #396]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4960      	ldr	r1, [pc, #384]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d04c      	beq.n	800540c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b03      	cmp	r3, #3
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537a:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d121      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0a6      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005392:	4b54      	ldr	r3, [pc, #336]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d115      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e09a      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053aa:	4b4e      	ldr	r3, [pc, #312]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e08e      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e086      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ca:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f023 0203 	bic.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4943      	ldr	r1, [pc, #268]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fd fd9e 	bl	8002f1c <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e4:	f7fd fd9a 	bl	8002f1c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e06e      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	4b3a      	ldr	r3, [pc, #232]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 020c 	and.w	r2, r3, #12
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	429a      	cmp	r2, r3
 800540a:	d1eb      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	429a      	cmp	r2, r3
 8005426:	d208      	bcs.n	800543a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005428:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	492b      	ldr	r1, [pc, #172]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	4313      	orrs	r3, r2
 8005438:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d210      	bcs.n	800546a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f023 0207 	bic.w	r2, r3, #7
 8005450:	4923      	ldr	r1, [pc, #140]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_RCC_ClockConfig+0x1ec>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e036      	b.n	80054d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d008      	beq.n	8005488 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005476:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4918      	ldr	r1, [pc, #96]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4910      	ldr	r1, [pc, #64]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054a8:	f000 f824 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_RCC_ClockConfig+0x1f0>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	490b      	ldr	r1, [pc, #44]	; (80054e8 <HAL_RCC_ClockConfig+0x1f4>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	4a09      	ldr	r2, [pc, #36]	; (80054ec <HAL_RCC_ClockConfig+0x1f8>)
 80054c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_ClockConfig+0x1fc>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fd fcd5 	bl	8002e7c <HAL_InitTick>
 80054d2:	4603      	mov	r3, r0
 80054d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40022000 	.word	0x40022000
 80054e4:	40021000 	.word	0x40021000
 80054e8:	0800956c 	.word	0x0800956c
 80054ec:	20000000 	.word	0x20000000
 80054f0:	2000002c 	.word	0x2000002c

080054f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	2300      	movs	r3, #0
 8005500:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	4b3e      	ldr	r3, [pc, #248]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x34>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d121      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d11e      	bne.n	8005566 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005528:	4b34      	ldr	r3, [pc, #208]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005534:	4b31      	ldr	r3, [pc, #196]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e005      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005558:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10d      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005564:	e00a      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b04      	cmp	r3, #4
 800556a:	d102      	bne.n	8005572 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <HAL_RCC_GetSysClockFreq+0x110>)
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e004      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d101      	bne.n	800557c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005578:	4b23      	ldr	r3, [pc, #140]	; (8005608 <HAL_RCC_GetSysClockFreq+0x114>)
 800557a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d134      	bne.n	80055ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005582:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0xa6>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d003      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005598:	e005      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800559a:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <HAL_RCC_GetSysClockFreq+0x110>)
 800559c:	617b      	str	r3, [r7, #20]
      break;
 800559e:	e005      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055a0:	4b19      	ldr	r3, [pc, #100]	; (8005608 <HAL_RCC_GetSysClockFreq+0x114>)
 80055a2:	617b      	str	r3, [r7, #20]
      break;
 80055a4:	e002      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	617b      	str	r3, [r7, #20]
      break;
 80055aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	3301      	adds	r3, #1
 80055b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055ba:	4b10      	ldr	r3, [pc, #64]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	fb03 f202 	mul.w	r2, r3, r2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <HAL_RCC_GetSysClockFreq+0x108>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	0e5b      	lsrs	r3, r3, #25
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	3301      	adds	r3, #1
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055ec:	69bb      	ldr	r3, [r7, #24]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	08009584 	.word	0x08009584
 8005604:	00f42400 	.word	0x00f42400
 8005608:	007a1200 	.word	0x007a1200

0800560c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <HAL_RCC_GetHCLKFreq+0x14>)
 8005612:	681b      	ldr	r3, [r3, #0]
}
 8005614:	4618      	mov	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	20000000 	.word	0x20000000

08005624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005628:	f7ff fff0 	bl	800560c <HAL_RCC_GetHCLKFreq>
 800562c:	4602      	mov	r2, r0
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	4904      	ldr	r1, [pc, #16]	; (800564c <HAL_RCC_GetPCLK1Freq+0x28>)
 800563a:	5ccb      	ldrb	r3, [r1, r3]
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005644:	4618      	mov	r0, r3
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40021000 	.word	0x40021000
 800564c:	0800957c 	.word	0x0800957c

08005650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005654:	f7ff ffda 	bl	800560c <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	0adb      	lsrs	r3, r3, #11
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4904      	ldr	r1, [pc, #16]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40021000 	.word	0x40021000
 8005678:	0800957c 	.word	0x0800957c

0800567c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005688:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005694:	f7ff f922 	bl	80048dc <HAL_PWREx_GetVoltageRange>
 8005698:	6178      	str	r0, [r7, #20]
 800569a:	e014      	b.n	80056c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	4a24      	ldr	r2, [pc, #144]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6593      	str	r3, [r2, #88]	; 0x58
 80056a8:	4b22      	ldr	r3, [pc, #136]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056b4:	f7ff f912 	bl	80048dc <HAL_PWREx_GetVoltageRange>
 80056b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056ba:	4b1e      	ldr	r3, [pc, #120]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056cc:	d10b      	bne.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d919      	bls.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2ba0      	cmp	r3, #160	; 0xa0
 80056d8:	d902      	bls.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056da:	2302      	movs	r3, #2
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	e013      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056e0:	2301      	movs	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	e010      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b80      	cmp	r3, #128	; 0x80
 80056ea:	d902      	bls.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056ec:	2303      	movs	r3, #3
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e00a      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	; 0x80
 80056f6:	d102      	bne.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056f8:	2302      	movs	r3, #2
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e004      	b.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b70      	cmp	r3, #112	; 0x70
 8005702:	d101      	bne.n	8005708 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005704:	2301      	movs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 0207 	bic.w	r2, r3, #7
 8005710:	4909      	ldr	r1, [pc, #36]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d001      	beq.n	800572a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40021000 	.word	0x40021000
 8005738:	40022000 	.word	0x40022000

0800573c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005744:	2300      	movs	r3, #0
 8005746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005748:	2300      	movs	r3, #0
 800574a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005754:	2b00      	cmp	r3, #0
 8005756:	d041      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800575c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005760:	d02a      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005762:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005766:	d824      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800576c:	d008      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800576e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005772:	d81e      	bhi.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800577c:	d010      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800577e:	e018      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005780:	4b86      	ldr	r3, [pc, #536]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	4a85      	ldr	r2, [pc, #532]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800578c:	e015      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2100      	movs	r1, #0
 8005794:	4618      	mov	r0, r3
 8005796:	f000 facb 	bl	8005d30 <RCCEx_PLLSAI1_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800579e:	e00c      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3320      	adds	r3, #32
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fbb6 	bl	8005f18 <RCCEx_PLLSAI2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	74fb      	strb	r3, [r7, #19]
      break;
 80057b6:	e000      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ba:	7cfb      	ldrb	r3, [r7, #19]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10b      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057c0:	4b76      	ldr	r3, [pc, #472]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ce:	4973      	ldr	r1, [pc, #460]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057d6:	e001      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d041      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057f0:	d02a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057f6:	d824      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005802:	d81e      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800580c:	d010      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800580e:	e018      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005810:	4b62      	ldr	r3, [pc, #392]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a61      	ldr	r2, [pc, #388]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800581c:	e015      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fa83 	bl	8005d30 <RCCEx_PLLSAI1_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800582e:	e00c      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	3320      	adds	r3, #32
 8005834:	2100      	movs	r1, #0
 8005836:	4618      	mov	r0, r3
 8005838:	f000 fb6e 	bl	8005f18 <RCCEx_PLLSAI2_Config>
 800583c:	4603      	mov	r3, r0
 800583e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005840:	e003      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	74fb      	strb	r3, [r7, #19]
      break;
 8005846:	e000      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10b      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005850:	4b52      	ldr	r3, [pc, #328]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005856:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800585e:	494f      	ldr	r1, [pc, #316]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005866:	e001      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005868:	7cfb      	ldrb	r3, [r7, #19]
 800586a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80a0 	beq.w	80059ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800587a:	2300      	movs	r3, #0
 800587c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00d      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005894:	4b41      	ldr	r3, [pc, #260]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	4a40      	ldr	r2, [pc, #256]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589e:	6593      	str	r3, [r2, #88]	; 0x58
 80058a0:	4b3e      	ldr	r3, [pc, #248]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ac:	2301      	movs	r3, #1
 80058ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058b0:	4b3b      	ldr	r3, [pc, #236]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a3a      	ldr	r2, [pc, #232]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058bc:	f7fd fb2e 	bl	8002f1c <HAL_GetTick>
 80058c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058c2:	e009      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c4:	f7fd fb2a 	bl	8002f1c <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d902      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	74fb      	strb	r3, [r7, #19]
        break;
 80058d6:	e005      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058d8:	4b31      	ldr	r3, [pc, #196]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ef      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d15c      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058ea:	4b2c      	ldr	r3, [pc, #176]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01f      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	429a      	cmp	r2, r3
 8005906:	d019      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005908:	4b24      	ldr	r3, [pc, #144]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005914:	4b21      	ldr	r3, [pc, #132]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	4a20      	ldr	r2, [pc, #128]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005924:	4b1d      	ldr	r3, [pc, #116]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	4a1c      	ldr	r2, [pc, #112]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800592c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d016      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fd fae9 	bl	8002f1c <HAL_GetTick>
 800594a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800594c:	e00b      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594e:	f7fd fae5 	bl	8002f1c <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	f241 3288 	movw	r2, #5000	; 0x1388
 800595c:	4293      	cmp	r3, r2
 800595e:	d902      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	74fb      	strb	r3, [r7, #19]
            break;
 8005964:	e006      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ec      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	4904      	ldr	r1, [pc, #16]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005992:	e009      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
 8005996:	74bb      	strb	r3, [r7, #18]
 8005998:	e006      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000
 80059a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a8:	7c7b      	ldrb	r3, [r7, #17]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d105      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ae:	4b9e      	ldr	r3, [pc, #632]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	4a9d      	ldr	r2, [pc, #628]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059c6:	4b98      	ldr	r3, [pc, #608]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059cc:	f023 0203 	bic.w	r2, r3, #3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	4994      	ldr	r1, [pc, #592]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059e8:	4b8f      	ldr	r3, [pc, #572]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f023 020c 	bic.w	r2, r3, #12
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	498c      	ldr	r1, [pc, #560]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a0a:	4b87      	ldr	r3, [pc, #540]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	4983      	ldr	r1, [pc, #524]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a2c:	4b7e      	ldr	r3, [pc, #504]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	497b      	ldr	r1, [pc, #492]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a4e:	4b76      	ldr	r3, [pc, #472]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5c:	4972      	ldr	r1, [pc, #456]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a70:	4b6d      	ldr	r3, [pc, #436]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	496a      	ldr	r1, [pc, #424]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a92:	4b65      	ldr	r3, [pc, #404]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	4961      	ldr	r1, [pc, #388]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ab4:	4b5c      	ldr	r3, [pc, #368]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	4959      	ldr	r1, [pc, #356]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ad6:	4b54      	ldr	r3, [pc, #336]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005adc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	4950      	ldr	r1, [pc, #320]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005af8:	4b4b      	ldr	r3, [pc, #300]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	4948      	ldr	r1, [pc, #288]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b1a:	4b43      	ldr	r3, [pc, #268]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b28:	493f      	ldr	r1, [pc, #252]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d028      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4a:	4937      	ldr	r1, [pc, #220]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5a:	d106      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b5c:	4b32      	ldr	r3, [pc, #200]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a31      	ldr	r2, [pc, #196]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b66:	60d3      	str	r3, [r2, #12]
 8005b68:	e011      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b72:	d10c      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f8d8 	bl	8005d30 <RCCEx_PLLSAI1_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b8a:	7cfb      	ldrb	r3, [r7, #19]
 8005b8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d028      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	491f      	ldr	r1, [pc, #124]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc4:	60d3      	str	r3, [r2, #12]
 8005bc6:	e011      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f8a9 	bl	8005d30 <RCCEx_PLLSAI1_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be2:	7cfb      	ldrb	r3, [r7, #19]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
 8005bea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02b      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c06:	4908      	ldr	r1, [pc, #32]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c16:	d109      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a02      	ldr	r2, [pc, #8]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c22:	60d3      	str	r3, [r2, #12]
 8005c24:	e014      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 f877 	bl	8005d30 <RCCEx_PLLSAI1_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c46:	7cfb      	ldrb	r3, [r7, #19]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02f      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c5c:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6a:	4928      	ldr	r1, [pc, #160]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c7a:	d10d      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	2102      	movs	r1, #2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f854 	bl	8005d30 <RCCEx_PLLSAI1_Config>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c8c:	7cfb      	ldrb	r3, [r7, #19]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d014      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	74bb      	strb	r3, [r7, #18]
 8005c96:	e011      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3320      	adds	r3, #32
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 f935 	bl	8005f18 <RCCEx_PLLSAI2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cb2:	7cfb      	ldrb	r3, [r7, #19]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cc8:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd6:	490d      	ldr	r1, [pc, #52]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	4904      	ldr	r1, [pc, #16]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d02:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40021000 	.word	0x40021000

08005d10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a04      	ldr	r2, [pc, #16]	; (8005d2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005d1a:	f043 0304 	orr.w	r3, r3, #4
 8005d1e:	6013      	str	r3, [r2, #0]
}
 8005d20:	bf00      	nop
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000

08005d30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d3e:	4b75      	ldr	r3, [pc, #468]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d4a:	4b72      	ldr	r3, [pc, #456]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f003 0203 	and.w	r2, r3, #3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d10d      	bne.n	8005d76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d62:	4b6c      	ldr	r3, [pc, #432]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
       ||
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d047      	beq.n	8005e06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	73fb      	strb	r3, [r7, #15]
 8005d7a:	e044      	b.n	8005e06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d018      	beq.n	8005db6 <RCCEx_PLLSAI1_Config+0x86>
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d825      	bhi.n	8005dd4 <RCCEx_PLLSAI1_Config+0xa4>
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d002      	beq.n	8005d92 <RCCEx_PLLSAI1_Config+0x62>
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d009      	beq.n	8005da4 <RCCEx_PLLSAI1_Config+0x74>
 8005d90:	e020      	b.n	8005dd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d92:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11d      	bne.n	8005dda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da2:	e01a      	b.n	8005dda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005da4:	4b5b      	ldr	r3, [pc, #364]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d116      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db4:	e013      	b.n	8005dde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005db6:	4b57      	ldr	r3, [pc, #348]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dc2:	4b54      	ldr	r3, [pc, #336]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d109      	bne.n	8005de2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dd2:	e006      	b.n	8005de2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd8:	e004      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e002      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dde:	bf00      	nop
 8005de0:	e000      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005de2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dea:	4b4a      	ldr	r3, [pc, #296]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6819      	ldr	r1, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	4944      	ldr	r1, [pc, #272]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d17d      	bne.n	8005f08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e0c:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e18:	f7fd f880 	bl	8002f1c <HAL_GetTick>
 8005e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e1e:	e009      	b.n	8005e34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e20:	f7fd f87c 	bl	8002f1c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d902      	bls.n	8005e34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	73fb      	strb	r3, [r7, #15]
        break;
 8005e32:	e005      	b.n	8005e40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e34:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1ef      	bne.n	8005e20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d160      	bne.n	8005f08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d111      	bne.n	8005e70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e4c:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6892      	ldr	r2, [r2, #8]
 8005e5c:	0211      	lsls	r1, r2, #8
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	68d2      	ldr	r2, [r2, #12]
 8005e62:	0912      	lsrs	r2, r2, #4
 8005e64:	0452      	lsls	r2, r2, #17
 8005e66:	430a      	orrs	r2, r1
 8005e68:	492a      	ldr	r1, [pc, #168]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	610b      	str	r3, [r1, #16]
 8005e6e:	e027      	b.n	8005ec0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d112      	bne.n	8005e9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6892      	ldr	r2, [r2, #8]
 8005e86:	0211      	lsls	r1, r2, #8
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6912      	ldr	r2, [r2, #16]
 8005e8c:	0852      	lsrs	r2, r2, #1
 8005e8e:	3a01      	subs	r2, #1
 8005e90:	0552      	lsls	r2, r2, #21
 8005e92:	430a      	orrs	r2, r1
 8005e94:	491f      	ldr	r1, [pc, #124]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	610b      	str	r3, [r1, #16]
 8005e9a:	e011      	b.n	8005ec0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ea4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	0211      	lsls	r1, r2, #8
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6952      	ldr	r2, [r2, #20]
 8005eb2:	0852      	lsrs	r2, r2, #1
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	0652      	lsls	r2, r2, #25
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	4916      	ldr	r1, [pc, #88]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ecc:	f7fd f826 	bl	8002f1c <HAL_GetTick>
 8005ed0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ed2:	e009      	b.n	8005ee8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ed4:	f7fd f822 	bl	8002f1c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d902      	bls.n	8005ee8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ee6:	e005      	b.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0ef      	beq.n	8005ed4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005efc:	691a      	ldr	r2, [r3, #16]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	4904      	ldr	r1, [pc, #16]	; (8005f14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000

08005f18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f26:	4b6a      	ldr	r3, [pc, #424]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d018      	beq.n	8005f64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f32:	4b67      	ldr	r3, [pc, #412]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0203 	and.w	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d10d      	bne.n	8005f5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
       ||
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f4a:	4b61      	ldr	r3, [pc, #388]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	091b      	lsrs	r3, r3, #4
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
       ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d047      	beq.n	8005fee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
 8005f62:	e044      	b.n	8005fee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d018      	beq.n	8005f9e <RCCEx_PLLSAI2_Config+0x86>
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d825      	bhi.n	8005fbc <RCCEx_PLLSAI2_Config+0xa4>
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d002      	beq.n	8005f7a <RCCEx_PLLSAI2_Config+0x62>
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d009      	beq.n	8005f8c <RCCEx_PLLSAI2_Config+0x74>
 8005f78:	e020      	b.n	8005fbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f7a:	4b55      	ldr	r3, [pc, #340]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11d      	bne.n	8005fc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f8a:	e01a      	b.n	8005fc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f8c:	4b50      	ldr	r3, [pc, #320]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d116      	bne.n	8005fc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f9c:	e013      	b.n	8005fc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f9e:	4b4c      	ldr	r3, [pc, #304]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10f      	bne.n	8005fca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005faa:	4b49      	ldr	r3, [pc, #292]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fba:	e006      	b.n	8005fca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e004      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e002      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fc6:	bf00      	nop
 8005fc8:	e000      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fca:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10d      	bne.n	8005fee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fd2:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6819      	ldr	r1, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	4939      	ldr	r1, [pc, #228]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d167      	bne.n	80060c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ff4:	4b36      	ldr	r3, [pc, #216]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a35      	ldr	r2, [pc, #212]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006000:	f7fc ff8c 	bl	8002f1c <HAL_GetTick>
 8006004:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006006:	e009      	b.n	800601c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006008:	f7fc ff88 	bl	8002f1c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d902      	bls.n	800601c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	73fb      	strb	r3, [r7, #15]
        break;
 800601a:	e005      	b.n	8006028 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800601c:	4b2c      	ldr	r3, [pc, #176]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ef      	bne.n	8006008 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d14a      	bne.n	80060c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d111      	bne.n	8006058 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006034:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800603c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	0211      	lsls	r1, r2, #8
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68d2      	ldr	r2, [r2, #12]
 800604a:	0912      	lsrs	r2, r2, #4
 800604c:	0452      	lsls	r2, r2, #17
 800604e:	430a      	orrs	r2, r1
 8006050:	491f      	ldr	r1, [pc, #124]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006052:	4313      	orrs	r3, r2
 8006054:	614b      	str	r3, [r1, #20]
 8006056:	e011      	b.n	800607c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006058:	4b1d      	ldr	r3, [pc, #116]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006060:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6892      	ldr	r2, [r2, #8]
 8006068:	0211      	lsls	r1, r2, #8
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6912      	ldr	r2, [r2, #16]
 800606e:	0852      	lsrs	r2, r2, #1
 8006070:	3a01      	subs	r2, #1
 8006072:	0652      	lsls	r2, r2, #25
 8006074:	430a      	orrs	r2, r1
 8006076:	4916      	ldr	r1, [pc, #88]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006078:	4313      	orrs	r3, r2
 800607a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800607c:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006086:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fc ff48 	bl	8002f1c <HAL_GetTick>
 800608c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800608e:	e009      	b.n	80060a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006090:	f7fc ff44 	bl	8002f1c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d902      	bls.n	80060a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	73fb      	strb	r3, [r7, #15]
          break;
 80060a2:	e005      	b.n	80060b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ef      	beq.n	8006090 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b8:	695a      	ldr	r2, [r3, #20]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4904      	ldr	r1, [pc, #16]	; (80060d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40021000 	.word	0x40021000

080060d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e095      	b.n	8006212 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d108      	bne.n	8006100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060f6:	d009      	beq.n	800610c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	61da      	str	r2, [r3, #28]
 80060fe:	e005      	b.n	800610c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fb ff70 	bl	800200c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800614c:	d902      	bls.n	8006154 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e002      	b.n	800615a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006158:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006162:	d007      	beq.n	8006174 <HAL_SPI_Init+0xa0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800616c:	d002      	beq.n	8006174 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	ea42 0103 	orr.w	r1, r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	f003 0204 	and.w	r2, r3, #4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	f003 0310 	and.w	r3, r3, #16
 80061dc:	431a      	orrs	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061f0:	ea42 0103 	orr.w	r1, r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e01a      	b.n	8006262 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006242:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7fb ff25 	bl	8002094 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b088      	sub	sp, #32
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	603b      	str	r3, [r7, #0]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_SPI_Transmit+0x22>
 8006288:	2302      	movs	r3, #2
 800628a:	e15f      	b.n	800654c <HAL_SPI_Transmit+0x2e2>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006294:	f7fc fe42 	bl	8002f1c <HAL_GetTick>
 8006298:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062ae:	e148      	b.n	8006542 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Transmit+0x52>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80062c0:	e13f      	b.n	8006542 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2203      	movs	r2, #3
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630c:	d10f      	bne.n	800632e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800632c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d007      	beq.n	800634c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800634a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006354:	d94f      	bls.n	80063f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <HAL_SPI_Transmit+0xfa>
 800635e:	8afb      	ldrh	r3, [r7, #22]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d142      	bne.n	80063ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	881a      	ldrh	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006388:	e02f      	b.n	80063ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d112      	bne.n	80063be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	881a      	ldrh	r2, [r3, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063bc:	e015      	b.n	80063ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063be:	f7fc fdad 	bl	8002f1c <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d803      	bhi.n	80063d6 <HAL_SPI_Transmit+0x16c>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d4:	d102      	bne.n	80063dc <HAL_SPI_Transmit+0x172>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80063e8:	e0ab      	b.n	8006542 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1ca      	bne.n	800638a <HAL_SPI_Transmit+0x120>
 80063f4:	e080      	b.n	80064f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Transmit+0x19a>
 80063fe:	8afb      	ldrh	r3, [r7, #22]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d174      	bne.n	80064ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d912      	bls.n	8006434 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	881a      	ldrh	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	1c9a      	adds	r2, r3, #2
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b02      	subs	r3, #2
 800642c:	b29a      	uxth	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006432:	e05c      	b.n	80064ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800645a:	e048      	b.n	80064ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d12b      	bne.n	80064c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d912      	bls.n	800649a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	881a      	ldrh	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	1c9a      	adds	r2, r3, #2
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	3b02      	subs	r3, #2
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006498:	e029      	b.n	80064ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	7812      	ldrb	r2, [r2, #0]
 80064a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064c0:	e015      	b.n	80064ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064c2:	f7fc fd2b 	bl	8002f1c <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d803      	bhi.n	80064da <HAL_SPI_Transmit+0x270>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d8:	d102      	bne.n	80064e0 <HAL_SPI_Transmit+0x276>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80064ec:	e029      	b.n	8006542 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1b1      	bne.n	800645c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fcf9 	bl	8006ef4 <SPI_EndRxTxTransaction>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e003      	b.n	8006542 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800654a:	7ffb      	ldrb	r3, [r7, #31]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3720      	adds	r7, #32
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d002      	beq.n	800657a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006574:	2302      	movs	r3, #2
 8006576:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006578:	e11a      	b.n	80067b0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006582:	d112      	bne.n	80065aa <HAL_SPI_Receive+0x56>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10e      	bne.n	80065aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2204      	movs	r2, #4
 8006590:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006594:	88fa      	ldrh	r2, [r7, #6]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f90e 	bl	80067c2 <HAL_SPI_TransmitReceive>
 80065a6:	4603      	mov	r3, r0
 80065a8:	e107      	b.n	80067ba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_SPI_Receive+0x64>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e100      	b.n	80067ba <HAL_SPI_Receive+0x266>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065c0:	f7fc fcac 	bl	8002f1c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_SPI_Receive+0x7e>
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065d6:	e0eb      	b.n	80067b0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2204      	movs	r2, #4
 80065dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006622:	d908      	bls.n	8006636 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	e007      	b.n	8006646 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664e:	d10f      	bne.n	8006670 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800666e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d007      	beq.n	800668e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006696:	d86f      	bhi.n	8006778 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006698:	e034      	b.n	8006704 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d117      	bne.n	80066d8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f103 020c 	add.w	r2, r3, #12
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	7812      	ldrb	r2, [r2, #0]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066d6:	e015      	b.n	8006704 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d8:	f7fc fc20 	bl	8002f1c <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d803      	bhi.n	80066f0 <HAL_SPI_Receive+0x19c>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ee:	d102      	bne.n	80066f6 <HAL_SPI_Receive+0x1a2>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006702:	e055      	b.n	80067b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1c4      	bne.n	800669a <HAL_SPI_Receive+0x146>
 8006710:	e038      	b.n	8006784 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b01      	cmp	r3, #1
 800671e:	d115      	bne.n	800674c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	b292      	uxth	r2, r2
 800672c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	1c9a      	adds	r2, r3, #2
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800674a:	e015      	b.n	8006778 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800674c:	f7fc fbe6 	bl	8002f1c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d803      	bhi.n	8006764 <HAL_SPI_Receive+0x210>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006762:	d102      	bne.n	800676a <HAL_SPI_Receive+0x216>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006776:	e01b      	b.n	80067b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1c6      	bne.n	8006712 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fb5b 	bl	8006e44 <SPI_EndRxTransaction>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
 80067a6:	e003      	b.n	80067b0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b08a      	sub	sp, #40	; 0x28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067d0:	2301      	movs	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_SPI_TransmitReceive+0x26>
 80067e4:	2302      	movs	r3, #2
 80067e6:	e20a      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x43c>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067f0:	f7fc fb94 	bl	8002f1c <HAL_GetTick>
 80067f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006804:	887b      	ldrh	r3, [r7, #2]
 8006806:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800680c:	7efb      	ldrb	r3, [r7, #27]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d00e      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x6e>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006818:	d106      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d102      	bne.n	8006828 <HAL_SPI_TransmitReceive+0x66>
 8006822:	7efb      	ldrb	r3, [r7, #27]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d003      	beq.n	8006830 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006828:	2302      	movs	r3, #2
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800682e:	e1e0      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x80>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x80>
 800683c:	887b      	ldrh	r3, [r7, #2]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006848:	e1d3      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b04      	cmp	r3, #4
 8006854:	d003      	beq.n	800685e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2205      	movs	r2, #5
 800685a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	887a      	ldrh	r2, [r7, #2]
 800686e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	887a      	ldrh	r2, [r7, #2]
 8006876:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	887a      	ldrh	r2, [r7, #2]
 8006884:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	887a      	ldrh	r2, [r7, #2]
 800688a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a0:	d802      	bhi.n	80068a8 <HAL_SPI_TransmitReceive+0xe6>
 80068a2:	8a3b      	ldrh	r3, [r7, #16]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d908      	bls.n	80068ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	e007      	b.n	80068ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d007      	beq.n	80068e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068f0:	f240 8081 	bls.w	80069f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_SPI_TransmitReceive+0x140>
 80068fc:	8a7b      	ldrh	r3, [r7, #18]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d16d      	bne.n	80069de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	881a      	ldrh	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006912:	1c9a      	adds	r2, r3, #2
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691c:	b29b      	uxth	r3, r3
 800691e:	3b01      	subs	r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006926:	e05a      	b.n	80069de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d11b      	bne.n	800696e <HAL_SPI_TransmitReceive+0x1ac>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d016      	beq.n	800696e <HAL_SPI_TransmitReceive+0x1ac>
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2b01      	cmp	r3, #1
 8006944:	d113      	bne.n	800696e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	881a      	ldrh	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d11c      	bne.n	80069b6 <HAL_SPI_TransmitReceive+0x1f4>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006982:	b29b      	uxth	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d016      	beq.n	80069b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68da      	ldr	r2, [r3, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	b292      	uxth	r2, r2
 8006994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069b2:	2301      	movs	r3, #1
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069b6:	f7fc fab1 	bl	8002f1c <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d80b      	bhi.n	80069de <HAL_SPI_TransmitReceive+0x21c>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069cc:	d007      	beq.n	80069de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80069dc:	e109      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d19f      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x166>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d199      	bne.n	8006928 <HAL_SPI_TransmitReceive+0x166>
 80069f4:	e0e3      	b.n	8006bbe <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_SPI_TransmitReceive+0x244>
 80069fe:	8a7b      	ldrh	r3, [r7, #18]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	f040 80cf 	bne.w	8006ba4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d912      	bls.n	8006a36 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b02      	subs	r3, #2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a34:	e0b6      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a5c:	e0a2      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d134      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x314>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d02f      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x314>
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d12c      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d912      	bls.n	8006aac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	881a      	ldrh	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	1c9a      	adds	r2, r3, #2
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b02      	subs	r3, #2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aaa:	e012      	b.n	8006ad2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0301 	and.w	r3, r3, #1
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d148      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x3b4>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d042      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d923      	bls.n	8006b44 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	b292      	uxth	r2, r2
 8006b08:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	1c9a      	adds	r2, r3, #2
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b02      	subs	r3, #2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d81f      	bhi.n	8006b72 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	e016      	b.n	8006b72 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f103 020c 	add.w	r2, r3, #12
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	b2d2      	uxtb	r2, r2
 8006b54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b72:	2301      	movs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b76:	f7fc f9d1 	bl	8002f1c <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d803      	bhi.n	8006b8e <HAL_SPI_TransmitReceive+0x3cc>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8c:	d102      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x3d2>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d107      	bne.n	8006ba4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006ba2:	e026      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f47f af57 	bne.w	8006a5e <HAL_SPI_TransmitReceive+0x29c>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f47f af50 	bne.w	8006a5e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 f996 	bl	8006ef4 <SPI_EndRxTxTransaction>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be8:	e003      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3728      	adds	r7, #40	; 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	4613      	mov	r3, r2
 8006c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c18:	f7fc f980 	bl	8002f1c <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	1a9b      	subs	r3, r3, r2
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	4413      	add	r3, r2
 8006c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c28:	f7fc f978 	bl	8002f1c <HAL_GetTick>
 8006c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c2e:	4b39      	ldr	r3, [pc, #228]	; (8006d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	015b      	lsls	r3, r3, #5
 8006c34:	0d1b      	lsrs	r3, r3, #20
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c3e:	e054      	b.n	8006cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c46:	d050      	beq.n	8006cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c48:	f7fc f968 	bl	8002f1c <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d902      	bls.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d13d      	bne.n	8006cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c76:	d111      	bne.n	8006c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c80:	d004      	beq.n	8006c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8a:	d107      	bne.n	8006c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca4:	d10f      	bne.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e017      	b.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d19b      	bne.n	8006c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000000 	.word	0x20000000

08006d18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08a      	sub	sp, #40	; 0x28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d2a:	f7fc f8f7 	bl	8002f1c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	4413      	add	r3, r2
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d3a:	f7fc f8ef 	bl	8002f1c <HAL_GetTick>
 8006d3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d48:	4b3d      	ldr	r3, [pc, #244]	; (8006e40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	00da      	lsls	r2, r3, #3
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	0d1b      	lsrs	r3, r3, #20
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	fb02 f303 	mul.w	r3, r2, r3
 8006d5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d60:	e060      	b.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d68:	d107      	bne.n	8006d7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d80:	d050      	beq.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d82:	f7fc f8cb 	bl	8002f1c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d902      	bls.n	8006d98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d13d      	bne.n	8006e14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006da6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db0:	d111      	bne.n	8006dd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dba:	d004      	beq.n	8006dc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc4:	d107      	bne.n	8006dd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dde:	d10f      	bne.n	8006e00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e010      	b.n	8006e36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d196      	bne.n	8006d62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3728      	adds	r7, #40	; 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000000 	.word	0x20000000

08006e44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e58:	d111      	bne.n	8006e7e <SPI_EndRxTransaction+0x3a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e62:	d004      	beq.n	8006e6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6c:	d107      	bne.n	8006e7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	; 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff febd 	bl	8006c08 <SPI_WaitFlagStateUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e023      	b.n	8006eec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eac:	d11d      	bne.n	8006eea <SPI_EndRxTransaction+0xa6>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb6:	d004      	beq.n	8006ec2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec0:	d113      	bne.n	8006eea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff ff22 	bl	8006d18 <SPI_WaitFifoStateUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e000      	b.n	8006eec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff ff03 	bl	8006d18 <SPI_WaitFifoStateUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1c:	f043 0220 	orr.w	r2, r3, #32
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e027      	b.n	8006f78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff fe68 	bl	8006c08 <SPI_WaitFlagStateUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e014      	b.n	8006f78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f7ff fedc 	bl	8006d18 <SPI_WaitFifoStateUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6a:	f043 0220 	orr.w	r2, r3, #32
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e000      	b.n	8006f78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e040      	b.n	8007014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7fb f894 	bl	80020d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2224      	movs	r2, #36	; 0x24
 8006fac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0201 	bic.w	r2, r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fae0 	bl	800758c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f825 	bl	800701c <UART_SetConfig>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e01b      	b.n	8007014 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fb5f 	bl	80076d0 <UART_CheckIdleState>
 8007012:	4603      	mov	r3, r0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800701c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007020:	b08a      	sub	sp, #40	; 0x28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	431a      	orrs	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4313      	orrs	r3, r2
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4ba4      	ldr	r3, [pc, #656]	; (80072dc <UART_SetConfig+0x2c0>)
 800704c:	4013      	ands	r3, r2
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007054:	430b      	orrs	r3, r1
 8007056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a99      	ldr	r2, [pc, #612]	; (80072e0 <UART_SetConfig+0x2c4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d004      	beq.n	8007088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	4313      	orrs	r3, r2
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a90      	ldr	r2, [pc, #576]	; (80072e4 <UART_SetConfig+0x2c8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d126      	bne.n	80070f4 <UART_SetConfig+0xd8>
 80070a6:	4b90      	ldr	r3, [pc, #576]	; (80072e8 <UART_SetConfig+0x2cc>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d81b      	bhi.n	80070ec <UART_SetConfig+0xd0>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0xa0>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d2:	e116      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070d4:	2302      	movs	r3, #2
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070da:	e112      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070dc:	2304      	movs	r3, #4
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e2:	e10e      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070e4:	2308      	movs	r3, #8
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ea:	e10a      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f2:	e106      	b.n	8007302 <UART_SetConfig+0x2e6>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a7c      	ldr	r2, [pc, #496]	; (80072ec <UART_SetConfig+0x2d0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d138      	bne.n	8007170 <UART_SetConfig+0x154>
 80070fe:	4b7a      	ldr	r3, [pc, #488]	; (80072e8 <UART_SetConfig+0x2cc>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007104:	f003 030c 	and.w	r3, r3, #12
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d82d      	bhi.n	8007168 <UART_SetConfig+0x14c>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <UART_SetConfig+0xf8>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007149 	.word	0x08007149
 8007118:	08007169 	.word	0x08007169
 800711c:	08007169 	.word	0x08007169
 8007120:	08007169 	.word	0x08007169
 8007124:	08007159 	.word	0x08007159
 8007128:	08007169 	.word	0x08007169
 800712c:	08007169 	.word	0x08007169
 8007130:	08007169 	.word	0x08007169
 8007134:	08007151 	.word	0x08007151
 8007138:	08007169 	.word	0x08007169
 800713c:	08007169 	.word	0x08007169
 8007140:	08007169 	.word	0x08007169
 8007144:	08007161 	.word	0x08007161
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800714e:	e0d8      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007156:	e0d4      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800715e:	e0d0      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007166:	e0cc      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e0c8      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5e      	ldr	r2, [pc, #376]	; (80072f0 <UART_SetConfig+0x2d4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d125      	bne.n	80071c6 <UART_SetConfig+0x1aa>
 800717a:	4b5b      	ldr	r3, [pc, #364]	; (80072e8 <UART_SetConfig+0x2cc>)
 800717c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007180:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d016      	beq.n	80071b6 <UART_SetConfig+0x19a>
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d818      	bhi.n	80071be <UART_SetConfig+0x1a2>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d00a      	beq.n	80071a6 <UART_SetConfig+0x18a>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d814      	bhi.n	80071be <UART_SetConfig+0x1a2>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <UART_SetConfig+0x182>
 8007198:	2b10      	cmp	r3, #16
 800719a:	d008      	beq.n	80071ae <UART_SetConfig+0x192>
 800719c:	e00f      	b.n	80071be <UART_SetConfig+0x1a2>
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a4:	e0ad      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071a6:	2302      	movs	r3, #2
 80071a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ac:	e0a9      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071ae:	2304      	movs	r3, #4
 80071b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b4:	e0a5      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071b6:	2308      	movs	r3, #8
 80071b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071bc:	e0a1      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071be:	2310      	movs	r3, #16
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c4:	e09d      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a4a      	ldr	r2, [pc, #296]	; (80072f4 <UART_SetConfig+0x2d8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d125      	bne.n	800721c <UART_SetConfig+0x200>
 80071d0:	4b45      	ldr	r3, [pc, #276]	; (80072e8 <UART_SetConfig+0x2cc>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071da:	2bc0      	cmp	r3, #192	; 0xc0
 80071dc:	d016      	beq.n	800720c <UART_SetConfig+0x1f0>
 80071de:	2bc0      	cmp	r3, #192	; 0xc0
 80071e0:	d818      	bhi.n	8007214 <UART_SetConfig+0x1f8>
 80071e2:	2b80      	cmp	r3, #128	; 0x80
 80071e4:	d00a      	beq.n	80071fc <UART_SetConfig+0x1e0>
 80071e6:	2b80      	cmp	r3, #128	; 0x80
 80071e8:	d814      	bhi.n	8007214 <UART_SetConfig+0x1f8>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <UART_SetConfig+0x1d8>
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d008      	beq.n	8007204 <UART_SetConfig+0x1e8>
 80071f2:	e00f      	b.n	8007214 <UART_SetConfig+0x1f8>
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071fa:	e082      	b.n	8007302 <UART_SetConfig+0x2e6>
 80071fc:	2302      	movs	r3, #2
 80071fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007202:	e07e      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007204:	2304      	movs	r3, #4
 8007206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720a:	e07a      	b.n	8007302 <UART_SetConfig+0x2e6>
 800720c:	2308      	movs	r3, #8
 800720e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007212:	e076      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007214:	2310      	movs	r3, #16
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721a:	e072      	b.n	8007302 <UART_SetConfig+0x2e6>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <UART_SetConfig+0x2dc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d12a      	bne.n	800727c <UART_SetConfig+0x260>
 8007226:	4b30      	ldr	r3, [pc, #192]	; (80072e8 <UART_SetConfig+0x2cc>)
 8007228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800722c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007234:	d01a      	beq.n	800726c <UART_SetConfig+0x250>
 8007236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800723a:	d81b      	bhi.n	8007274 <UART_SetConfig+0x258>
 800723c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007240:	d00c      	beq.n	800725c <UART_SetConfig+0x240>
 8007242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007246:	d815      	bhi.n	8007274 <UART_SetConfig+0x258>
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <UART_SetConfig+0x238>
 800724c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007250:	d008      	beq.n	8007264 <UART_SetConfig+0x248>
 8007252:	e00f      	b.n	8007274 <UART_SetConfig+0x258>
 8007254:	2300      	movs	r3, #0
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800725a:	e052      	b.n	8007302 <UART_SetConfig+0x2e6>
 800725c:	2302      	movs	r3, #2
 800725e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007262:	e04e      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800726a:	e04a      	b.n	8007302 <UART_SetConfig+0x2e6>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007272:	e046      	b.n	8007302 <UART_SetConfig+0x2e6>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800727a:	e042      	b.n	8007302 <UART_SetConfig+0x2e6>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <UART_SetConfig+0x2c4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d13a      	bne.n	80072fc <UART_SetConfig+0x2e0>
 8007286:	4b18      	ldr	r3, [pc, #96]	; (80072e8 <UART_SetConfig+0x2cc>)
 8007288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007290:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007294:	d01a      	beq.n	80072cc <UART_SetConfig+0x2b0>
 8007296:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800729a:	d81b      	bhi.n	80072d4 <UART_SetConfig+0x2b8>
 800729c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a0:	d00c      	beq.n	80072bc <UART_SetConfig+0x2a0>
 80072a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a6:	d815      	bhi.n	80072d4 <UART_SetConfig+0x2b8>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <UART_SetConfig+0x298>
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b0:	d008      	beq.n	80072c4 <UART_SetConfig+0x2a8>
 80072b2:	e00f      	b.n	80072d4 <UART_SetConfig+0x2b8>
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ba:	e022      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072bc:	2302      	movs	r3, #2
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c2:	e01e      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072c4:	2304      	movs	r3, #4
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ca:	e01a      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072cc:	2308      	movs	r3, #8
 80072ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d2:	e016      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072d4:	2310      	movs	r3, #16
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072da:	e012      	b.n	8007302 <UART_SetConfig+0x2e6>
 80072dc:	efff69f3 	.word	0xefff69f3
 80072e0:	40008000 	.word	0x40008000
 80072e4:	40013800 	.word	0x40013800
 80072e8:	40021000 	.word	0x40021000
 80072ec:	40004400 	.word	0x40004400
 80072f0:	40004800 	.word	0x40004800
 80072f4:	40004c00 	.word	0x40004c00
 80072f8:	40005000 	.word	0x40005000
 80072fc:	2310      	movs	r3, #16
 80072fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a9f      	ldr	r2, [pc, #636]	; (8007584 <UART_SetConfig+0x568>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d17a      	bne.n	8007402 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800730c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007310:	2b08      	cmp	r3, #8
 8007312:	d824      	bhi.n	800735e <UART_SetConfig+0x342>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0x300>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007341 	.word	0x08007341
 8007320:	0800735f 	.word	0x0800735f
 8007324:	08007349 	.word	0x08007349
 8007328:	0800735f 	.word	0x0800735f
 800732c:	0800734f 	.word	0x0800734f
 8007330:	0800735f 	.word	0x0800735f
 8007334:	0800735f 	.word	0x0800735f
 8007338:	0800735f 	.word	0x0800735f
 800733c:	08007357 	.word	0x08007357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007340:	f7fe f970 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8007344:	61f8      	str	r0, [r7, #28]
        break;
 8007346:	e010      	b.n	800736a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007348:	4b8f      	ldr	r3, [pc, #572]	; (8007588 <UART_SetConfig+0x56c>)
 800734a:	61fb      	str	r3, [r7, #28]
        break;
 800734c:	e00d      	b.n	800736a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800734e:	f7fe f8d1 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8007352:	61f8      	str	r0, [r7, #28]
        break;
 8007354:	e009      	b.n	800736a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800735a:	61fb      	str	r3, [r7, #28]
        break;
 800735c:	e005      	b.n	800736a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80fb 	beq.w	8007568 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	4413      	add	r3, r2
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	429a      	cmp	r2, r3
 8007380:	d305      	bcc.n	800738e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007388:	69fa      	ldr	r2, [r7, #28]
 800738a:	429a      	cmp	r2, r3
 800738c:	d903      	bls.n	8007396 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007394:	e0e8      	b.n	8007568 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2200      	movs	r2, #0
 800739a:	461c      	mov	r4, r3
 800739c:	4615      	mov	r5, r2
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	022b      	lsls	r3, r5, #8
 80073a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80073ac:	0222      	lsls	r2, r4, #8
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	6849      	ldr	r1, [r1, #4]
 80073b2:	0849      	lsrs	r1, r1, #1
 80073b4:	2000      	movs	r0, #0
 80073b6:	4688      	mov	r8, r1
 80073b8:	4681      	mov	r9, r0
 80073ba:	eb12 0a08 	adds.w	sl, r2, r8
 80073be:	eb43 0b09 	adc.w	fp, r3, r9
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7f8 ff54 	bl	8000280 <__aeabi_uldivmod>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4613      	mov	r3, r2
 80073de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073e6:	d308      	bcc.n	80073fa <UART_SetConfig+0x3de>
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ee:	d204      	bcs.n	80073fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	e0b6      	b.n	8007568 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007400:	e0b2      	b.n	8007568 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740a:	d15e      	bne.n	80074ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800740c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007410:	2b08      	cmp	r3, #8
 8007412:	d828      	bhi.n	8007466 <UART_SetConfig+0x44a>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x400>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007441 	.word	0x08007441
 8007420:	08007449 	.word	0x08007449
 8007424:	08007451 	.word	0x08007451
 8007428:	08007467 	.word	0x08007467
 800742c:	08007457 	.word	0x08007457
 8007430:	08007467 	.word	0x08007467
 8007434:	08007467 	.word	0x08007467
 8007438:	08007467 	.word	0x08007467
 800743c:	0800745f 	.word	0x0800745f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007440:	f7fe f8f0 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8007444:	61f8      	str	r0, [r7, #28]
        break;
 8007446:	e014      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007448:	f7fe f902 	bl	8005650 <HAL_RCC_GetPCLK2Freq>
 800744c:	61f8      	str	r0, [r7, #28]
        break;
 800744e:	e010      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007450:	4b4d      	ldr	r3, [pc, #308]	; (8007588 <UART_SetConfig+0x56c>)
 8007452:	61fb      	str	r3, [r7, #28]
        break;
 8007454:	e00d      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007456:	f7fe f84d 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 800745a:	61f8      	str	r0, [r7, #28]
        break;
 800745c:	e009      	b.n	8007472 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800745e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007462:	61fb      	str	r3, [r7, #28]
        break;
 8007464:	e005      	b.n	8007472 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d077      	beq.n	8007568 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	005a      	lsls	r2, r3, #1
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	085b      	lsrs	r3, r3, #1
 8007482:	441a      	add	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	fbb2 f3f3 	udiv	r3, r2, r3
 800748c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	2b0f      	cmp	r3, #15
 8007492:	d916      	bls.n	80074c2 <UART_SetConfig+0x4a6>
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749a:	d212      	bcs.n	80074c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f023 030f 	bic.w	r3, r3, #15
 80074a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	8afb      	ldrh	r3, [r7, #22]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	8afa      	ldrh	r2, [r7, #22]
 80074be:	60da      	str	r2, [r3, #12]
 80074c0:	e052      	b.n	8007568 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80074c8:	e04e      	b.n	8007568 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d827      	bhi.n	8007522 <UART_SetConfig+0x506>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <UART_SetConfig+0x4bc>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074fd 	.word	0x080074fd
 80074dc:	08007505 	.word	0x08007505
 80074e0:	0800750d 	.word	0x0800750d
 80074e4:	08007523 	.word	0x08007523
 80074e8:	08007513 	.word	0x08007513
 80074ec:	08007523 	.word	0x08007523
 80074f0:	08007523 	.word	0x08007523
 80074f4:	08007523 	.word	0x08007523
 80074f8:	0800751b 	.word	0x0800751b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074fc:	f7fe f892 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8007500:	61f8      	str	r0, [r7, #28]
        break;
 8007502:	e014      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fe f8a4 	bl	8005650 <HAL_RCC_GetPCLK2Freq>
 8007508:	61f8      	str	r0, [r7, #28]
        break;
 800750a:	e010      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <UART_SetConfig+0x56c>)
 800750e:	61fb      	str	r3, [r7, #28]
        break;
 8007510:	e00d      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007512:	f7fd ffef 	bl	80054f4 <HAL_RCC_GetSysClockFreq>
 8007516:	61f8      	str	r0, [r7, #28]
        break;
 8007518:	e009      	b.n	800752e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800751a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751e:	61fb      	str	r3, [r7, #28]
        break;
 8007520:	e005      	b.n	800752e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800752c:	bf00      	nop
    }

    if (pclk != 0U)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d019      	beq.n	8007568 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	085a      	lsrs	r2, r3, #1
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	441a      	add	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	fbb2 f3f3 	udiv	r3, r2, r3
 8007546:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	2b0f      	cmp	r3, #15
 800754c:	d909      	bls.n	8007562 <UART_SetConfig+0x546>
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007554:	d205      	bcs.n	8007562 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60da      	str	r2, [r3, #12]
 8007560:	e002      	b.n	8007568 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007574:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	; 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007582:	bf00      	nop
 8007584:	40008000 	.word	0x40008000
 8007588:	00f42400 	.word	0x00f42400

0800758c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00a      	beq.n	80075d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00a      	beq.n	80075fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	f003 0304 	and.w	r3, r3, #4
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01a      	beq.n	80076a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800768a:	d10a      	bne.n	80076a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	605a      	str	r2, [r3, #4]
  }
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b098      	sub	sp, #96	; 0x60
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076e0:	f7fb fc1c 	bl	8002f1c <HAL_GetTick>
 80076e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d12e      	bne.n	8007752 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f88c 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d021      	beq.n	8007752 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007722:	653b      	str	r3, [r7, #80]	; 0x50
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
 800772e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800773a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e6      	bne.n	800770e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e062      	b.n	8007818 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b04      	cmp	r3, #4
 800775e:	d149      	bne.n	80077f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007768:	2200      	movs	r2, #0
 800776a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f856 	bl	8007820 <UART_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d03c      	beq.n	80077f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	623b      	str	r3, [r7, #32]
   return(result);
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007798:	633b      	str	r3, [r7, #48]	; 0x30
 800779a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800779e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3308      	adds	r3, #8
 80077ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077cc:	61fa      	str	r2, [r7, #28]
 80077ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	69b9      	ldr	r1, [r7, #24]
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	617b      	str	r3, [r7, #20]
   return(result);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e5      	bne.n	80077ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e011      	b.n	8007818 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3758      	adds	r7, #88	; 0x58
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	4613      	mov	r3, r2
 800782e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007830:	e049      	b.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007838:	d045      	beq.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783a:	f7fb fb6f 	bl	8002f1c <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	1ad3      	subs	r3, r2, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <UART_WaitOnFlagUntilTimeout+0x30>
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e048      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d031      	beq.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	f003 0308 	and.w	r3, r3, #8
 800786c:	2b08      	cmp	r3, #8
 800786e:	d110      	bne.n	8007892 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2208      	movs	r2, #8
 8007876:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f838 	bl	80078ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2208      	movs	r2, #8
 8007882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e029      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800789c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a0:	d111      	bne.n	80078c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f81e 	bl	80078ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	e00f      	b.n	80078e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	4013      	ands	r3, r2
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	bf0c      	ite	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	2300      	movne	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d0a6      	beq.n	8007832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b095      	sub	sp, #84	; 0x54
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800790a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	643b      	str	r3, [r7, #64]	; 0x40
 8007916:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800791a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800791c:	e841 2300 	strex	r3, r2, [r1]
 8007920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e6      	bne.n	80078f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3308      	adds	r3, #8
 800792e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	e853 3f00 	ldrex	r3, [r3]
 8007936:	61fb      	str	r3, [r7, #28]
   return(result);
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f023 0301 	bic.w	r3, r3, #1
 800793e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e5      	bne.n	8007928 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007960:	2b01      	cmp	r3, #1
 8007962:	d118      	bne.n	8007996 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	60bb      	str	r3, [r7, #8]
   return(result);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f023 0310 	bic.w	r3, r3, #16
 8007978:	647b      	str	r3, [r7, #68]	; 0x44
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007982:	61bb      	str	r3, [r7, #24]
 8007984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	613b      	str	r3, [r7, #16]
   return(result);
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079aa:	bf00      	nop
 80079ac:	3754      	adds	r7, #84	; 0x54
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079b6:	b084      	sub	sp, #16
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	f107 001c 	add.w	r0, r7, #28
 80079c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fa65 	bl	8007ea4 <USB_CoreReset>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80079de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	639a      	str	r2, [r3, #56]	; 0x38
 80079f0:	e005      	b.n	80079fe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a0a:	b004      	add	sp, #16
 8007a0c:	4770      	bx	lr

08007a0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f023 0201 	bic.w	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a4c:	78fb      	ldrb	r3, [r7, #3]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d115      	bne.n	8007a7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a5e:	2001      	movs	r0, #1
 8007a60:	f7fb fa68 	bl	8002f34 <HAL_Delay>
      ms++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa0c 	bl	8007e88 <USB_GetMode>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d01e      	beq.n	8007ab4 <USB_SetCurrentMode+0x84>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b31      	cmp	r3, #49	; 0x31
 8007a7a:	d9f0      	bls.n	8007a5e <USB_SetCurrentMode+0x2e>
 8007a7c:	e01a      	b.n	8007ab4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d115      	bne.n	8007ab0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a90:	2001      	movs	r0, #1
 8007a92:	f7fb fa4f 	bl	8002f34 <HAL_Delay>
      ms++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f9f3 	bl	8007e88 <USB_GetMode>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <USB_SetCurrentMode+0x84>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b31      	cmp	r3, #49	; 0x31
 8007aac:	d9f0      	bls.n	8007a90 <USB_SetCurrentMode+0x60>
 8007aae:	e001      	b.n	8007ab4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e005      	b.n	8007ac0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b32      	cmp	r3, #50	; 0x32
 8007ab8:	d101      	bne.n	8007abe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ac8:	b084      	sub	sp, #16
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	e009      	b.n	8007afc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	3340      	adds	r3, #64	; 0x40
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	3301      	adds	r3, #1
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b0e      	cmp	r3, #14
 8007b00:	d9f2      	bls.n	8007ae8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11c      	bne.n	8007b42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b16:	f043 0302 	orr.w	r3, r3, #2
 8007b1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e005      	b.n	8007b4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b54:	461a      	mov	r2, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b5a:	2103      	movs	r1, #3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f959 	bl	8007e14 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b62:	2110      	movs	r1, #16
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f8f1 	bl	8007d4c <USB_FlushTxFifo>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f91d 	bl	8007db4 <USB_FlushRxFifo>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b96:	461a      	mov	r2, r3
 8007b98:	2300      	movs	r3, #0
 8007b9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	e043      	b.n	8007c36 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bc4:	d118      	bne.n	8007bf8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10a      	bne.n	8007be2 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	e013      	b.n	8007c0a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e008      	b.n	8007c0a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	461a      	mov	r2, r3
 8007c06:	2300      	movs	r3, #0
 8007c08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c16:	461a      	mov	r2, r3
 8007c18:	2300      	movs	r3, #0
 8007c1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	3301      	adds	r3, #1
 8007c34:	613b      	str	r3, [r7, #16]
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d3b7      	bcc.n	8007bae <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
 8007c42:	e043      	b.n	8007ccc <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c5a:	d118      	bne.n	8007c8e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e013      	b.n	8007ca0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	461a      	mov	r2, r3
 8007c86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	e008      	b.n	8007ca0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	461a      	mov	r2, r3
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d3b7      	bcc.n	8007c44 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007cf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f043 0210 	orr.w	r2, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699a      	ldr	r2, [r3, #24]
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <USB_DevInit+0x280>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	f043 0208 	orr.w	r2, r3, #8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d107      	bne.n	8007d36 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d2e:	f043 0304 	orr.w	r3, r3, #4
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d42:	b004      	add	sp, #16
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	803c3800 	.word	0x803c3800

08007d4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4a13      	ldr	r2, [pc, #76]	; (8007db0 <USB_FlushTxFifo+0x64>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d901      	bls.n	8007d6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e01b      	b.n	8007da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	daf2      	bge.n	8007d5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	019b      	lsls	r3, r3, #6
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a08      	ldr	r2, [pc, #32]	; (8007db0 <USB_FlushTxFifo+0x64>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d901      	bls.n	8007d96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e006      	b.n	8007da4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d0f0      	beq.n	8007d84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	00030d40 	.word	0x00030d40

08007db4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a11      	ldr	r2, [pc, #68]	; (8007e10 <USB_FlushRxFifo+0x5c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e018      	b.n	8007e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	daf2      	bge.n	8007dc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2210      	movs	r2, #16
 8007de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3301      	adds	r3, #1
 8007de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <USB_FlushRxFifo+0x5c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d901      	bls.n	8007df6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e006      	b.n	8007e04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b10      	cmp	r3, #16
 8007e00:	d0f0      	beq.n	8007de4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	00030d40 	.word	0x00030d40

08007e14 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	78fb      	ldrb	r3, [r7, #3]
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e34:	4313      	orrs	r3, r2
 8007e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b085      	sub	sp, #20
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e60:	f023 0303 	bic.w	r3, r3, #3
 8007e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	f003 0301 	and.w	r3, r3, #1
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a13      	ldr	r2, [pc, #76]	; (8007f08 <USB_CoreReset+0x64>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e01b      	b.n	8007efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	daf2      	bge.n	8007eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f043 0201 	orr.w	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <USB_CoreReset+0x64>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d901      	bls.n	8007eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e006      	b.n	8007efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d0f0      	beq.n	8007eda <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	00030d40 	.word	0x00030d40

08007f0c <std>:
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	4604      	mov	r4, r0
 8007f12:	e9c0 3300 	strd	r3, r3, [r0]
 8007f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f1a:	6083      	str	r3, [r0, #8]
 8007f1c:	8181      	strh	r1, [r0, #12]
 8007f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f20:	81c2      	strh	r2, [r0, #14]
 8007f22:	6183      	str	r3, [r0, #24]
 8007f24:	4619      	mov	r1, r3
 8007f26:	2208      	movs	r2, #8
 8007f28:	305c      	adds	r0, #92	; 0x5c
 8007f2a:	f000 f914 	bl	8008156 <memset>
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <std+0x58>)
 8007f30:	6263      	str	r3, [r4, #36]	; 0x24
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <std+0x5c>)
 8007f34:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f36:	4b0d      	ldr	r3, [pc, #52]	; (8007f6c <std+0x60>)
 8007f38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <std+0x64>)
 8007f3c:	6323      	str	r3, [r4, #48]	; 0x30
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <std+0x68>)
 8007f40:	6224      	str	r4, [r4, #32]
 8007f42:	429c      	cmp	r4, r3
 8007f44:	d006      	beq.n	8007f54 <std+0x48>
 8007f46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f4a:	4294      	cmp	r4, r2
 8007f4c:	d002      	beq.n	8007f54 <std+0x48>
 8007f4e:	33d0      	adds	r3, #208	; 0xd0
 8007f50:	429c      	cmp	r4, r3
 8007f52:	d105      	bne.n	8007f60 <std+0x54>
 8007f54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5c:	f000 ba08 	b.w	8008370 <__retarget_lock_init_recursive>
 8007f60:	bd10      	pop	{r4, pc}
 8007f62:	bf00      	nop
 8007f64:	080080d1 	.word	0x080080d1
 8007f68:	080080f3 	.word	0x080080f3
 8007f6c:	0800812b 	.word	0x0800812b
 8007f70:	0800814f 	.word	0x0800814f
 8007f74:	200010c0 	.word	0x200010c0

08007f78 <stdio_exit_handler>:
 8007f78:	4a02      	ldr	r2, [pc, #8]	; (8007f84 <stdio_exit_handler+0xc>)
 8007f7a:	4903      	ldr	r1, [pc, #12]	; (8007f88 <stdio_exit_handler+0x10>)
 8007f7c:	4803      	ldr	r0, [pc, #12]	; (8007f8c <stdio_exit_handler+0x14>)
 8007f7e:	f000 b869 	b.w	8008054 <_fwalk_sglue>
 8007f82:	bf00      	nop
 8007f84:	20000034 	.word	0x20000034
 8007f88:	08008cad 	.word	0x08008cad
 8007f8c:	20000040 	.word	0x20000040

08007f90 <cleanup_stdio>:
 8007f90:	6841      	ldr	r1, [r0, #4]
 8007f92:	4b0c      	ldr	r3, [pc, #48]	; (8007fc4 <cleanup_stdio+0x34>)
 8007f94:	4299      	cmp	r1, r3
 8007f96:	b510      	push	{r4, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	d001      	beq.n	8007fa0 <cleanup_stdio+0x10>
 8007f9c:	f000 fe86 	bl	8008cac <_fflush_r>
 8007fa0:	68a1      	ldr	r1, [r4, #8]
 8007fa2:	4b09      	ldr	r3, [pc, #36]	; (8007fc8 <cleanup_stdio+0x38>)
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	d002      	beq.n	8007fae <cleanup_stdio+0x1e>
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fe7f 	bl	8008cac <_fflush_r>
 8007fae:	68e1      	ldr	r1, [r4, #12]
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <cleanup_stdio+0x3c>)
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	d004      	beq.n	8007fc0 <cleanup_stdio+0x30>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fbc:	f000 be76 	b.w	8008cac <_fflush_r>
 8007fc0:	bd10      	pop	{r4, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200010c0 	.word	0x200010c0
 8007fc8:	20001128 	.word	0x20001128
 8007fcc:	20001190 	.word	0x20001190

08007fd0 <global_stdio_init.part.0>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <global_stdio_init.part.0+0x30>)
 8007fd4:	4c0b      	ldr	r4, [pc, #44]	; (8008004 <global_stdio_init.part.0+0x34>)
 8007fd6:	4a0c      	ldr	r2, [pc, #48]	; (8008008 <global_stdio_init.part.0+0x38>)
 8007fd8:	601a      	str	r2, [r3, #0]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2104      	movs	r1, #4
 8007fe0:	f7ff ff94 	bl	8007f0c <std>
 8007fe4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fe8:	2201      	movs	r2, #1
 8007fea:	2109      	movs	r1, #9
 8007fec:	f7ff ff8e 	bl	8007f0c <std>
 8007ff0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffa:	2112      	movs	r1, #18
 8007ffc:	f7ff bf86 	b.w	8007f0c <std>
 8008000:	200011f8 	.word	0x200011f8
 8008004:	200010c0 	.word	0x200010c0
 8008008:	08007f79 	.word	0x08007f79

0800800c <__sfp_lock_acquire>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sfp_lock_acquire+0x8>)
 800800e:	f000 b9b0 	b.w	8008372 <__retarget_lock_acquire_recursive>
 8008012:	bf00      	nop
 8008014:	20001201 	.word	0x20001201

08008018 <__sfp_lock_release>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__sfp_lock_release+0x8>)
 800801a:	f000 b9ab 	b.w	8008374 <__retarget_lock_release_recursive>
 800801e:	bf00      	nop
 8008020:	20001201 	.word	0x20001201

08008024 <__sinit>:
 8008024:	b510      	push	{r4, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	f7ff fff0 	bl	800800c <__sfp_lock_acquire>
 800802c:	6a23      	ldr	r3, [r4, #32]
 800802e:	b11b      	cbz	r3, 8008038 <__sinit+0x14>
 8008030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008034:	f7ff bff0 	b.w	8008018 <__sfp_lock_release>
 8008038:	4b04      	ldr	r3, [pc, #16]	; (800804c <__sinit+0x28>)
 800803a:	6223      	str	r3, [r4, #32]
 800803c:	4b04      	ldr	r3, [pc, #16]	; (8008050 <__sinit+0x2c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1f5      	bne.n	8008030 <__sinit+0xc>
 8008044:	f7ff ffc4 	bl	8007fd0 <global_stdio_init.part.0>
 8008048:	e7f2      	b.n	8008030 <__sinit+0xc>
 800804a:	bf00      	nop
 800804c:	08007f91 	.word	0x08007f91
 8008050:	200011f8 	.word	0x200011f8

08008054 <_fwalk_sglue>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	4607      	mov	r7, r0
 800805a:	4688      	mov	r8, r1
 800805c:	4614      	mov	r4, r2
 800805e:	2600      	movs	r6, #0
 8008060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008064:	f1b9 0901 	subs.w	r9, r9, #1
 8008068:	d505      	bpl.n	8008076 <_fwalk_sglue+0x22>
 800806a:	6824      	ldr	r4, [r4, #0]
 800806c:	2c00      	cmp	r4, #0
 800806e:	d1f7      	bne.n	8008060 <_fwalk_sglue+0xc>
 8008070:	4630      	mov	r0, r6
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d907      	bls.n	800808c <_fwalk_sglue+0x38>
 800807c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008080:	3301      	adds	r3, #1
 8008082:	d003      	beq.n	800808c <_fwalk_sglue+0x38>
 8008084:	4629      	mov	r1, r5
 8008086:	4638      	mov	r0, r7
 8008088:	47c0      	blx	r8
 800808a:	4306      	orrs	r6, r0
 800808c:	3568      	adds	r5, #104	; 0x68
 800808e:	e7e9      	b.n	8008064 <_fwalk_sglue+0x10>

08008090 <siprintf>:
 8008090:	b40e      	push	{r1, r2, r3}
 8008092:	b500      	push	{lr}
 8008094:	b09c      	sub	sp, #112	; 0x70
 8008096:	ab1d      	add	r3, sp, #116	; 0x74
 8008098:	9002      	str	r0, [sp, #8]
 800809a:	9006      	str	r0, [sp, #24]
 800809c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080a0:	4809      	ldr	r0, [pc, #36]	; (80080c8 <siprintf+0x38>)
 80080a2:	9107      	str	r1, [sp, #28]
 80080a4:	9104      	str	r1, [sp, #16]
 80080a6:	4909      	ldr	r1, [pc, #36]	; (80080cc <siprintf+0x3c>)
 80080a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ac:	9105      	str	r1, [sp, #20]
 80080ae:	6800      	ldr	r0, [r0, #0]
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	a902      	add	r1, sp, #8
 80080b4:	f000 fae6 	bl	8008684 <_svfiprintf_r>
 80080b8:	9b02      	ldr	r3, [sp, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	b01c      	add	sp, #112	; 0x70
 80080c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080c4:	b003      	add	sp, #12
 80080c6:	4770      	bx	lr
 80080c8:	2000008c 	.word	0x2000008c
 80080cc:	ffff0208 	.word	0xffff0208

080080d0 <__sread>:
 80080d0:	b510      	push	{r4, lr}
 80080d2:	460c      	mov	r4, r1
 80080d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d8:	f000 f8fc 	bl	80082d4 <_read_r>
 80080dc:	2800      	cmp	r0, #0
 80080de:	bfab      	itete	ge
 80080e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080e2:	89a3      	ldrhlt	r3, [r4, #12]
 80080e4:	181b      	addge	r3, r3, r0
 80080e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080ea:	bfac      	ite	ge
 80080ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80080ee:	81a3      	strhlt	r3, [r4, #12]
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <__swrite>:
 80080f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f6:	461f      	mov	r7, r3
 80080f8:	898b      	ldrh	r3, [r1, #12]
 80080fa:	05db      	lsls	r3, r3, #23
 80080fc:	4605      	mov	r5, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	4616      	mov	r6, r2
 8008102:	d505      	bpl.n	8008110 <__swrite+0x1e>
 8008104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008108:	2302      	movs	r3, #2
 800810a:	2200      	movs	r2, #0
 800810c:	f000 f8d0 	bl	80082b0 <_lseek_r>
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	4632      	mov	r2, r6
 800811e:	463b      	mov	r3, r7
 8008120:	4628      	mov	r0, r5
 8008122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008126:	f000 b8e7 	b.w	80082f8 <_write_r>

0800812a <__sseek>:
 800812a:	b510      	push	{r4, lr}
 800812c:	460c      	mov	r4, r1
 800812e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008132:	f000 f8bd 	bl	80082b0 <_lseek_r>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	bf15      	itete	ne
 800813c:	6560      	strne	r0, [r4, #84]	; 0x54
 800813e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008146:	81a3      	strheq	r3, [r4, #12]
 8008148:	bf18      	it	ne
 800814a:	81a3      	strhne	r3, [r4, #12]
 800814c:	bd10      	pop	{r4, pc}

0800814e <__sclose>:
 800814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008152:	f000 b89d 	b.w	8008290 <_close_r>

08008156 <memset>:
 8008156:	4402      	add	r2, r0
 8008158:	4603      	mov	r3, r0
 800815a:	4293      	cmp	r3, r2
 800815c:	d100      	bne.n	8008160 <memset+0xa>
 800815e:	4770      	bx	lr
 8008160:	f803 1b01 	strb.w	r1, [r3], #1
 8008164:	e7f9      	b.n	800815a <memset+0x4>

08008166 <strcat>:
 8008166:	b510      	push	{r4, lr}
 8008168:	4602      	mov	r2, r0
 800816a:	7814      	ldrb	r4, [r2, #0]
 800816c:	4613      	mov	r3, r2
 800816e:	3201      	adds	r2, #1
 8008170:	2c00      	cmp	r4, #0
 8008172:	d1fa      	bne.n	800816a <strcat+0x4>
 8008174:	3b01      	subs	r3, #1
 8008176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800817e:	2a00      	cmp	r2, #0
 8008180:	d1f9      	bne.n	8008176 <strcat+0x10>
 8008182:	bd10      	pop	{r4, pc}

08008184 <strncpy>:
 8008184:	b510      	push	{r4, lr}
 8008186:	3901      	subs	r1, #1
 8008188:	4603      	mov	r3, r0
 800818a:	b132      	cbz	r2, 800819a <strncpy+0x16>
 800818c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008190:	f803 4b01 	strb.w	r4, [r3], #1
 8008194:	3a01      	subs	r2, #1
 8008196:	2c00      	cmp	r4, #0
 8008198:	d1f7      	bne.n	800818a <strncpy+0x6>
 800819a:	441a      	add	r2, r3
 800819c:	2100      	movs	r1, #0
 800819e:	4293      	cmp	r3, r2
 80081a0:	d100      	bne.n	80081a4 <strncpy+0x20>
 80081a2:	bd10      	pop	{r4, pc}
 80081a4:	f803 1b01 	strb.w	r1, [r3], #1
 80081a8:	e7f9      	b.n	800819e <strncpy+0x1a>
	...

080081ac <strtok>:
 80081ac:	4b16      	ldr	r3, [pc, #88]	; (8008208 <strtok+0x5c>)
 80081ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081b0:	681e      	ldr	r6, [r3, #0]
 80081b2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80081b4:	4605      	mov	r5, r0
 80081b6:	b9fc      	cbnz	r4, 80081f8 <strtok+0x4c>
 80081b8:	2050      	movs	r0, #80	; 0x50
 80081ba:	9101      	str	r1, [sp, #4]
 80081bc:	f000 f954 	bl	8008468 <malloc>
 80081c0:	9901      	ldr	r1, [sp, #4]
 80081c2:	6470      	str	r0, [r6, #68]	; 0x44
 80081c4:	4602      	mov	r2, r0
 80081c6:	b920      	cbnz	r0, 80081d2 <strtok+0x26>
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <strtok+0x60>)
 80081ca:	4811      	ldr	r0, [pc, #68]	; (8008210 <strtok+0x64>)
 80081cc:	215b      	movs	r1, #91	; 0x5b
 80081ce:	f000 f8e1 	bl	8008394 <__assert_func>
 80081d2:	e9c0 4400 	strd	r4, r4, [r0]
 80081d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80081da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80081de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80081e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80081e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80081ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80081ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80081f2:	6184      	str	r4, [r0, #24]
 80081f4:	7704      	strb	r4, [r0, #28]
 80081f6:	6244      	str	r4, [r0, #36]	; 0x24
 80081f8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80081fa:	2301      	movs	r3, #1
 80081fc:	4628      	mov	r0, r5
 80081fe:	b002      	add	sp, #8
 8008200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008204:	f000 b806 	b.w	8008214 <__strtok_r>
 8008208:	2000008c 	.word	0x2000008c
 800820c:	080095b4 	.word	0x080095b4
 8008210:	080095cb 	.word	0x080095cb

08008214 <__strtok_r>:
 8008214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008216:	b908      	cbnz	r0, 800821c <__strtok_r+0x8>
 8008218:	6810      	ldr	r0, [r2, #0]
 800821a:	b188      	cbz	r0, 8008240 <__strtok_r+0x2c>
 800821c:	4604      	mov	r4, r0
 800821e:	4620      	mov	r0, r4
 8008220:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008224:	460f      	mov	r7, r1
 8008226:	f817 6b01 	ldrb.w	r6, [r7], #1
 800822a:	b91e      	cbnz	r6, 8008234 <__strtok_r+0x20>
 800822c:	b965      	cbnz	r5, 8008248 <__strtok_r+0x34>
 800822e:	6015      	str	r5, [r2, #0]
 8008230:	4628      	mov	r0, r5
 8008232:	e005      	b.n	8008240 <__strtok_r+0x2c>
 8008234:	42b5      	cmp	r5, r6
 8008236:	d1f6      	bne.n	8008226 <__strtok_r+0x12>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f0      	bne.n	800821e <__strtok_r+0xa>
 800823c:	6014      	str	r4, [r2, #0]
 800823e:	7003      	strb	r3, [r0, #0]
 8008240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008242:	461c      	mov	r4, r3
 8008244:	e00c      	b.n	8008260 <__strtok_r+0x4c>
 8008246:	b915      	cbnz	r5, 800824e <__strtok_r+0x3a>
 8008248:	f814 3b01 	ldrb.w	r3, [r4], #1
 800824c:	460e      	mov	r6, r1
 800824e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008252:	42ab      	cmp	r3, r5
 8008254:	d1f7      	bne.n	8008246 <__strtok_r+0x32>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f3      	beq.n	8008242 <__strtok_r+0x2e>
 800825a:	2300      	movs	r3, #0
 800825c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008260:	6014      	str	r4, [r2, #0]
 8008262:	e7ed      	b.n	8008240 <__strtok_r+0x2c>

08008264 <strstr>:
 8008264:	780a      	ldrb	r2, [r1, #0]
 8008266:	b570      	push	{r4, r5, r6, lr}
 8008268:	b96a      	cbnz	r2, 8008286 <strstr+0x22>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	429a      	cmp	r2, r3
 800826e:	d109      	bne.n	8008284 <strstr+0x20>
 8008270:	460c      	mov	r4, r1
 8008272:	4605      	mov	r5, r0
 8008274:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0f6      	beq.n	800826a <strstr+0x6>
 800827c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008280:	429e      	cmp	r6, r3
 8008282:	d0f7      	beq.n	8008274 <strstr+0x10>
 8008284:	3001      	adds	r0, #1
 8008286:	7803      	ldrb	r3, [r0, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1ef      	bne.n	800826c <strstr+0x8>
 800828c:	4618      	mov	r0, r3
 800828e:	e7ec      	b.n	800826a <strstr+0x6>

08008290 <_close_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d06      	ldr	r5, [pc, #24]	; (80082ac <_close_r+0x1c>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	f7fa f906 	bl	80024ac <_close>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_close_r+0x1a>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_close_r+0x1a>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	200011fc 	.word	0x200011fc

080082b0 <_lseek_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d07      	ldr	r5, [pc, #28]	; (80082d0 <_lseek_r+0x20>)
 80082b4:	4604      	mov	r4, r0
 80082b6:	4608      	mov	r0, r1
 80082b8:	4611      	mov	r1, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	602a      	str	r2, [r5, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	f7fa f91b 	bl	80024fa <_lseek>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_lseek_r+0x1e>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_lseek_r+0x1e>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	200011fc 	.word	0x200011fc

080082d4 <_read_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <_read_r+0x20>)
 80082d8:	4604      	mov	r4, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	4611      	mov	r1, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	602a      	str	r2, [r5, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	f7fa f8a9 	bl	800243a <_read>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_read_r+0x1e>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_read_r+0x1e>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	200011fc 	.word	0x200011fc

080082f8 <_write_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d07      	ldr	r5, [pc, #28]	; (8008318 <_write_r+0x20>)
 80082fc:	4604      	mov	r4, r0
 80082fe:	4608      	mov	r0, r1
 8008300:	4611      	mov	r1, r2
 8008302:	2200      	movs	r2, #0
 8008304:	602a      	str	r2, [r5, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	f7fa f8b4 	bl	8002474 <_write>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_write_r+0x1e>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	b103      	cbz	r3, 8008316 <_write_r+0x1e>
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	200011fc 	.word	0x200011fc

0800831c <__errno>:
 800831c:	4b01      	ldr	r3, [pc, #4]	; (8008324 <__errno+0x8>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	2000008c 	.word	0x2000008c

08008328 <__libc_init_array>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	4d0d      	ldr	r5, [pc, #52]	; (8008360 <__libc_init_array+0x38>)
 800832c:	4c0d      	ldr	r4, [pc, #52]	; (8008364 <__libc_init_array+0x3c>)
 800832e:	1b64      	subs	r4, r4, r5
 8008330:	10a4      	asrs	r4, r4, #2
 8008332:	2600      	movs	r6, #0
 8008334:	42a6      	cmp	r6, r4
 8008336:	d109      	bne.n	800834c <__libc_init_array+0x24>
 8008338:	4d0b      	ldr	r5, [pc, #44]	; (8008368 <__libc_init_array+0x40>)
 800833a:	4c0c      	ldr	r4, [pc, #48]	; (800836c <__libc_init_array+0x44>)
 800833c:	f000 fffa 	bl	8009334 <_init>
 8008340:	1b64      	subs	r4, r4, r5
 8008342:	10a4      	asrs	r4, r4, #2
 8008344:	2600      	movs	r6, #0
 8008346:	42a6      	cmp	r6, r4
 8008348:	d105      	bne.n	8008356 <__libc_init_array+0x2e>
 800834a:	bd70      	pop	{r4, r5, r6, pc}
 800834c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008350:	4798      	blx	r3
 8008352:	3601      	adds	r6, #1
 8008354:	e7ee      	b.n	8008334 <__libc_init_array+0xc>
 8008356:	f855 3b04 	ldr.w	r3, [r5], #4
 800835a:	4798      	blx	r3
 800835c:	3601      	adds	r6, #1
 800835e:	e7f2      	b.n	8008346 <__libc_init_array+0x1e>
 8008360:	0800969c 	.word	0x0800969c
 8008364:	0800969c 	.word	0x0800969c
 8008368:	0800969c 	.word	0x0800969c
 800836c:	080096a0 	.word	0x080096a0

08008370 <__retarget_lock_init_recursive>:
 8008370:	4770      	bx	lr

08008372 <__retarget_lock_acquire_recursive>:
 8008372:	4770      	bx	lr

08008374 <__retarget_lock_release_recursive>:
 8008374:	4770      	bx	lr

08008376 <memcpy>:
 8008376:	440a      	add	r2, r1
 8008378:	4291      	cmp	r1, r2
 800837a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800837e:	d100      	bne.n	8008382 <memcpy+0xc>
 8008380:	4770      	bx	lr
 8008382:	b510      	push	{r4, lr}
 8008384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008388:	f803 4f01 	strb.w	r4, [r3, #1]!
 800838c:	4291      	cmp	r1, r2
 800838e:	d1f9      	bne.n	8008384 <memcpy+0xe>
 8008390:	bd10      	pop	{r4, pc}
	...

08008394 <__assert_func>:
 8008394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008396:	4614      	mov	r4, r2
 8008398:	461a      	mov	r2, r3
 800839a:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <__assert_func+0x2c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4605      	mov	r5, r0
 80083a0:	68d8      	ldr	r0, [r3, #12]
 80083a2:	b14c      	cbz	r4, 80083b8 <__assert_func+0x24>
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <__assert_func+0x30>)
 80083a6:	9100      	str	r1, [sp, #0]
 80083a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083ac:	4906      	ldr	r1, [pc, #24]	; (80083c8 <__assert_func+0x34>)
 80083ae:	462b      	mov	r3, r5
 80083b0:	f000 fca4 	bl	8008cfc <fiprintf>
 80083b4:	f000 fcde 	bl	8008d74 <abort>
 80083b8:	4b04      	ldr	r3, [pc, #16]	; (80083cc <__assert_func+0x38>)
 80083ba:	461c      	mov	r4, r3
 80083bc:	e7f3      	b.n	80083a6 <__assert_func+0x12>
 80083be:	bf00      	nop
 80083c0:	2000008c 	.word	0x2000008c
 80083c4:	08009625 	.word	0x08009625
 80083c8:	08009632 	.word	0x08009632
 80083cc:	08009660 	.word	0x08009660

080083d0 <_free_r>:
 80083d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083d2:	2900      	cmp	r1, #0
 80083d4:	d044      	beq.n	8008460 <_free_r+0x90>
 80083d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083da:	9001      	str	r0, [sp, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f1a1 0404 	sub.w	r4, r1, #4
 80083e2:	bfb8      	it	lt
 80083e4:	18e4      	addlt	r4, r4, r3
 80083e6:	f000 f8e7 	bl	80085b8 <__malloc_lock>
 80083ea:	4a1e      	ldr	r2, [pc, #120]	; (8008464 <_free_r+0x94>)
 80083ec:	9801      	ldr	r0, [sp, #4]
 80083ee:	6813      	ldr	r3, [r2, #0]
 80083f0:	b933      	cbnz	r3, 8008400 <_free_r+0x30>
 80083f2:	6063      	str	r3, [r4, #4]
 80083f4:	6014      	str	r4, [r2, #0]
 80083f6:	b003      	add	sp, #12
 80083f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083fc:	f000 b8e2 	b.w	80085c4 <__malloc_unlock>
 8008400:	42a3      	cmp	r3, r4
 8008402:	d908      	bls.n	8008416 <_free_r+0x46>
 8008404:	6825      	ldr	r5, [r4, #0]
 8008406:	1961      	adds	r1, r4, r5
 8008408:	428b      	cmp	r3, r1
 800840a:	bf01      	itttt	eq
 800840c:	6819      	ldreq	r1, [r3, #0]
 800840e:	685b      	ldreq	r3, [r3, #4]
 8008410:	1949      	addeq	r1, r1, r5
 8008412:	6021      	streq	r1, [r4, #0]
 8008414:	e7ed      	b.n	80083f2 <_free_r+0x22>
 8008416:	461a      	mov	r2, r3
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	b10b      	cbz	r3, 8008420 <_free_r+0x50>
 800841c:	42a3      	cmp	r3, r4
 800841e:	d9fa      	bls.n	8008416 <_free_r+0x46>
 8008420:	6811      	ldr	r1, [r2, #0]
 8008422:	1855      	adds	r5, r2, r1
 8008424:	42a5      	cmp	r5, r4
 8008426:	d10b      	bne.n	8008440 <_free_r+0x70>
 8008428:	6824      	ldr	r4, [r4, #0]
 800842a:	4421      	add	r1, r4
 800842c:	1854      	adds	r4, r2, r1
 800842e:	42a3      	cmp	r3, r4
 8008430:	6011      	str	r1, [r2, #0]
 8008432:	d1e0      	bne.n	80083f6 <_free_r+0x26>
 8008434:	681c      	ldr	r4, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	6053      	str	r3, [r2, #4]
 800843a:	440c      	add	r4, r1
 800843c:	6014      	str	r4, [r2, #0]
 800843e:	e7da      	b.n	80083f6 <_free_r+0x26>
 8008440:	d902      	bls.n	8008448 <_free_r+0x78>
 8008442:	230c      	movs	r3, #12
 8008444:	6003      	str	r3, [r0, #0]
 8008446:	e7d6      	b.n	80083f6 <_free_r+0x26>
 8008448:	6825      	ldr	r5, [r4, #0]
 800844a:	1961      	adds	r1, r4, r5
 800844c:	428b      	cmp	r3, r1
 800844e:	bf04      	itt	eq
 8008450:	6819      	ldreq	r1, [r3, #0]
 8008452:	685b      	ldreq	r3, [r3, #4]
 8008454:	6063      	str	r3, [r4, #4]
 8008456:	bf04      	itt	eq
 8008458:	1949      	addeq	r1, r1, r5
 800845a:	6021      	streq	r1, [r4, #0]
 800845c:	6054      	str	r4, [r2, #4]
 800845e:	e7ca      	b.n	80083f6 <_free_r+0x26>
 8008460:	b003      	add	sp, #12
 8008462:	bd30      	pop	{r4, r5, pc}
 8008464:	20001204 	.word	0x20001204

08008468 <malloc>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <malloc+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f000 b823 	b.w	80084b8 <_malloc_r>
 8008472:	bf00      	nop
 8008474:	2000008c 	.word	0x2000008c

08008478 <sbrk_aligned>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	4e0e      	ldr	r6, [pc, #56]	; (80084b4 <sbrk_aligned+0x3c>)
 800847c:	460c      	mov	r4, r1
 800847e:	6831      	ldr	r1, [r6, #0]
 8008480:	4605      	mov	r5, r0
 8008482:	b911      	cbnz	r1, 800848a <sbrk_aligned+0x12>
 8008484:	f000 fc66 	bl	8008d54 <_sbrk_r>
 8008488:	6030      	str	r0, [r6, #0]
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f000 fc61 	bl	8008d54 <_sbrk_r>
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	d00a      	beq.n	80084ac <sbrk_aligned+0x34>
 8008496:	1cc4      	adds	r4, r0, #3
 8008498:	f024 0403 	bic.w	r4, r4, #3
 800849c:	42a0      	cmp	r0, r4
 800849e:	d007      	beq.n	80084b0 <sbrk_aligned+0x38>
 80084a0:	1a21      	subs	r1, r4, r0
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 fc56 	bl	8008d54 <_sbrk_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	d101      	bne.n	80084b0 <sbrk_aligned+0x38>
 80084ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80084b0:	4620      	mov	r0, r4
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	20001208 	.word	0x20001208

080084b8 <_malloc_r>:
 80084b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084bc:	1ccd      	adds	r5, r1, #3
 80084be:	f025 0503 	bic.w	r5, r5, #3
 80084c2:	3508      	adds	r5, #8
 80084c4:	2d0c      	cmp	r5, #12
 80084c6:	bf38      	it	cc
 80084c8:	250c      	movcc	r5, #12
 80084ca:	2d00      	cmp	r5, #0
 80084cc:	4607      	mov	r7, r0
 80084ce:	db01      	blt.n	80084d4 <_malloc_r+0x1c>
 80084d0:	42a9      	cmp	r1, r5
 80084d2:	d905      	bls.n	80084e0 <_malloc_r+0x28>
 80084d4:	230c      	movs	r3, #12
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	2600      	movs	r6, #0
 80084da:	4630      	mov	r0, r6
 80084dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80085b4 <_malloc_r+0xfc>
 80084e4:	f000 f868 	bl	80085b8 <__malloc_lock>
 80084e8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ec:	461c      	mov	r4, r3
 80084ee:	bb5c      	cbnz	r4, 8008548 <_malloc_r+0x90>
 80084f0:	4629      	mov	r1, r5
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7ff ffc0 	bl	8008478 <sbrk_aligned>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	4604      	mov	r4, r0
 80084fc:	d155      	bne.n	80085aa <_malloc_r+0xf2>
 80084fe:	f8d8 4000 	ldr.w	r4, [r8]
 8008502:	4626      	mov	r6, r4
 8008504:	2e00      	cmp	r6, #0
 8008506:	d145      	bne.n	8008594 <_malloc_r+0xdc>
 8008508:	2c00      	cmp	r4, #0
 800850a:	d048      	beq.n	800859e <_malloc_r+0xe6>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	4631      	mov	r1, r6
 8008510:	4638      	mov	r0, r7
 8008512:	eb04 0903 	add.w	r9, r4, r3
 8008516:	f000 fc1d 	bl	8008d54 <_sbrk_r>
 800851a:	4581      	cmp	r9, r0
 800851c:	d13f      	bne.n	800859e <_malloc_r+0xe6>
 800851e:	6821      	ldr	r1, [r4, #0]
 8008520:	1a6d      	subs	r5, r5, r1
 8008522:	4629      	mov	r1, r5
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff ffa7 	bl	8008478 <sbrk_aligned>
 800852a:	3001      	adds	r0, #1
 800852c:	d037      	beq.n	800859e <_malloc_r+0xe6>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	442b      	add	r3, r5
 8008532:	6023      	str	r3, [r4, #0]
 8008534:	f8d8 3000 	ldr.w	r3, [r8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d038      	beq.n	80085ae <_malloc_r+0xf6>
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	42a2      	cmp	r2, r4
 8008540:	d12b      	bne.n	800859a <_malloc_r+0xe2>
 8008542:	2200      	movs	r2, #0
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	e00f      	b.n	8008568 <_malloc_r+0xb0>
 8008548:	6822      	ldr	r2, [r4, #0]
 800854a:	1b52      	subs	r2, r2, r5
 800854c:	d41f      	bmi.n	800858e <_malloc_r+0xd6>
 800854e:	2a0b      	cmp	r2, #11
 8008550:	d917      	bls.n	8008582 <_malloc_r+0xca>
 8008552:	1961      	adds	r1, r4, r5
 8008554:	42a3      	cmp	r3, r4
 8008556:	6025      	str	r5, [r4, #0]
 8008558:	bf18      	it	ne
 800855a:	6059      	strne	r1, [r3, #4]
 800855c:	6863      	ldr	r3, [r4, #4]
 800855e:	bf08      	it	eq
 8008560:	f8c8 1000 	streq.w	r1, [r8]
 8008564:	5162      	str	r2, [r4, r5]
 8008566:	604b      	str	r3, [r1, #4]
 8008568:	4638      	mov	r0, r7
 800856a:	f104 060b 	add.w	r6, r4, #11
 800856e:	f000 f829 	bl	80085c4 <__malloc_unlock>
 8008572:	f026 0607 	bic.w	r6, r6, #7
 8008576:	1d23      	adds	r3, r4, #4
 8008578:	1af2      	subs	r2, r6, r3
 800857a:	d0ae      	beq.n	80084da <_malloc_r+0x22>
 800857c:	1b9b      	subs	r3, r3, r6
 800857e:	50a3      	str	r3, [r4, r2]
 8008580:	e7ab      	b.n	80084da <_malloc_r+0x22>
 8008582:	42a3      	cmp	r3, r4
 8008584:	6862      	ldr	r2, [r4, #4]
 8008586:	d1dd      	bne.n	8008544 <_malloc_r+0x8c>
 8008588:	f8c8 2000 	str.w	r2, [r8]
 800858c:	e7ec      	b.n	8008568 <_malloc_r+0xb0>
 800858e:	4623      	mov	r3, r4
 8008590:	6864      	ldr	r4, [r4, #4]
 8008592:	e7ac      	b.n	80084ee <_malloc_r+0x36>
 8008594:	4634      	mov	r4, r6
 8008596:	6876      	ldr	r6, [r6, #4]
 8008598:	e7b4      	b.n	8008504 <_malloc_r+0x4c>
 800859a:	4613      	mov	r3, r2
 800859c:	e7cc      	b.n	8008538 <_malloc_r+0x80>
 800859e:	230c      	movs	r3, #12
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	4638      	mov	r0, r7
 80085a4:	f000 f80e 	bl	80085c4 <__malloc_unlock>
 80085a8:	e797      	b.n	80084da <_malloc_r+0x22>
 80085aa:	6025      	str	r5, [r4, #0]
 80085ac:	e7dc      	b.n	8008568 <_malloc_r+0xb0>
 80085ae:	605b      	str	r3, [r3, #4]
 80085b0:	deff      	udf	#255	; 0xff
 80085b2:	bf00      	nop
 80085b4:	20001204 	.word	0x20001204

080085b8 <__malloc_lock>:
 80085b8:	4801      	ldr	r0, [pc, #4]	; (80085c0 <__malloc_lock+0x8>)
 80085ba:	f7ff beda 	b.w	8008372 <__retarget_lock_acquire_recursive>
 80085be:	bf00      	nop
 80085c0:	20001200 	.word	0x20001200

080085c4 <__malloc_unlock>:
 80085c4:	4801      	ldr	r0, [pc, #4]	; (80085cc <__malloc_unlock+0x8>)
 80085c6:	f7ff bed5 	b.w	8008374 <__retarget_lock_release_recursive>
 80085ca:	bf00      	nop
 80085cc:	20001200 	.word	0x20001200

080085d0 <__ssputs_r>:
 80085d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	688e      	ldr	r6, [r1, #8]
 80085d6:	461f      	mov	r7, r3
 80085d8:	42be      	cmp	r6, r7
 80085da:	680b      	ldr	r3, [r1, #0]
 80085dc:	4682      	mov	sl, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	4690      	mov	r8, r2
 80085e2:	d82c      	bhi.n	800863e <__ssputs_r+0x6e>
 80085e4:	898a      	ldrh	r2, [r1, #12]
 80085e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085ea:	d026      	beq.n	800863a <__ssputs_r+0x6a>
 80085ec:	6965      	ldr	r5, [r4, #20]
 80085ee:	6909      	ldr	r1, [r1, #16]
 80085f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085f4:	eba3 0901 	sub.w	r9, r3, r1
 80085f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085fc:	1c7b      	adds	r3, r7, #1
 80085fe:	444b      	add	r3, r9
 8008600:	106d      	asrs	r5, r5, #1
 8008602:	429d      	cmp	r5, r3
 8008604:	bf38      	it	cc
 8008606:	461d      	movcc	r5, r3
 8008608:	0553      	lsls	r3, r2, #21
 800860a:	d527      	bpl.n	800865c <__ssputs_r+0x8c>
 800860c:	4629      	mov	r1, r5
 800860e:	f7ff ff53 	bl	80084b8 <_malloc_r>
 8008612:	4606      	mov	r6, r0
 8008614:	b360      	cbz	r0, 8008670 <__ssputs_r+0xa0>
 8008616:	6921      	ldr	r1, [r4, #16]
 8008618:	464a      	mov	r2, r9
 800861a:	f7ff feac 	bl	8008376 <memcpy>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	6126      	str	r6, [r4, #16]
 800862c:	6165      	str	r5, [r4, #20]
 800862e:	444e      	add	r6, r9
 8008630:	eba5 0509 	sub.w	r5, r5, r9
 8008634:	6026      	str	r6, [r4, #0]
 8008636:	60a5      	str	r5, [r4, #8]
 8008638:	463e      	mov	r6, r7
 800863a:	42be      	cmp	r6, r7
 800863c:	d900      	bls.n	8008640 <__ssputs_r+0x70>
 800863e:	463e      	mov	r6, r7
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	4632      	mov	r2, r6
 8008644:	4641      	mov	r1, r8
 8008646:	f000 fb6b 	bl	8008d20 <memmove>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	1b9b      	subs	r3, r3, r6
 800864e:	60a3      	str	r3, [r4, #8]
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	4433      	add	r3, r6
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	2000      	movs	r0, #0
 8008658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865c:	462a      	mov	r2, r5
 800865e:	f000 fb90 	bl	8008d82 <_realloc_r>
 8008662:	4606      	mov	r6, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d1e0      	bne.n	800862a <__ssputs_r+0x5a>
 8008668:	6921      	ldr	r1, [r4, #16]
 800866a:	4650      	mov	r0, sl
 800866c:	f7ff feb0 	bl	80083d0 <_free_r>
 8008670:	230c      	movs	r3, #12
 8008672:	f8ca 3000 	str.w	r3, [sl]
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800867c:	81a3      	strh	r3, [r4, #12]
 800867e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008682:	e7e9      	b.n	8008658 <__ssputs_r+0x88>

08008684 <_svfiprintf_r>:
 8008684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008688:	4698      	mov	r8, r3
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	061b      	lsls	r3, r3, #24
 800868e:	b09d      	sub	sp, #116	; 0x74
 8008690:	4607      	mov	r7, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4614      	mov	r4, r2
 8008696:	d50e      	bpl.n	80086b6 <_svfiprintf_r+0x32>
 8008698:	690b      	ldr	r3, [r1, #16]
 800869a:	b963      	cbnz	r3, 80086b6 <_svfiprintf_r+0x32>
 800869c:	2140      	movs	r1, #64	; 0x40
 800869e:	f7ff ff0b 	bl	80084b8 <_malloc_r>
 80086a2:	6028      	str	r0, [r5, #0]
 80086a4:	6128      	str	r0, [r5, #16]
 80086a6:	b920      	cbnz	r0, 80086b2 <_svfiprintf_r+0x2e>
 80086a8:	230c      	movs	r3, #12
 80086aa:	603b      	str	r3, [r7, #0]
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086b0:	e0d0      	b.n	8008854 <_svfiprintf_r+0x1d0>
 80086b2:	2340      	movs	r3, #64	; 0x40
 80086b4:	616b      	str	r3, [r5, #20]
 80086b6:	2300      	movs	r3, #0
 80086b8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ba:	2320      	movs	r3, #32
 80086bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086c4:	2330      	movs	r3, #48	; 0x30
 80086c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800886c <_svfiprintf_r+0x1e8>
 80086ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086ce:	f04f 0901 	mov.w	r9, #1
 80086d2:	4623      	mov	r3, r4
 80086d4:	469a      	mov	sl, r3
 80086d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086da:	b10a      	cbz	r2, 80086e0 <_svfiprintf_r+0x5c>
 80086dc:	2a25      	cmp	r2, #37	; 0x25
 80086de:	d1f9      	bne.n	80086d4 <_svfiprintf_r+0x50>
 80086e0:	ebba 0b04 	subs.w	fp, sl, r4
 80086e4:	d00b      	beq.n	80086fe <_svfiprintf_r+0x7a>
 80086e6:	465b      	mov	r3, fp
 80086e8:	4622      	mov	r2, r4
 80086ea:	4629      	mov	r1, r5
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff ff6f 	bl	80085d0 <__ssputs_r>
 80086f2:	3001      	adds	r0, #1
 80086f4:	f000 80a9 	beq.w	800884a <_svfiprintf_r+0x1c6>
 80086f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086fa:	445a      	add	r2, fp
 80086fc:	9209      	str	r2, [sp, #36]	; 0x24
 80086fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 80a1 	beq.w	800884a <_svfiprintf_r+0x1c6>
 8008708:	2300      	movs	r3, #0
 800870a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800870e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008712:	f10a 0a01 	add.w	sl, sl, #1
 8008716:	9304      	str	r3, [sp, #16]
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800871e:	931a      	str	r3, [sp, #104]	; 0x68
 8008720:	4654      	mov	r4, sl
 8008722:	2205      	movs	r2, #5
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	4850      	ldr	r0, [pc, #320]	; (800886c <_svfiprintf_r+0x1e8>)
 800872a:	f7f7 fd59 	bl	80001e0 <memchr>
 800872e:	9a04      	ldr	r2, [sp, #16]
 8008730:	b9d8      	cbnz	r0, 800876a <_svfiprintf_r+0xe6>
 8008732:	06d0      	lsls	r0, r2, #27
 8008734:	bf44      	itt	mi
 8008736:	2320      	movmi	r3, #32
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873c:	0711      	lsls	r1, r2, #28
 800873e:	bf44      	itt	mi
 8008740:	232b      	movmi	r3, #43	; 0x2b
 8008742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008746:	f89a 3000 	ldrb.w	r3, [sl]
 800874a:	2b2a      	cmp	r3, #42	; 0x2a
 800874c:	d015      	beq.n	800877a <_svfiprintf_r+0xf6>
 800874e:	9a07      	ldr	r2, [sp, #28]
 8008750:	4654      	mov	r4, sl
 8008752:	2000      	movs	r0, #0
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4621      	mov	r1, r4
 800875a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800875e:	3b30      	subs	r3, #48	; 0x30
 8008760:	2b09      	cmp	r3, #9
 8008762:	d94d      	bls.n	8008800 <_svfiprintf_r+0x17c>
 8008764:	b1b0      	cbz	r0, 8008794 <_svfiprintf_r+0x110>
 8008766:	9207      	str	r2, [sp, #28]
 8008768:	e014      	b.n	8008794 <_svfiprintf_r+0x110>
 800876a:	eba0 0308 	sub.w	r3, r0, r8
 800876e:	fa09 f303 	lsl.w	r3, r9, r3
 8008772:	4313      	orrs	r3, r2
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	46a2      	mov	sl, r4
 8008778:	e7d2      	b.n	8008720 <_svfiprintf_r+0x9c>
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	1d19      	adds	r1, r3, #4
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	9103      	str	r1, [sp, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfbb      	ittet	lt
 8008786:	425b      	neglt	r3, r3
 8008788:	f042 0202 	orrlt.w	r2, r2, #2
 800878c:	9307      	strge	r3, [sp, #28]
 800878e:	9307      	strlt	r3, [sp, #28]
 8008790:	bfb8      	it	lt
 8008792:	9204      	strlt	r2, [sp, #16]
 8008794:	7823      	ldrb	r3, [r4, #0]
 8008796:	2b2e      	cmp	r3, #46	; 0x2e
 8008798:	d10c      	bne.n	80087b4 <_svfiprintf_r+0x130>
 800879a:	7863      	ldrb	r3, [r4, #1]
 800879c:	2b2a      	cmp	r3, #42	; 0x2a
 800879e:	d134      	bne.n	800880a <_svfiprintf_r+0x186>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d1a      	adds	r2, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9203      	str	r2, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfb8      	it	lt
 80087ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087b0:	3402      	adds	r4, #2
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800887c <_svfiprintf_r+0x1f8>
 80087b8:	7821      	ldrb	r1, [r4, #0]
 80087ba:	2203      	movs	r2, #3
 80087bc:	4650      	mov	r0, sl
 80087be:	f7f7 fd0f 	bl	80001e0 <memchr>
 80087c2:	b138      	cbz	r0, 80087d4 <_svfiprintf_r+0x150>
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	eba0 000a 	sub.w	r0, r0, sl
 80087ca:	2240      	movs	r2, #64	; 0x40
 80087cc:	4082      	lsls	r2, r0
 80087ce:	4313      	orrs	r3, r2
 80087d0:	3401      	adds	r4, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d8:	4825      	ldr	r0, [pc, #148]	; (8008870 <_svfiprintf_r+0x1ec>)
 80087da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087de:	2206      	movs	r2, #6
 80087e0:	f7f7 fcfe 	bl	80001e0 <memchr>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d038      	beq.n	800885a <_svfiprintf_r+0x1d6>
 80087e8:	4b22      	ldr	r3, [pc, #136]	; (8008874 <_svfiprintf_r+0x1f0>)
 80087ea:	bb1b      	cbnz	r3, 8008834 <_svfiprintf_r+0x1b0>
 80087ec:	9b03      	ldr	r3, [sp, #12]
 80087ee:	3307      	adds	r3, #7
 80087f0:	f023 0307 	bic.w	r3, r3, #7
 80087f4:	3308      	adds	r3, #8
 80087f6:	9303      	str	r3, [sp, #12]
 80087f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fa:	4433      	add	r3, r6
 80087fc:	9309      	str	r3, [sp, #36]	; 0x24
 80087fe:	e768      	b.n	80086d2 <_svfiprintf_r+0x4e>
 8008800:	fb0c 3202 	mla	r2, ip, r2, r3
 8008804:	460c      	mov	r4, r1
 8008806:	2001      	movs	r0, #1
 8008808:	e7a6      	b.n	8008758 <_svfiprintf_r+0xd4>
 800880a:	2300      	movs	r3, #0
 800880c:	3401      	adds	r4, #1
 800880e:	9305      	str	r3, [sp, #20]
 8008810:	4619      	mov	r1, r3
 8008812:	f04f 0c0a 	mov.w	ip, #10
 8008816:	4620      	mov	r0, r4
 8008818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800881c:	3a30      	subs	r2, #48	; 0x30
 800881e:	2a09      	cmp	r2, #9
 8008820:	d903      	bls.n	800882a <_svfiprintf_r+0x1a6>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0c6      	beq.n	80087b4 <_svfiprintf_r+0x130>
 8008826:	9105      	str	r1, [sp, #20]
 8008828:	e7c4      	b.n	80087b4 <_svfiprintf_r+0x130>
 800882a:	fb0c 2101 	mla	r1, ip, r1, r2
 800882e:	4604      	mov	r4, r0
 8008830:	2301      	movs	r3, #1
 8008832:	e7f0      	b.n	8008816 <_svfiprintf_r+0x192>
 8008834:	ab03      	add	r3, sp, #12
 8008836:	9300      	str	r3, [sp, #0]
 8008838:	462a      	mov	r2, r5
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <_svfiprintf_r+0x1f4>)
 800883c:	a904      	add	r1, sp, #16
 800883e:	4638      	mov	r0, r7
 8008840:	f3af 8000 	nop.w
 8008844:	1c42      	adds	r2, r0, #1
 8008846:	4606      	mov	r6, r0
 8008848:	d1d6      	bne.n	80087f8 <_svfiprintf_r+0x174>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	065b      	lsls	r3, r3, #25
 800884e:	f53f af2d 	bmi.w	80086ac <_svfiprintf_r+0x28>
 8008852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008854:	b01d      	add	sp, #116	; 0x74
 8008856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885a:	ab03      	add	r3, sp, #12
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	462a      	mov	r2, r5
 8008860:	4b05      	ldr	r3, [pc, #20]	; (8008878 <_svfiprintf_r+0x1f4>)
 8008862:	a904      	add	r1, sp, #16
 8008864:	4638      	mov	r0, r7
 8008866:	f000 f879 	bl	800895c <_printf_i>
 800886a:	e7eb      	b.n	8008844 <_svfiprintf_r+0x1c0>
 800886c:	08009661 	.word	0x08009661
 8008870:	0800966b 	.word	0x0800966b
 8008874:	00000000 	.word	0x00000000
 8008878:	080085d1 	.word	0x080085d1
 800887c:	08009667 	.word	0x08009667

08008880 <_printf_common>:
 8008880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008884:	4616      	mov	r6, r2
 8008886:	4699      	mov	r9, r3
 8008888:	688a      	ldr	r2, [r1, #8]
 800888a:	690b      	ldr	r3, [r1, #16]
 800888c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008890:	4293      	cmp	r3, r2
 8008892:	bfb8      	it	lt
 8008894:	4613      	movlt	r3, r2
 8008896:	6033      	str	r3, [r6, #0]
 8008898:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800889c:	4607      	mov	r7, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	b10a      	cbz	r2, 80088a6 <_printf_common+0x26>
 80088a2:	3301      	adds	r3, #1
 80088a4:	6033      	str	r3, [r6, #0]
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	0699      	lsls	r1, r3, #26
 80088aa:	bf42      	ittt	mi
 80088ac:	6833      	ldrmi	r3, [r6, #0]
 80088ae:	3302      	addmi	r3, #2
 80088b0:	6033      	strmi	r3, [r6, #0]
 80088b2:	6825      	ldr	r5, [r4, #0]
 80088b4:	f015 0506 	ands.w	r5, r5, #6
 80088b8:	d106      	bne.n	80088c8 <_printf_common+0x48>
 80088ba:	f104 0a19 	add.w	sl, r4, #25
 80088be:	68e3      	ldr	r3, [r4, #12]
 80088c0:	6832      	ldr	r2, [r6, #0]
 80088c2:	1a9b      	subs	r3, r3, r2
 80088c4:	42ab      	cmp	r3, r5
 80088c6:	dc26      	bgt.n	8008916 <_printf_common+0x96>
 80088c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088cc:	1e13      	subs	r3, r2, #0
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	bf18      	it	ne
 80088d2:	2301      	movne	r3, #1
 80088d4:	0692      	lsls	r2, r2, #26
 80088d6:	d42b      	bmi.n	8008930 <_printf_common+0xb0>
 80088d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088dc:	4649      	mov	r1, r9
 80088de:	4638      	mov	r0, r7
 80088e0:	47c0      	blx	r8
 80088e2:	3001      	adds	r0, #1
 80088e4:	d01e      	beq.n	8008924 <_printf_common+0xa4>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	6922      	ldr	r2, [r4, #16]
 80088ea:	f003 0306 	and.w	r3, r3, #6
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	bf02      	ittt	eq
 80088f2:	68e5      	ldreq	r5, [r4, #12]
 80088f4:	6833      	ldreq	r3, [r6, #0]
 80088f6:	1aed      	subeq	r5, r5, r3
 80088f8:	68a3      	ldr	r3, [r4, #8]
 80088fa:	bf0c      	ite	eq
 80088fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008900:	2500      	movne	r5, #0
 8008902:	4293      	cmp	r3, r2
 8008904:	bfc4      	itt	gt
 8008906:	1a9b      	subgt	r3, r3, r2
 8008908:	18ed      	addgt	r5, r5, r3
 800890a:	2600      	movs	r6, #0
 800890c:	341a      	adds	r4, #26
 800890e:	42b5      	cmp	r5, r6
 8008910:	d11a      	bne.n	8008948 <_printf_common+0xc8>
 8008912:	2000      	movs	r0, #0
 8008914:	e008      	b.n	8008928 <_printf_common+0xa8>
 8008916:	2301      	movs	r3, #1
 8008918:	4652      	mov	r2, sl
 800891a:	4649      	mov	r1, r9
 800891c:	4638      	mov	r0, r7
 800891e:	47c0      	blx	r8
 8008920:	3001      	adds	r0, #1
 8008922:	d103      	bne.n	800892c <_printf_common+0xac>
 8008924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892c:	3501      	adds	r5, #1
 800892e:	e7c6      	b.n	80088be <_printf_common+0x3e>
 8008930:	18e1      	adds	r1, r4, r3
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	2030      	movs	r0, #48	; 0x30
 8008936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800893a:	4422      	add	r2, r4
 800893c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008940:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008944:	3302      	adds	r3, #2
 8008946:	e7c7      	b.n	80088d8 <_printf_common+0x58>
 8008948:	2301      	movs	r3, #1
 800894a:	4622      	mov	r2, r4
 800894c:	4649      	mov	r1, r9
 800894e:	4638      	mov	r0, r7
 8008950:	47c0      	blx	r8
 8008952:	3001      	adds	r0, #1
 8008954:	d0e6      	beq.n	8008924 <_printf_common+0xa4>
 8008956:	3601      	adds	r6, #1
 8008958:	e7d9      	b.n	800890e <_printf_common+0x8e>
	...

0800895c <_printf_i>:
 800895c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	7e0f      	ldrb	r7, [r1, #24]
 8008962:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008964:	2f78      	cmp	r7, #120	; 0x78
 8008966:	4691      	mov	r9, r2
 8008968:	4680      	mov	r8, r0
 800896a:	460c      	mov	r4, r1
 800896c:	469a      	mov	sl, r3
 800896e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008972:	d807      	bhi.n	8008984 <_printf_i+0x28>
 8008974:	2f62      	cmp	r7, #98	; 0x62
 8008976:	d80a      	bhi.n	800898e <_printf_i+0x32>
 8008978:	2f00      	cmp	r7, #0
 800897a:	f000 80d4 	beq.w	8008b26 <_printf_i+0x1ca>
 800897e:	2f58      	cmp	r7, #88	; 0x58
 8008980:	f000 80c0 	beq.w	8008b04 <_printf_i+0x1a8>
 8008984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800898c:	e03a      	b.n	8008a04 <_printf_i+0xa8>
 800898e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008992:	2b15      	cmp	r3, #21
 8008994:	d8f6      	bhi.n	8008984 <_printf_i+0x28>
 8008996:	a101      	add	r1, pc, #4	; (adr r1, 800899c <_printf_i+0x40>)
 8008998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800899c:	080089f5 	.word	0x080089f5
 80089a0:	08008a09 	.word	0x08008a09
 80089a4:	08008985 	.word	0x08008985
 80089a8:	08008985 	.word	0x08008985
 80089ac:	08008985 	.word	0x08008985
 80089b0:	08008985 	.word	0x08008985
 80089b4:	08008a09 	.word	0x08008a09
 80089b8:	08008985 	.word	0x08008985
 80089bc:	08008985 	.word	0x08008985
 80089c0:	08008985 	.word	0x08008985
 80089c4:	08008985 	.word	0x08008985
 80089c8:	08008b0d 	.word	0x08008b0d
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	08008ac7 	.word	0x08008ac7
 80089d4:	08008985 	.word	0x08008985
 80089d8:	08008985 	.word	0x08008985
 80089dc:	08008b2f 	.word	0x08008b2f
 80089e0:	08008985 	.word	0x08008985
 80089e4:	08008a35 	.word	0x08008a35
 80089e8:	08008985 	.word	0x08008985
 80089ec:	08008985 	.word	0x08008985
 80089f0:	08008acf 	.word	0x08008acf
 80089f4:	682b      	ldr	r3, [r5, #0]
 80089f6:	1d1a      	adds	r2, r3, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	602a      	str	r2, [r5, #0]
 80089fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a04:	2301      	movs	r3, #1
 8008a06:	e09f      	b.n	8008b48 <_printf_i+0x1ec>
 8008a08:	6820      	ldr	r0, [r4, #0]
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	0607      	lsls	r7, r0, #24
 8008a0e:	f103 0104 	add.w	r1, r3, #4
 8008a12:	6029      	str	r1, [r5, #0]
 8008a14:	d501      	bpl.n	8008a1a <_printf_i+0xbe>
 8008a16:	681e      	ldr	r6, [r3, #0]
 8008a18:	e003      	b.n	8008a22 <_printf_i+0xc6>
 8008a1a:	0646      	lsls	r6, r0, #25
 8008a1c:	d5fb      	bpl.n	8008a16 <_printf_i+0xba>
 8008a1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	da03      	bge.n	8008a2e <_printf_i+0xd2>
 8008a26:	232d      	movs	r3, #45	; 0x2d
 8008a28:	4276      	negs	r6, r6
 8008a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a2e:	485a      	ldr	r0, [pc, #360]	; (8008b98 <_printf_i+0x23c>)
 8008a30:	230a      	movs	r3, #10
 8008a32:	e012      	b.n	8008a5a <_printf_i+0xfe>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	1d19      	adds	r1, r3, #4
 8008a3a:	6029      	str	r1, [r5, #0]
 8008a3c:	0605      	lsls	r5, r0, #24
 8008a3e:	d501      	bpl.n	8008a44 <_printf_i+0xe8>
 8008a40:	681e      	ldr	r6, [r3, #0]
 8008a42:	e002      	b.n	8008a4a <_printf_i+0xee>
 8008a44:	0641      	lsls	r1, r0, #25
 8008a46:	d5fb      	bpl.n	8008a40 <_printf_i+0xe4>
 8008a48:	881e      	ldrh	r6, [r3, #0]
 8008a4a:	4853      	ldr	r0, [pc, #332]	; (8008b98 <_printf_i+0x23c>)
 8008a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008a4e:	bf0c      	ite	eq
 8008a50:	2308      	moveq	r3, #8
 8008a52:	230a      	movne	r3, #10
 8008a54:	2100      	movs	r1, #0
 8008a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a5a:	6865      	ldr	r5, [r4, #4]
 8008a5c:	60a5      	str	r5, [r4, #8]
 8008a5e:	2d00      	cmp	r5, #0
 8008a60:	bfa2      	ittt	ge
 8008a62:	6821      	ldrge	r1, [r4, #0]
 8008a64:	f021 0104 	bicge.w	r1, r1, #4
 8008a68:	6021      	strge	r1, [r4, #0]
 8008a6a:	b90e      	cbnz	r6, 8008a70 <_printf_i+0x114>
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	d04b      	beq.n	8008b08 <_printf_i+0x1ac>
 8008a70:	4615      	mov	r5, r2
 8008a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a76:	fb03 6711 	mls	r7, r3, r1, r6
 8008a7a:	5dc7      	ldrb	r7, [r0, r7]
 8008a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a80:	4637      	mov	r7, r6
 8008a82:	42bb      	cmp	r3, r7
 8008a84:	460e      	mov	r6, r1
 8008a86:	d9f4      	bls.n	8008a72 <_printf_i+0x116>
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d10b      	bne.n	8008aa4 <_printf_i+0x148>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	07de      	lsls	r6, r3, #31
 8008a90:	d508      	bpl.n	8008aa4 <_printf_i+0x148>
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	6861      	ldr	r1, [r4, #4]
 8008a96:	4299      	cmp	r1, r3
 8008a98:	bfde      	ittt	le
 8008a9a:	2330      	movle	r3, #48	; 0x30
 8008a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008aa0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008aa4:	1b52      	subs	r2, r2, r5
 8008aa6:	6122      	str	r2, [r4, #16]
 8008aa8:	f8cd a000 	str.w	sl, [sp]
 8008aac:	464b      	mov	r3, r9
 8008aae:	aa03      	add	r2, sp, #12
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	f7ff fee4 	bl	8008880 <_printf_common>
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d14a      	bne.n	8008b52 <_printf_i+0x1f6>
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ac0:	b004      	add	sp, #16
 8008ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	f043 0320 	orr.w	r3, r3, #32
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	4833      	ldr	r0, [pc, #204]	; (8008b9c <_printf_i+0x240>)
 8008ad0:	2778      	movs	r7, #120	; 0x78
 8008ad2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	6829      	ldr	r1, [r5, #0]
 8008ada:	061f      	lsls	r7, r3, #24
 8008adc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ae0:	d402      	bmi.n	8008ae8 <_printf_i+0x18c>
 8008ae2:	065f      	lsls	r7, r3, #25
 8008ae4:	bf48      	it	mi
 8008ae6:	b2b6      	uxthmi	r6, r6
 8008ae8:	07df      	lsls	r7, r3, #31
 8008aea:	bf48      	it	mi
 8008aec:	f043 0320 	orrmi.w	r3, r3, #32
 8008af0:	6029      	str	r1, [r5, #0]
 8008af2:	bf48      	it	mi
 8008af4:	6023      	strmi	r3, [r4, #0]
 8008af6:	b91e      	cbnz	r6, 8008b00 <_printf_i+0x1a4>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	f023 0320 	bic.w	r3, r3, #32
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	2310      	movs	r3, #16
 8008b02:	e7a7      	b.n	8008a54 <_printf_i+0xf8>
 8008b04:	4824      	ldr	r0, [pc, #144]	; (8008b98 <_printf_i+0x23c>)
 8008b06:	e7e4      	b.n	8008ad2 <_printf_i+0x176>
 8008b08:	4615      	mov	r5, r2
 8008b0a:	e7bd      	b.n	8008a88 <_printf_i+0x12c>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6826      	ldr	r6, [r4, #0]
 8008b10:	6961      	ldr	r1, [r4, #20]
 8008b12:	1d18      	adds	r0, r3, #4
 8008b14:	6028      	str	r0, [r5, #0]
 8008b16:	0635      	lsls	r5, r6, #24
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	d501      	bpl.n	8008b20 <_printf_i+0x1c4>
 8008b1c:	6019      	str	r1, [r3, #0]
 8008b1e:	e002      	b.n	8008b26 <_printf_i+0x1ca>
 8008b20:	0670      	lsls	r0, r6, #25
 8008b22:	d5fb      	bpl.n	8008b1c <_printf_i+0x1c0>
 8008b24:	8019      	strh	r1, [r3, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	4615      	mov	r5, r2
 8008b2c:	e7bc      	b.n	8008aa8 <_printf_i+0x14c>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	602a      	str	r2, [r5, #0]
 8008b34:	681d      	ldr	r5, [r3, #0]
 8008b36:	6862      	ldr	r2, [r4, #4]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7f7 fb50 	bl	80001e0 <memchr>
 8008b40:	b108      	cbz	r0, 8008b46 <_printf_i+0x1ea>
 8008b42:	1b40      	subs	r0, r0, r5
 8008b44:	6060      	str	r0, [r4, #4]
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b50:	e7aa      	b.n	8008aa8 <_printf_i+0x14c>
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	462a      	mov	r2, r5
 8008b56:	4649      	mov	r1, r9
 8008b58:	4640      	mov	r0, r8
 8008b5a:	47d0      	blx	sl
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d0ad      	beq.n	8008abc <_printf_i+0x160>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	079b      	lsls	r3, r3, #30
 8008b64:	d413      	bmi.n	8008b8e <_printf_i+0x232>
 8008b66:	68e0      	ldr	r0, [r4, #12]
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	bfb8      	it	lt
 8008b6e:	4618      	movlt	r0, r3
 8008b70:	e7a6      	b.n	8008ac0 <_printf_i+0x164>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4632      	mov	r2, r6
 8008b76:	4649      	mov	r1, r9
 8008b78:	4640      	mov	r0, r8
 8008b7a:	47d0      	blx	sl
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d09d      	beq.n	8008abc <_printf_i+0x160>
 8008b80:	3501      	adds	r5, #1
 8008b82:	68e3      	ldr	r3, [r4, #12]
 8008b84:	9903      	ldr	r1, [sp, #12]
 8008b86:	1a5b      	subs	r3, r3, r1
 8008b88:	42ab      	cmp	r3, r5
 8008b8a:	dcf2      	bgt.n	8008b72 <_printf_i+0x216>
 8008b8c:	e7eb      	b.n	8008b66 <_printf_i+0x20a>
 8008b8e:	2500      	movs	r5, #0
 8008b90:	f104 0619 	add.w	r6, r4, #25
 8008b94:	e7f5      	b.n	8008b82 <_printf_i+0x226>
 8008b96:	bf00      	nop
 8008b98:	08009672 	.word	0x08009672
 8008b9c:	08009683 	.word	0x08009683

08008ba0 <__sflush_r>:
 8008ba0:	898a      	ldrh	r2, [r1, #12]
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	0710      	lsls	r0, r2, #28
 8008baa:	460c      	mov	r4, r1
 8008bac:	d458      	bmi.n	8008c60 <__sflush_r+0xc0>
 8008bae:	684b      	ldr	r3, [r1, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dc05      	bgt.n	8008bc0 <__sflush_r+0x20>
 8008bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc02      	bgt.n	8008bc0 <__sflush_r+0x20>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0f9      	beq.n	8008bba <__sflush_r+0x1a>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bcc:	682f      	ldr	r7, [r5, #0]
 8008bce:	6a21      	ldr	r1, [r4, #32]
 8008bd0:	602b      	str	r3, [r5, #0]
 8008bd2:	d032      	beq.n	8008c3a <__sflush_r+0x9a>
 8008bd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	075a      	lsls	r2, r3, #29
 8008bda:	d505      	bpl.n	8008be8 <__sflush_r+0x48>
 8008bdc:	6863      	ldr	r3, [r4, #4]
 8008bde:	1ac0      	subs	r0, r0, r3
 8008be0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be2:	b10b      	cbz	r3, 8008be8 <__sflush_r+0x48>
 8008be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008be6:	1ac0      	subs	r0, r0, r3
 8008be8:	2300      	movs	r3, #0
 8008bea:	4602      	mov	r2, r0
 8008bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bee:	6a21      	ldr	r1, [r4, #32]
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b0      	blx	r6
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	d106      	bne.n	8008c08 <__sflush_r+0x68>
 8008bfa:	6829      	ldr	r1, [r5, #0]
 8008bfc:	291d      	cmp	r1, #29
 8008bfe:	d82b      	bhi.n	8008c58 <__sflush_r+0xb8>
 8008c00:	4a29      	ldr	r2, [pc, #164]	; (8008ca8 <__sflush_r+0x108>)
 8008c02:	410a      	asrs	r2, r1
 8008c04:	07d6      	lsls	r6, r2, #31
 8008c06:	d427      	bmi.n	8008c58 <__sflush_r+0xb8>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	6062      	str	r2, [r4, #4]
 8008c0c:	04d9      	lsls	r1, r3, #19
 8008c0e:	6922      	ldr	r2, [r4, #16]
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	d504      	bpl.n	8008c1e <__sflush_r+0x7e>
 8008c14:	1c42      	adds	r2, r0, #1
 8008c16:	d101      	bne.n	8008c1c <__sflush_r+0x7c>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b903      	cbnz	r3, 8008c1e <__sflush_r+0x7e>
 8008c1c:	6560      	str	r0, [r4, #84]	; 0x54
 8008c1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c20:	602f      	str	r7, [r5, #0]
 8008c22:	2900      	cmp	r1, #0
 8008c24:	d0c9      	beq.n	8008bba <__sflush_r+0x1a>
 8008c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	d002      	beq.n	8008c34 <__sflush_r+0x94>
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f7ff fbce 	bl	80083d0 <_free_r>
 8008c34:	2000      	movs	r0, #0
 8008c36:	6360      	str	r0, [r4, #52]	; 0x34
 8008c38:	e7c0      	b.n	8008bbc <__sflush_r+0x1c>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b0      	blx	r6
 8008c40:	1c41      	adds	r1, r0, #1
 8008c42:	d1c8      	bne.n	8008bd6 <__sflush_r+0x36>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c5      	beq.n	8008bd6 <__sflush_r+0x36>
 8008c4a:	2b1d      	cmp	r3, #29
 8008c4c:	d001      	beq.n	8008c52 <__sflush_r+0xb2>
 8008c4e:	2b16      	cmp	r3, #22
 8008c50:	d101      	bne.n	8008c56 <__sflush_r+0xb6>
 8008c52:	602f      	str	r7, [r5, #0]
 8008c54:	e7b1      	b.n	8008bba <__sflush_r+0x1a>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	e7ad      	b.n	8008bbc <__sflush_r+0x1c>
 8008c60:	690f      	ldr	r7, [r1, #16]
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	d0a9      	beq.n	8008bba <__sflush_r+0x1a>
 8008c66:	0793      	lsls	r3, r2, #30
 8008c68:	680e      	ldr	r6, [r1, #0]
 8008c6a:	bf08      	it	eq
 8008c6c:	694b      	ldreq	r3, [r1, #20]
 8008c6e:	600f      	str	r7, [r1, #0]
 8008c70:	bf18      	it	ne
 8008c72:	2300      	movne	r3, #0
 8008c74:	eba6 0807 	sub.w	r8, r6, r7
 8008c78:	608b      	str	r3, [r1, #8]
 8008c7a:	f1b8 0f00 	cmp.w	r8, #0
 8008c7e:	dd9c      	ble.n	8008bba <__sflush_r+0x1a>
 8008c80:	6a21      	ldr	r1, [r4, #32]
 8008c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c84:	4643      	mov	r3, r8
 8008c86:	463a      	mov	r2, r7
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b0      	blx	r6
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	dc06      	bgt.n	8008c9e <__sflush_r+0xfe>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c9c:	e78e      	b.n	8008bbc <__sflush_r+0x1c>
 8008c9e:	4407      	add	r7, r0
 8008ca0:	eba8 0800 	sub.w	r8, r8, r0
 8008ca4:	e7e9      	b.n	8008c7a <__sflush_r+0xda>
 8008ca6:	bf00      	nop
 8008ca8:	dfbffffe 	.word	0xdfbffffe

08008cac <_fflush_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	b913      	cbnz	r3, 8008cbc <_fflush_r+0x10>
 8008cb6:	2500      	movs	r5, #0
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	b118      	cbz	r0, 8008cc6 <_fflush_r+0x1a>
 8008cbe:	6a03      	ldr	r3, [r0, #32]
 8008cc0:	b90b      	cbnz	r3, 8008cc6 <_fflush_r+0x1a>
 8008cc2:	f7ff f9af 	bl	8008024 <__sinit>
 8008cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d0f3      	beq.n	8008cb6 <_fflush_r+0xa>
 8008cce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cd0:	07d0      	lsls	r0, r2, #31
 8008cd2:	d404      	bmi.n	8008cde <_fflush_r+0x32>
 8008cd4:	0599      	lsls	r1, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_fflush_r+0x32>
 8008cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cda:	f7ff fb4a 	bl	8008372 <__retarget_lock_acquire_recursive>
 8008cde:	4628      	mov	r0, r5
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	f7ff ff5d 	bl	8008ba0 <__sflush_r>
 8008ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce8:	07da      	lsls	r2, r3, #31
 8008cea:	4605      	mov	r5, r0
 8008cec:	d4e4      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	059b      	lsls	r3, r3, #22
 8008cf2:	d4e1      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf6:	f7ff fb3d 	bl	8008374 <__retarget_lock_release_recursive>
 8008cfa:	e7dd      	b.n	8008cb8 <_fflush_r+0xc>

08008cfc <fiprintf>:
 8008cfc:	b40e      	push	{r1, r2, r3}
 8008cfe:	b503      	push	{r0, r1, lr}
 8008d00:	4601      	mov	r1, r0
 8008d02:	ab03      	add	r3, sp, #12
 8008d04:	4805      	ldr	r0, [pc, #20]	; (8008d1c <fiprintf+0x20>)
 8008d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0a:	6800      	ldr	r0, [r0, #0]
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f000 f891 	bl	8008e34 <_vfiprintf_r>
 8008d12:	b002      	add	sp, #8
 8008d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d18:	b003      	add	sp, #12
 8008d1a:	4770      	bx	lr
 8008d1c:	2000008c 	.word	0x2000008c

08008d20 <memmove>:
 8008d20:	4288      	cmp	r0, r1
 8008d22:	b510      	push	{r4, lr}
 8008d24:	eb01 0402 	add.w	r4, r1, r2
 8008d28:	d902      	bls.n	8008d30 <memmove+0x10>
 8008d2a:	4284      	cmp	r4, r0
 8008d2c:	4623      	mov	r3, r4
 8008d2e:	d807      	bhi.n	8008d40 <memmove+0x20>
 8008d30:	1e43      	subs	r3, r0, #1
 8008d32:	42a1      	cmp	r1, r4
 8008d34:	d008      	beq.n	8008d48 <memmove+0x28>
 8008d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d3e:	e7f8      	b.n	8008d32 <memmove+0x12>
 8008d40:	4402      	add	r2, r0
 8008d42:	4601      	mov	r1, r0
 8008d44:	428a      	cmp	r2, r1
 8008d46:	d100      	bne.n	8008d4a <memmove+0x2a>
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d52:	e7f7      	b.n	8008d44 <memmove+0x24>

08008d54 <_sbrk_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d06      	ldr	r5, [pc, #24]	; (8008d70 <_sbrk_r+0x1c>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	f7f9 fbd8 	bl	8002514 <_sbrk>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_sbrk_r+0x1a>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_sbrk_r+0x1a>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200011fc 	.word	0x200011fc

08008d74 <abort>:
 8008d74:	b508      	push	{r3, lr}
 8008d76:	2006      	movs	r0, #6
 8008d78:	f000 fa34 	bl	80091e4 <raise>
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	f7f9 fb52 	bl	8002426 <_exit>

08008d82 <_realloc_r>:
 8008d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d86:	4680      	mov	r8, r0
 8008d88:	4614      	mov	r4, r2
 8008d8a:	460e      	mov	r6, r1
 8008d8c:	b921      	cbnz	r1, 8008d98 <_realloc_r+0x16>
 8008d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d92:	4611      	mov	r1, r2
 8008d94:	f7ff bb90 	b.w	80084b8 <_malloc_r>
 8008d98:	b92a      	cbnz	r2, 8008da6 <_realloc_r+0x24>
 8008d9a:	f7ff fb19 	bl	80083d0 <_free_r>
 8008d9e:	4625      	mov	r5, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da6:	f000 fa39 	bl	800921c <_malloc_usable_size_r>
 8008daa:	4284      	cmp	r4, r0
 8008dac:	4607      	mov	r7, r0
 8008dae:	d802      	bhi.n	8008db6 <_realloc_r+0x34>
 8008db0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008db4:	d812      	bhi.n	8008ddc <_realloc_r+0x5a>
 8008db6:	4621      	mov	r1, r4
 8008db8:	4640      	mov	r0, r8
 8008dba:	f7ff fb7d 	bl	80084b8 <_malloc_r>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d0ed      	beq.n	8008da0 <_realloc_r+0x1e>
 8008dc4:	42bc      	cmp	r4, r7
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	4631      	mov	r1, r6
 8008dca:	bf28      	it	cs
 8008dcc:	463a      	movcs	r2, r7
 8008dce:	f7ff fad2 	bl	8008376 <memcpy>
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	f7ff fafb 	bl	80083d0 <_free_r>
 8008dda:	e7e1      	b.n	8008da0 <_realloc_r+0x1e>
 8008ddc:	4635      	mov	r5, r6
 8008dde:	e7df      	b.n	8008da0 <_realloc_r+0x1e>

08008de0 <__sfputc_r>:
 8008de0:	6893      	ldr	r3, [r2, #8]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	b410      	push	{r4}
 8008de8:	6093      	str	r3, [r2, #8]
 8008dea:	da08      	bge.n	8008dfe <__sfputc_r+0x1e>
 8008dec:	6994      	ldr	r4, [r2, #24]
 8008dee:	42a3      	cmp	r3, r4
 8008df0:	db01      	blt.n	8008df6 <__sfputc_r+0x16>
 8008df2:	290a      	cmp	r1, #10
 8008df4:	d103      	bne.n	8008dfe <__sfputc_r+0x1e>
 8008df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dfa:	f000 b935 	b.w	8009068 <__swbuf_r>
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	1c58      	adds	r0, r3, #1
 8008e02:	6010      	str	r0, [r2, #0]
 8008e04:	7019      	strb	r1, [r3, #0]
 8008e06:	4608      	mov	r0, r1
 8008e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <__sfputs_r>:
 8008e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e10:	4606      	mov	r6, r0
 8008e12:	460f      	mov	r7, r1
 8008e14:	4614      	mov	r4, r2
 8008e16:	18d5      	adds	r5, r2, r3
 8008e18:	42ac      	cmp	r4, r5
 8008e1a:	d101      	bne.n	8008e20 <__sfputs_r+0x12>
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e007      	b.n	8008e30 <__sfputs_r+0x22>
 8008e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e24:	463a      	mov	r2, r7
 8008e26:	4630      	mov	r0, r6
 8008e28:	f7ff ffda 	bl	8008de0 <__sfputc_r>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d1f3      	bne.n	8008e18 <__sfputs_r+0xa>
 8008e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e34 <_vfiprintf_r>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	460d      	mov	r5, r1
 8008e3a:	b09d      	sub	sp, #116	; 0x74
 8008e3c:	4614      	mov	r4, r2
 8008e3e:	4698      	mov	r8, r3
 8008e40:	4606      	mov	r6, r0
 8008e42:	b118      	cbz	r0, 8008e4c <_vfiprintf_r+0x18>
 8008e44:	6a03      	ldr	r3, [r0, #32]
 8008e46:	b90b      	cbnz	r3, 8008e4c <_vfiprintf_r+0x18>
 8008e48:	f7ff f8ec 	bl	8008024 <__sinit>
 8008e4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e4e:	07d9      	lsls	r1, r3, #31
 8008e50:	d405      	bmi.n	8008e5e <_vfiprintf_r+0x2a>
 8008e52:	89ab      	ldrh	r3, [r5, #12]
 8008e54:	059a      	lsls	r2, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_vfiprintf_r+0x2a>
 8008e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e5a:	f7ff fa8a 	bl	8008372 <__retarget_lock_acquire_recursive>
 8008e5e:	89ab      	ldrh	r3, [r5, #12]
 8008e60:	071b      	lsls	r3, r3, #28
 8008e62:	d501      	bpl.n	8008e68 <_vfiprintf_r+0x34>
 8008e64:	692b      	ldr	r3, [r5, #16]
 8008e66:	b99b      	cbnz	r3, 8008e90 <_vfiprintf_r+0x5c>
 8008e68:	4629      	mov	r1, r5
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f000 f93a 	bl	80090e4 <__swsetup_r>
 8008e70:	b170      	cbz	r0, 8008e90 <_vfiprintf_r+0x5c>
 8008e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e74:	07dc      	lsls	r4, r3, #31
 8008e76:	d504      	bpl.n	8008e82 <_vfiprintf_r+0x4e>
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e7c:	b01d      	add	sp, #116	; 0x74
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	89ab      	ldrh	r3, [r5, #12]
 8008e84:	0598      	lsls	r0, r3, #22
 8008e86:	d4f7      	bmi.n	8008e78 <_vfiprintf_r+0x44>
 8008e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e8a:	f7ff fa73 	bl	8008374 <__retarget_lock_release_recursive>
 8008e8e:	e7f3      	b.n	8008e78 <_vfiprintf_r+0x44>
 8008e90:	2300      	movs	r3, #0
 8008e92:	9309      	str	r3, [sp, #36]	; 0x24
 8008e94:	2320      	movs	r3, #32
 8008e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e9e:	2330      	movs	r3, #48	; 0x30
 8008ea0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009054 <_vfiprintf_r+0x220>
 8008ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ea8:	f04f 0901 	mov.w	r9, #1
 8008eac:	4623      	mov	r3, r4
 8008eae:	469a      	mov	sl, r3
 8008eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb4:	b10a      	cbz	r2, 8008eba <_vfiprintf_r+0x86>
 8008eb6:	2a25      	cmp	r2, #37	; 0x25
 8008eb8:	d1f9      	bne.n	8008eae <_vfiprintf_r+0x7a>
 8008eba:	ebba 0b04 	subs.w	fp, sl, r4
 8008ebe:	d00b      	beq.n	8008ed8 <_vfiprintf_r+0xa4>
 8008ec0:	465b      	mov	r3, fp
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f7ff ffa1 	bl	8008e0e <__sfputs_r>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	f000 80a9 	beq.w	8009024 <_vfiprintf_r+0x1f0>
 8008ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed4:	445a      	add	r2, fp
 8008ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 80a1 	beq.w	8009024 <_vfiprintf_r+0x1f0>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eec:	f10a 0a01 	add.w	sl, sl, #1
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	9307      	str	r3, [sp, #28]
 8008ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8008efa:	4654      	mov	r4, sl
 8008efc:	2205      	movs	r2, #5
 8008efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f02:	4854      	ldr	r0, [pc, #336]	; (8009054 <_vfiprintf_r+0x220>)
 8008f04:	f7f7 f96c 	bl	80001e0 <memchr>
 8008f08:	9a04      	ldr	r2, [sp, #16]
 8008f0a:	b9d8      	cbnz	r0, 8008f44 <_vfiprintf_r+0x110>
 8008f0c:	06d1      	lsls	r1, r2, #27
 8008f0e:	bf44      	itt	mi
 8008f10:	2320      	movmi	r3, #32
 8008f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f16:	0713      	lsls	r3, r2, #28
 8008f18:	bf44      	itt	mi
 8008f1a:	232b      	movmi	r3, #43	; 0x2b
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f20:	f89a 3000 	ldrb.w	r3, [sl]
 8008f24:	2b2a      	cmp	r3, #42	; 0x2a
 8008f26:	d015      	beq.n	8008f54 <_vfiprintf_r+0x120>
 8008f28:	9a07      	ldr	r2, [sp, #28]
 8008f2a:	4654      	mov	r4, sl
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f04f 0c0a 	mov.w	ip, #10
 8008f32:	4621      	mov	r1, r4
 8008f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f38:	3b30      	subs	r3, #48	; 0x30
 8008f3a:	2b09      	cmp	r3, #9
 8008f3c:	d94d      	bls.n	8008fda <_vfiprintf_r+0x1a6>
 8008f3e:	b1b0      	cbz	r0, 8008f6e <_vfiprintf_r+0x13a>
 8008f40:	9207      	str	r2, [sp, #28]
 8008f42:	e014      	b.n	8008f6e <_vfiprintf_r+0x13a>
 8008f44:	eba0 0308 	sub.w	r3, r0, r8
 8008f48:	fa09 f303 	lsl.w	r3, r9, r3
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	9304      	str	r3, [sp, #16]
 8008f50:	46a2      	mov	sl, r4
 8008f52:	e7d2      	b.n	8008efa <_vfiprintf_r+0xc6>
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	1d19      	adds	r1, r3, #4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	9103      	str	r1, [sp, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	bfbb      	ittet	lt
 8008f60:	425b      	neglt	r3, r3
 8008f62:	f042 0202 	orrlt.w	r2, r2, #2
 8008f66:	9307      	strge	r3, [sp, #28]
 8008f68:	9307      	strlt	r3, [sp, #28]
 8008f6a:	bfb8      	it	lt
 8008f6c:	9204      	strlt	r2, [sp, #16]
 8008f6e:	7823      	ldrb	r3, [r4, #0]
 8008f70:	2b2e      	cmp	r3, #46	; 0x2e
 8008f72:	d10c      	bne.n	8008f8e <_vfiprintf_r+0x15a>
 8008f74:	7863      	ldrb	r3, [r4, #1]
 8008f76:	2b2a      	cmp	r3, #42	; 0x2a
 8008f78:	d134      	bne.n	8008fe4 <_vfiprintf_r+0x1b0>
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	1d1a      	adds	r2, r3, #4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	9203      	str	r2, [sp, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfb8      	it	lt
 8008f86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f8a:	3402      	adds	r4, #2
 8008f8c:	9305      	str	r3, [sp, #20]
 8008f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009064 <_vfiprintf_r+0x230>
 8008f92:	7821      	ldrb	r1, [r4, #0]
 8008f94:	2203      	movs	r2, #3
 8008f96:	4650      	mov	r0, sl
 8008f98:	f7f7 f922 	bl	80001e0 <memchr>
 8008f9c:	b138      	cbz	r0, 8008fae <_vfiprintf_r+0x17a>
 8008f9e:	9b04      	ldr	r3, [sp, #16]
 8008fa0:	eba0 000a 	sub.w	r0, r0, sl
 8008fa4:	2240      	movs	r2, #64	; 0x40
 8008fa6:	4082      	lsls	r2, r0
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	3401      	adds	r4, #1
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb2:	4829      	ldr	r0, [pc, #164]	; (8009058 <_vfiprintf_r+0x224>)
 8008fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fb8:	2206      	movs	r2, #6
 8008fba:	f7f7 f911 	bl	80001e0 <memchr>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d03f      	beq.n	8009042 <_vfiprintf_r+0x20e>
 8008fc2:	4b26      	ldr	r3, [pc, #152]	; (800905c <_vfiprintf_r+0x228>)
 8008fc4:	bb1b      	cbnz	r3, 800900e <_vfiprintf_r+0x1da>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	3307      	adds	r3, #7
 8008fca:	f023 0307 	bic.w	r3, r3, #7
 8008fce:	3308      	adds	r3, #8
 8008fd0:	9303      	str	r3, [sp, #12]
 8008fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd4:	443b      	add	r3, r7
 8008fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd8:	e768      	b.n	8008eac <_vfiprintf_r+0x78>
 8008fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fde:	460c      	mov	r4, r1
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	e7a6      	b.n	8008f32 <_vfiprintf_r+0xfe>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	3401      	adds	r4, #1
 8008fe8:	9305      	str	r3, [sp, #20]
 8008fea:	4619      	mov	r1, r3
 8008fec:	f04f 0c0a 	mov.w	ip, #10
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ff6:	3a30      	subs	r2, #48	; 0x30
 8008ff8:	2a09      	cmp	r2, #9
 8008ffa:	d903      	bls.n	8009004 <_vfiprintf_r+0x1d0>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0c6      	beq.n	8008f8e <_vfiprintf_r+0x15a>
 8009000:	9105      	str	r1, [sp, #20]
 8009002:	e7c4      	b.n	8008f8e <_vfiprintf_r+0x15a>
 8009004:	fb0c 2101 	mla	r1, ip, r1, r2
 8009008:	4604      	mov	r4, r0
 800900a:	2301      	movs	r3, #1
 800900c:	e7f0      	b.n	8008ff0 <_vfiprintf_r+0x1bc>
 800900e:	ab03      	add	r3, sp, #12
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	462a      	mov	r2, r5
 8009014:	4b12      	ldr	r3, [pc, #72]	; (8009060 <_vfiprintf_r+0x22c>)
 8009016:	a904      	add	r1, sp, #16
 8009018:	4630      	mov	r0, r6
 800901a:	f3af 8000 	nop.w
 800901e:	4607      	mov	r7, r0
 8009020:	1c78      	adds	r0, r7, #1
 8009022:	d1d6      	bne.n	8008fd2 <_vfiprintf_r+0x19e>
 8009024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009026:	07d9      	lsls	r1, r3, #31
 8009028:	d405      	bmi.n	8009036 <_vfiprintf_r+0x202>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	059a      	lsls	r2, r3, #22
 800902e:	d402      	bmi.n	8009036 <_vfiprintf_r+0x202>
 8009030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009032:	f7ff f99f 	bl	8008374 <__retarget_lock_release_recursive>
 8009036:	89ab      	ldrh	r3, [r5, #12]
 8009038:	065b      	lsls	r3, r3, #25
 800903a:	f53f af1d 	bmi.w	8008e78 <_vfiprintf_r+0x44>
 800903e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009040:	e71c      	b.n	8008e7c <_vfiprintf_r+0x48>
 8009042:	ab03      	add	r3, sp, #12
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	462a      	mov	r2, r5
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <_vfiprintf_r+0x22c>)
 800904a:	a904      	add	r1, sp, #16
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff fc85 	bl	800895c <_printf_i>
 8009052:	e7e4      	b.n	800901e <_vfiprintf_r+0x1ea>
 8009054:	08009661 	.word	0x08009661
 8009058:	0800966b 	.word	0x0800966b
 800905c:	00000000 	.word	0x00000000
 8009060:	08008e0f 	.word	0x08008e0f
 8009064:	08009667 	.word	0x08009667

08009068 <__swbuf_r>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	460e      	mov	r6, r1
 800906c:	4614      	mov	r4, r2
 800906e:	4605      	mov	r5, r0
 8009070:	b118      	cbz	r0, 800907a <__swbuf_r+0x12>
 8009072:	6a03      	ldr	r3, [r0, #32]
 8009074:	b90b      	cbnz	r3, 800907a <__swbuf_r+0x12>
 8009076:	f7fe ffd5 	bl	8008024 <__sinit>
 800907a:	69a3      	ldr	r3, [r4, #24]
 800907c:	60a3      	str	r3, [r4, #8]
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	071a      	lsls	r2, r3, #28
 8009082:	d525      	bpl.n	80090d0 <__swbuf_r+0x68>
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	b31b      	cbz	r3, 80090d0 <__swbuf_r+0x68>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	6922      	ldr	r2, [r4, #16]
 800908c:	1a98      	subs	r0, r3, r2
 800908e:	6963      	ldr	r3, [r4, #20]
 8009090:	b2f6      	uxtb	r6, r6
 8009092:	4283      	cmp	r3, r0
 8009094:	4637      	mov	r7, r6
 8009096:	dc04      	bgt.n	80090a2 <__swbuf_r+0x3a>
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff fe06 	bl	8008cac <_fflush_r>
 80090a0:	b9e0      	cbnz	r0, 80090dc <__swbuf_r+0x74>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	701e      	strb	r6, [r3, #0]
 80090b0:	6962      	ldr	r2, [r4, #20]
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d004      	beq.n	80090c2 <__swbuf_r+0x5a>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d506      	bpl.n	80090cc <__swbuf_r+0x64>
 80090be:	2e0a      	cmp	r6, #10
 80090c0:	d104      	bne.n	80090cc <__swbuf_r+0x64>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7ff fdf1 	bl	8008cac <_fflush_r>
 80090ca:	b938      	cbnz	r0, 80090dc <__swbuf_r+0x74>
 80090cc:	4638      	mov	r0, r7
 80090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f806 	bl	80090e4 <__swsetup_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0d5      	beq.n	8009088 <__swbuf_r+0x20>
 80090dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090e0:	e7f4      	b.n	80090cc <__swbuf_r+0x64>
	...

080090e4 <__swsetup_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4b2a      	ldr	r3, [pc, #168]	; (8009190 <__swsetup_r+0xac>)
 80090e8:	4605      	mov	r5, r0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	460c      	mov	r4, r1
 80090ee:	b118      	cbz	r0, 80090f8 <__swsetup_r+0x14>
 80090f0:	6a03      	ldr	r3, [r0, #32]
 80090f2:	b90b      	cbnz	r3, 80090f8 <__swsetup_r+0x14>
 80090f4:	f7fe ff96 	bl	8008024 <__sinit>
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090fe:	0718      	lsls	r0, r3, #28
 8009100:	d422      	bmi.n	8009148 <__swsetup_r+0x64>
 8009102:	06d9      	lsls	r1, r3, #27
 8009104:	d407      	bmi.n	8009116 <__swsetup_r+0x32>
 8009106:	2309      	movs	r3, #9
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009114:	e034      	b.n	8009180 <__swsetup_r+0x9c>
 8009116:	0758      	lsls	r0, r3, #29
 8009118:	d512      	bpl.n	8009140 <__swsetup_r+0x5c>
 800911a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800911c:	b141      	cbz	r1, 8009130 <__swsetup_r+0x4c>
 800911e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009122:	4299      	cmp	r1, r3
 8009124:	d002      	beq.n	800912c <__swsetup_r+0x48>
 8009126:	4628      	mov	r0, r5
 8009128:	f7ff f952 	bl	80083d0 <_free_r>
 800912c:	2300      	movs	r3, #0
 800912e:	6363      	str	r3, [r4, #52]	; 0x34
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	2300      	movs	r3, #0
 800913a:	6063      	str	r3, [r4, #4]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	6023      	str	r3, [r4, #0]
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f043 0308 	orr.w	r3, r3, #8
 8009146:	81a3      	strh	r3, [r4, #12]
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	b94b      	cbnz	r3, 8009160 <__swsetup_r+0x7c>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009156:	d003      	beq.n	8009160 <__swsetup_r+0x7c>
 8009158:	4621      	mov	r1, r4
 800915a:	4628      	mov	r0, r5
 800915c:	f000 f88c 	bl	8009278 <__smakebuf_r>
 8009160:	89a0      	ldrh	r0, [r4, #12]
 8009162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009166:	f010 0301 	ands.w	r3, r0, #1
 800916a:	d00a      	beq.n	8009182 <__swsetup_r+0x9e>
 800916c:	2300      	movs	r3, #0
 800916e:	60a3      	str	r3, [r4, #8]
 8009170:	6963      	ldr	r3, [r4, #20]
 8009172:	425b      	negs	r3, r3
 8009174:	61a3      	str	r3, [r4, #24]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	b943      	cbnz	r3, 800918c <__swsetup_r+0xa8>
 800917a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800917e:	d1c4      	bne.n	800910a <__swsetup_r+0x26>
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	0781      	lsls	r1, r0, #30
 8009184:	bf58      	it	pl
 8009186:	6963      	ldrpl	r3, [r4, #20]
 8009188:	60a3      	str	r3, [r4, #8]
 800918a:	e7f4      	b.n	8009176 <__swsetup_r+0x92>
 800918c:	2000      	movs	r0, #0
 800918e:	e7f7      	b.n	8009180 <__swsetup_r+0x9c>
 8009190:	2000008c 	.word	0x2000008c

08009194 <_raise_r>:
 8009194:	291f      	cmp	r1, #31
 8009196:	b538      	push	{r3, r4, r5, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	460d      	mov	r5, r1
 800919c:	d904      	bls.n	80091a8 <_raise_r+0x14>
 800919e:	2316      	movs	r3, #22
 80091a0:	6003      	str	r3, [r0, #0]
 80091a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80091aa:	b112      	cbz	r2, 80091b2 <_raise_r+0x1e>
 80091ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091b0:	b94b      	cbnz	r3, 80091c6 <_raise_r+0x32>
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 f830 	bl	8009218 <_getpid_r>
 80091b8:	462a      	mov	r2, r5
 80091ba:	4601      	mov	r1, r0
 80091bc:	4620      	mov	r0, r4
 80091be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c2:	f000 b817 	b.w	80091f4 <_kill_r>
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d00a      	beq.n	80091e0 <_raise_r+0x4c>
 80091ca:	1c59      	adds	r1, r3, #1
 80091cc:	d103      	bne.n	80091d6 <_raise_r+0x42>
 80091ce:	2316      	movs	r3, #22
 80091d0:	6003      	str	r3, [r0, #0]
 80091d2:	2001      	movs	r0, #1
 80091d4:	e7e7      	b.n	80091a6 <_raise_r+0x12>
 80091d6:	2400      	movs	r4, #0
 80091d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091dc:	4628      	mov	r0, r5
 80091de:	4798      	blx	r3
 80091e0:	2000      	movs	r0, #0
 80091e2:	e7e0      	b.n	80091a6 <_raise_r+0x12>

080091e4 <raise>:
 80091e4:	4b02      	ldr	r3, [pc, #8]	; (80091f0 <raise+0xc>)
 80091e6:	4601      	mov	r1, r0
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f7ff bfd3 	b.w	8009194 <_raise_r>
 80091ee:	bf00      	nop
 80091f0:	2000008c 	.word	0x2000008c

080091f4 <_kill_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d07      	ldr	r5, [pc, #28]	; (8009214 <_kill_r+0x20>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	f7f9 f900 	bl	8002406 <_kill>
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	d102      	bne.n	8009210 <_kill_r+0x1c>
 800920a:	682b      	ldr	r3, [r5, #0]
 800920c:	b103      	cbz	r3, 8009210 <_kill_r+0x1c>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	bd38      	pop	{r3, r4, r5, pc}
 8009212:	bf00      	nop
 8009214:	200011fc 	.word	0x200011fc

08009218 <_getpid_r>:
 8009218:	f7f9 b8ed 	b.w	80023f6 <_getpid>

0800921c <_malloc_usable_size_r>:
 800921c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009220:	1f18      	subs	r0, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	bfbc      	itt	lt
 8009226:	580b      	ldrlt	r3, [r1, r0]
 8009228:	18c0      	addlt	r0, r0, r3
 800922a:	4770      	bx	lr

0800922c <__swhatbuf_r>:
 800922c:	b570      	push	{r4, r5, r6, lr}
 800922e:	460c      	mov	r4, r1
 8009230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009234:	2900      	cmp	r1, #0
 8009236:	b096      	sub	sp, #88	; 0x58
 8009238:	4615      	mov	r5, r2
 800923a:	461e      	mov	r6, r3
 800923c:	da0d      	bge.n	800925a <__swhatbuf_r+0x2e>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009244:	f04f 0100 	mov.w	r1, #0
 8009248:	bf0c      	ite	eq
 800924a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800924e:	2340      	movne	r3, #64	; 0x40
 8009250:	2000      	movs	r0, #0
 8009252:	6031      	str	r1, [r6, #0]
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	b016      	add	sp, #88	; 0x58
 8009258:	bd70      	pop	{r4, r5, r6, pc}
 800925a:	466a      	mov	r2, sp
 800925c:	f000 f848 	bl	80092f0 <_fstat_r>
 8009260:	2800      	cmp	r0, #0
 8009262:	dbec      	blt.n	800923e <__swhatbuf_r+0x12>
 8009264:	9901      	ldr	r1, [sp, #4]
 8009266:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800926a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800926e:	4259      	negs	r1, r3
 8009270:	4159      	adcs	r1, r3
 8009272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009276:	e7eb      	b.n	8009250 <__swhatbuf_r+0x24>

08009278 <__smakebuf_r>:
 8009278:	898b      	ldrh	r3, [r1, #12]
 800927a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800927c:	079d      	lsls	r5, r3, #30
 800927e:	4606      	mov	r6, r0
 8009280:	460c      	mov	r4, r1
 8009282:	d507      	bpl.n	8009294 <__smakebuf_r+0x1c>
 8009284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	6123      	str	r3, [r4, #16]
 800928c:	2301      	movs	r3, #1
 800928e:	6163      	str	r3, [r4, #20]
 8009290:	b002      	add	sp, #8
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	ab01      	add	r3, sp, #4
 8009296:	466a      	mov	r2, sp
 8009298:	f7ff ffc8 	bl	800922c <__swhatbuf_r>
 800929c:	9900      	ldr	r1, [sp, #0]
 800929e:	4605      	mov	r5, r0
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff f909 	bl	80084b8 <_malloc_r>
 80092a6:	b948      	cbnz	r0, 80092bc <__smakebuf_r+0x44>
 80092a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ac:	059a      	lsls	r2, r3, #22
 80092ae:	d4ef      	bmi.n	8009290 <__smakebuf_r+0x18>
 80092b0:	f023 0303 	bic.w	r3, r3, #3
 80092b4:	f043 0302 	orr.w	r3, r3, #2
 80092b8:	81a3      	strh	r3, [r4, #12]
 80092ba:	e7e3      	b.n	8009284 <__smakebuf_r+0xc>
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	6020      	str	r0, [r4, #0]
 80092c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	6163      	str	r3, [r4, #20]
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	6120      	str	r0, [r4, #16]
 80092ce:	b15b      	cbz	r3, 80092e8 <__smakebuf_r+0x70>
 80092d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d4:	4630      	mov	r0, r6
 80092d6:	f000 f81d 	bl	8009314 <_isatty_r>
 80092da:	b128      	cbz	r0, 80092e8 <__smakebuf_r+0x70>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	f043 0301 	orr.w	r3, r3, #1
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	431d      	orrs	r5, r3
 80092ec:	81a5      	strh	r5, [r4, #12]
 80092ee:	e7cf      	b.n	8009290 <__smakebuf_r+0x18>

080092f0 <_fstat_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d07      	ldr	r5, [pc, #28]	; (8009310 <_fstat_r+0x20>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	4611      	mov	r1, r2
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	f7f9 f8e1 	bl	80024c4 <_fstat>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	d102      	bne.n	800930c <_fstat_r+0x1c>
 8009306:	682b      	ldr	r3, [r5, #0]
 8009308:	b103      	cbz	r3, 800930c <_fstat_r+0x1c>
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	bd38      	pop	{r3, r4, r5, pc}
 800930e:	bf00      	nop
 8009310:	200011fc 	.word	0x200011fc

08009314 <_isatty_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d06      	ldr	r5, [pc, #24]	; (8009330 <_isatty_r+0x1c>)
 8009318:	2300      	movs	r3, #0
 800931a:	4604      	mov	r4, r0
 800931c:	4608      	mov	r0, r1
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	f7f9 f8e0 	bl	80024e4 <_isatty>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_isatty_r+0x1a>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b103      	cbz	r3, 800932e <_isatty_r+0x1a>
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200011fc 	.word	0x200011fc

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
